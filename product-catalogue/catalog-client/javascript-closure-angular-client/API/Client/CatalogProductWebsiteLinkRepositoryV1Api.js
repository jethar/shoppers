/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.CatalogProductWebsiteLinkRepositoryV1Api.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel &#x60;#swagger&#x60; on irc.freenode.net.  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters 
 * Version: 1.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.CatalogProductWebsiteLinkRepositoryV1Api');

goog.require('API.Client.Body1');
goog.require('API.Client.Body2');
goog.require('API.Client.error-response');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.CatalogProductWebsiteLinkRepositoryV1Api = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('CatalogProductWebsiteLinkRepositoryV1ApiBasePath') ?
                   /** @type {!string} */ ($injector.get('CatalogProductWebsiteLinkRepositoryV1ApiBasePath')) :
                   'http://shoppers.io/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('CatalogProductWebsiteLinkRepositoryV1ApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('CatalogProductWebsiteLinkRepositoryV1ApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.CatalogProductWebsiteLinkRepositoryV1Api.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Remove the website assignment from the product by product sku
 * @param {!string} sku 
 * @param {!number} websiteId 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!boolean>}
 */
API.Client.CatalogProductWebsiteLinkRepositoryV1Api.prototype.catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete = function(sku, websiteId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/products/{sku}/websites/{websiteId}'
      .replace('{' + 'sku' + '}', String(sku))
      .replace('{' + 'websiteId' + '}', String(websiteId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'sku' is set
  if (!sku) {
    throw new Error('Missing required parameter sku when calling catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete');
  }
  // verify required parameter 'websiteId' is set
  if (!websiteId) {
    throw new Error('Missing required parameter websiteId when calling catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Assign a product to the website
 * @param {!string} sku 
 * @param {!Body2=} opt_body 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!boolean>}
 */
API.Client.CatalogProductWebsiteLinkRepositoryV1Api.prototype.catalogProductWebsiteLinkRepositoryV1SavePost = function(sku, opt_body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/products/{sku}/websites'
      .replace('{' + 'sku' + '}', String(sku));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'sku' is set
  if (!sku) {
    throw new Error('Missing required parameter sku when calling catalogProductWebsiteLinkRepositoryV1SavePost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Assign a product to the website
 * @param {!string} sku 
 * @param {!Body1=} opt_body 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!boolean>}
 */
API.Client.CatalogProductWebsiteLinkRepositoryV1Api.prototype.catalogProductWebsiteLinkRepositoryV1SavePut = function(sku, opt_body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/products/{sku}/websites'
      .replace('{' + 'sku' + '}', String(sku));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'sku' is set
  if (!sku) {
    throw new Error('Missing required parameter sku when calling catalogProductWebsiteLinkRepositoryV1SavePut');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: opt_body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
