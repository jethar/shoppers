/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ProductApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel &#x60;#swagger&#x60; on irc.freenode.net.  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters 
 * Version: 1.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.ProductApi');

goog.require('API.Client.Body');
goog.require('API.Client.catalog-data-product-search-results-interface');
goog.require('API.Client.error-response');
goog.require('API.Client.product');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ProductApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ProductApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ProductApiBasePath')) :
                   'http://shoppers.io/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ProductApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ProductApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.ProductApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Add a new product to the store
 * 
 * @param {!Body=} opt_body 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.product>}
 */
API.Client.ProductApi.prototype.addProduct = function(opt_body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/products';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Deletes a product
 * 
 * @param {!string} apiKey 
 * @param {!number} productId Product id to delete
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ProductApi.prototype.deleteProduct = function(apiKey, productId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/products/{productId}'
      .replace('{' + 'productId' + '}', String(productId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'apiKey' is set
  if (!apiKey) {
    throw new Error('Missing required parameter apiKey when calling deleteProduct');
  }
  // verify required parameter 'productId' is set
  if (!productId) {
    throw new Error('Missing required parameter productId when calling deleteProduct');
  }
  headerParams['api_key'] = apiKey;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Finds Products by category
 * Use category1 for testing.
 * @param {!string=} opt_category Category to filter by
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.catalog-data-product-search-results-interface>>}
 */
API.Client.ProductApi.prototype.findProductsByCategories = function(opt_category, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/products/findByCategory';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_category !== undefined) {
    queryParameters['category'] = opt_category;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Find product by ID
 * Returns a product when ID &lt; 10.  ID &gt; 10 or nonintegers will simulate API error conditions
 * @param {!number} productId ID of product that needs to be fetched
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.product>}
 */
API.Client.ProductApi.prototype.getProductById = function(productId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/products/{productId}'
      .replace('{' + 'productId' + '}', String(productId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'productId' is set
  if (!productId) {
    throw new Error('Missing required parameter productId when calling getProductById');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Updates a product in the store with form data
 * 
 * @param {!string} productId ID of product that needs to be updated
 * @param {!string} name Updated name of the product
 * @param {!string} status Updated status of the product
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ProductApi.prototype.updateProductWithForm = function(productId, name, status, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/v1/products/{productId}'
      .replace('{' + 'productId' + '}', String(productId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'productId' is set
  if (!productId) {
    throw new Error('Missing required parameter productId when calling updateProductWithForm');
  }
  // verify required parameter 'name' is set
  if (!name) {
    throw new Error('Missing required parameter name when calling updateProductWithForm');
  }
  // verify required parameter 'status' is set
  if (!status) {
    throw new Error('Missing required parameter status when calling updateProductWithForm');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['name'] = name;

  formParams['status'] = status;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
