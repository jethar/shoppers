//
// CatalogProductWebsiteLinkRepositoryV1API.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class CatalogProductWebsiteLinkRepositoryV1API: APIBase {

    public class func mapValuesToQueryItems(values: [String:Any?]) -> [URLQueryItem] {
        return values
            .filter { $0.1 != nil }
            .map { (item: (_key: String, _value: Any?)) -> URLQueryItem in
                URLQueryItem(name: item._key, value:"\(item._value!)")
            }
    }

    /**

     - parameter sku: (path)  
     - parameter websiteId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete(sku: String, websiteId: Int32, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        catalogProductWebsiteLinkRepositoryV1DeleteByIdDeleteWithRequestBuilder(sku: sku, websiteId: websiteId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /v1/products/{sku}/websites/{websiteId}
     - Remove the website assignment from the product by product sku
     - examples: [{contentType=application/json, example=true}]
     
     - parameter sku: (path)  
     - parameter websiteId: (path)  

     - returns: RequestBuilder<Bool> 
     */
    open class func catalogProductWebsiteLinkRepositoryV1DeleteByIdDeleteWithRequestBuilder(sku: String, websiteId: Int32) -> RequestBuilder<Bool> {
        var path = "/v1/products/{sku}/websites/{websiteId}"
        path = path.replacingOccurrences(of: "{sku}", with: "\(sku)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{websiteId}", with: "\(websiteId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter sku: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func catalogProductWebsiteLinkRepositoryV1SavePost(sku: String, body: Body2? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        catalogProductWebsiteLinkRepositoryV1SavePostWithRequestBuilder(sku: sku, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /v1/products/{sku}/websites
     - Assign a product to the website
     - examples: [{contentType=application/json, example=true}]
     
     - parameter sku: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Bool> 
     */
    open class func catalogProductWebsiteLinkRepositoryV1SavePostWithRequestBuilder(sku: String, body: Body2? = nil) -> RequestBuilder<Bool> {
        var path = "/v1/products/{sku}/websites"
        path = path.replacingOccurrences(of: "{sku}", with: "\(sku)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter sku: (path)  
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func catalogProductWebsiteLinkRepositoryV1SavePut(sku: String, body: Body1? = nil, completion: @escaping ((_ data: Bool?,_ error: Error?) -> Void)) {
        catalogProductWebsiteLinkRepositoryV1SavePutWithRequestBuilder(sku: sku, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - PUT /v1/products/{sku}/websites
     - Assign a product to the website
     - examples: [{contentType=application/json, example=true}]
     
     - parameter sku: (path)  
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Bool> 
     */
    open class func catalogProductWebsiteLinkRepositoryV1SavePutWithRequestBuilder(sku: String, body: Body1? = nil) -> RequestBuilder<Bool> {
        var path = "/v1/products/{sku}/websites"
        path = path.replacingOccurrences(of: "{sku}", with: "\(sku)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

}
