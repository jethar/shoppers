// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [Body]
        Decoders.addDecoder(clazz: [Body].self) { (source: AnyObject) -> [Body] in
            return Decoders.decode(clazz: [Body].self, source: source)
        }
        // Decoder for Body
        Decoders.addDecoder(clazz: Body.self) { (source: AnyObject) -> Body in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Body()
            instance.product = Decoders.decodeOptional(clazz: Product.self, source: sourceDictionary["product"] as AnyObject?)
            instance.saveOptions = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["saveOptions"] as AnyObject?)
            return instance
        }


        // Decoder for [Body1]
        Decoders.addDecoder(clazz: [Body1].self) { (source: AnyObject) -> [Body1] in
            return Decoders.decode(clazz: [Body1].self, source: source)
        }
        // Decoder for Body1
        Decoders.addDecoder(clazz: Body1.self) { (source: AnyObject) -> Body1 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Body1()
            instance.productWebsiteLink = Decoders.decodeOptional(clazz: CatalogProductWebsiteLinkInterface.self, source: sourceDictionary["productWebsiteLink"] as AnyObject?)
            return instance
        }


        // Decoder for [Body2]
        Decoders.addDecoder(clazz: [Body2].self) { (source: AnyObject) -> [Body2] in
            return Decoders.decode(clazz: [Body2].self, source: source)
        }
        // Decoder for Body2
        Decoders.addDecoder(clazz: Body2.self) { (source: AnyObject) -> Body2 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Body2()
            instance.productWebsiteLink = Decoders.decodeOptional(clazz: CatalogProductWebsiteLinkInterface.self, source: sourceDictionary["productWebsiteLink"] as AnyObject?)
            return instance
        }


        // Decoder for [BundleDataLinkInterface]
        Decoders.addDecoder(clazz: [BundleDataLinkInterface].self) { (source: AnyObject) -> [BundleDataLinkInterface] in
            return Decoders.decode(clazz: [BundleDataLinkInterface].self, source: source)
        }
        // Decoder for BundleDataLinkInterface
        Decoders.addDecoder(clazz: BundleDataLinkInterface.self) { (source: AnyObject) -> BundleDataLinkInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BundleDataLinkInterface()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.optionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["option_id"] as AnyObject?)
            instance.qty = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["qty"] as AnyObject?)
            instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"] as AnyObject?)
            instance.isDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_default"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            instance.priceType = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["price_type"] as AnyObject?)
            instance.canChangeQuantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["can_change_quantity"] as AnyObject?)
            return instance
        }


        // Decoder for [BundleDataOptionInterface]
        Decoders.addDecoder(clazz: [BundleDataOptionInterface].self) { (source: AnyObject) -> [BundleDataOptionInterface] in
            return Decoders.decode(clazz: [BundleDataOptionInterface].self, source: source)
        }
        // Decoder for BundleDataOptionInterface
        Decoders.addDecoder(clazz: BundleDataOptionInterface.self) { (source: AnyObject) -> BundleDataOptionInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = BundleDataOptionInterface()
            instance.optionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["option_id"] as AnyObject?)
            instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?)
            instance._required = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["required"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.productLinks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["product_links"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataCategoryAttributeInterface]
        Decoders.addDecoder(clazz: [CatalogDataCategoryAttributeInterface].self) { (source: AnyObject) -> [CatalogDataCategoryAttributeInterface] in
            return Decoders.decode(clazz: [CatalogDataCategoryAttributeInterface].self, source: source)
        }
        // Decoder for CatalogDataCategoryAttributeInterface
        Decoders.addDecoder(clazz: CatalogDataCategoryAttributeInterface.self) { (source: AnyObject) -> CatalogDataCategoryAttributeInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataCategoryAttributeInterface()
            instance.isWysiwygEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_wysiwyg_enabled"] as AnyObject?)
            instance.isHtmlAllowedOnFront = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_html_allowed_on_front"] as AnyObject?)
            instance.usedForSortBy = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["used_for_sort_by"] as AnyObject?)
            instance.isFilterable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_filterable"] as AnyObject?)
            instance.isFilterableInSearch = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_filterable_in_search"] as AnyObject?)
            instance.isUsedInGrid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_used_in_grid"] as AnyObject?)
            instance.isVisibleInGrid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_visible_in_grid"] as AnyObject?)
            instance.isFilterableInGrid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_filterable_in_grid"] as AnyObject?)
            instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"] as AnyObject?)
            instance.applyTo = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["apply_to"] as AnyObject?)
            instance.isSearchable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_searchable"] as AnyObject?)
            instance.isVisibleInAdvancedSearch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_visible_in_advanced_search"] as AnyObject?)
            instance.isComparable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_comparable"] as AnyObject?)
            instance.isUsedForPromoRules = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_used_for_promo_rules"] as AnyObject?)
            instance.isVisibleOnFront = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_visible_on_front"] as AnyObject?)
            instance.usedInProductListing = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["used_in_product_listing"] as AnyObject?)
            instance.isVisible = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_visible"] as AnyObject?)
            instance.scope = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scope"] as AnyObject?)
            instance.attributeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["attribute_id"] as AnyObject?)
            instance.attributeCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attribute_code"] as AnyObject?)
            instance.frontendInput = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["frontend_input"] as AnyObject?)
            instance.entityTypeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entity_type_id"] as AnyObject?)
            instance.isRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_required"] as AnyObject?)
            instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"] as AnyObject?)
            instance.isUserDefined = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_user_defined"] as AnyObject?)
            instance.defaultFrontendLabel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["default_frontend_label"] as AnyObject?)
            instance.frontendLabels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["frontend_labels"] as AnyObject?)
            instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"] as AnyObject?)
            instance.backendType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["backend_type"] as AnyObject?)
            instance.backendModel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["backend_model"] as AnyObject?)
            instance.sourceModel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source_model"] as AnyObject?)
            instance.defaultValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["default_value"] as AnyObject?)
            instance.isUnique = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_unique"] as AnyObject?)
            instance.frontendClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["frontend_class"] as AnyObject?)
            instance.validationRules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["validation_rules"] as AnyObject?)
            instance.customAttributes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["custom_attributes"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataCategoryTreeInterface]
        Decoders.addDecoder(clazz: [CatalogDataCategoryTreeInterface].self) { (source: AnyObject) -> [CatalogDataCategoryTreeInterface] in
            return Decoders.decode(clazz: [CatalogDataCategoryTreeInterface].self, source: source)
        }
        // Decoder for CatalogDataCategoryTreeInterface
        Decoders.addDecoder(clazz: CatalogDataCategoryTreeInterface.self) { (source: AnyObject) -> CatalogDataCategoryTreeInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataCategoryTreeInterface()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.parentId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parent_id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.isActive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_active"] as AnyObject?)
            instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"] as AnyObject?)
            instance.level = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["level"] as AnyObject?)
            instance.productCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["product_count"] as AnyObject?)
            instance.childrenData = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["children_data"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataProductAttributeInterface]
        Decoders.addDecoder(clazz: [CatalogDataProductAttributeInterface].self) { (source: AnyObject) -> [CatalogDataProductAttributeInterface] in
            return Decoders.decode(clazz: [CatalogDataProductAttributeInterface].self, source: source)
        }
        // Decoder for CatalogDataProductAttributeInterface
        Decoders.addDecoder(clazz: CatalogDataProductAttributeInterface.self) { (source: AnyObject) -> CatalogDataProductAttributeInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataProductAttributeInterface()
            instance.isWysiwygEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_wysiwyg_enabled"] as AnyObject?)
            instance.isHtmlAllowedOnFront = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_html_allowed_on_front"] as AnyObject?)
            instance.usedForSortBy = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["used_for_sort_by"] as AnyObject?)
            instance.isFilterable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_filterable"] as AnyObject?)
            instance.isFilterableInSearch = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_filterable_in_search"] as AnyObject?)
            instance.isUsedInGrid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_used_in_grid"] as AnyObject?)
            instance.isVisibleInGrid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_visible_in_grid"] as AnyObject?)
            instance.isFilterableInGrid = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_filterable_in_grid"] as AnyObject?)
            instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"] as AnyObject?)
            instance.applyTo = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["apply_to"] as AnyObject?)
            instance.isSearchable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_searchable"] as AnyObject?)
            instance.isVisibleInAdvancedSearch = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_visible_in_advanced_search"] as AnyObject?)
            instance.isComparable = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_comparable"] as AnyObject?)
            instance.isUsedForPromoRules = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_used_for_promo_rules"] as AnyObject?)
            instance.isVisibleOnFront = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_visible_on_front"] as AnyObject?)
            instance.usedInProductListing = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["used_in_product_listing"] as AnyObject?)
            instance.isVisible = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_visible"] as AnyObject?)
            instance.scope = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["scope"] as AnyObject?)
            instance.attributeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["attribute_id"] as AnyObject?)
            instance.attributeCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attribute_code"] as AnyObject?)
            instance.frontendInput = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["frontend_input"] as AnyObject?)
            instance.entityTypeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["entity_type_id"] as AnyObject?)
            instance.isRequired = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_required"] as AnyObject?)
            instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"] as AnyObject?)
            instance.isUserDefined = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_user_defined"] as AnyObject?)
            instance.defaultFrontendLabel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["default_frontend_label"] as AnyObject?)
            instance.frontendLabels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["frontend_labels"] as AnyObject?)
            instance.note = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["note"] as AnyObject?)
            instance.backendType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["backend_type"] as AnyObject?)
            instance.backendModel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["backend_model"] as AnyObject?)
            instance.sourceModel = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["source_model"] as AnyObject?)
            instance.defaultValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["default_value"] as AnyObject?)
            instance.isUnique = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_unique"] as AnyObject?)
            instance.frontendClass = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["frontend_class"] as AnyObject?)
            instance.validationRules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["validation_rules"] as AnyObject?)
            instance.customAttributes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["custom_attributes"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataProductAttributeMediaGalleryEntryInterface]
        Decoders.addDecoder(clazz: [CatalogDataProductAttributeMediaGalleryEntryInterface].self) { (source: AnyObject) -> [CatalogDataProductAttributeMediaGalleryEntryInterface] in
            return Decoders.decode(clazz: [CatalogDataProductAttributeMediaGalleryEntryInterface].self, source: source)
        }
        // Decoder for CatalogDataProductAttributeMediaGalleryEntryInterface
        Decoders.addDecoder(clazz: CatalogDataProductAttributeMediaGalleryEntryInterface.self) { (source: AnyObject) -> CatalogDataProductAttributeMediaGalleryEntryInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataProductAttributeMediaGalleryEntryInterface()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.mediaType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["media_type"] as AnyObject?)
            instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"] as AnyObject?)
            instance.disabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["disabled"] as AnyObject?)
            instance.types = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["types"] as AnyObject?)
            instance.file = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file"] as AnyObject?)
            instance.content = Decoders.decodeOptional(clazz: FrameworkDataImageContentInterface.self, source: sourceDictionary["content"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataProductAttributeSearchResultsInterface]
        Decoders.addDecoder(clazz: [CatalogDataProductAttributeSearchResultsInterface].self) { (source: AnyObject) -> [CatalogDataProductAttributeSearchResultsInterface] in
            return Decoders.decode(clazz: [CatalogDataProductAttributeSearchResultsInterface].self, source: source)
        }
        // Decoder for CatalogDataProductAttributeSearchResultsInterface
        Decoders.addDecoder(clazz: CatalogDataProductAttributeSearchResultsInterface.self) { (source: AnyObject) -> CatalogDataProductAttributeSearchResultsInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataProductAttributeSearchResultsInterface()
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            instance.searchCriteria = Decoders.decodeOptional(clazz: FrameworkSearchCriteriaInterface.self, source: sourceDictionary["search_criteria"] as AnyObject?)
            instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_count"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataProductCustomOptionInterface]
        Decoders.addDecoder(clazz: [CatalogDataProductCustomOptionInterface].self) { (source: AnyObject) -> [CatalogDataProductCustomOptionInterface] in
            return Decoders.decode(clazz: [CatalogDataProductCustomOptionInterface].self, source: source)
        }
        // Decoder for CatalogDataProductCustomOptionInterface
        Decoders.addDecoder(clazz: CatalogDataProductCustomOptionInterface.self) { (source: AnyObject) -> CatalogDataProductCustomOptionInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataProductCustomOptionInterface()
            instance.productSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["product_sku"] as AnyObject?)
            instance.optionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["option_id"] as AnyObject?)
            instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.sortOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort_order"] as AnyObject?)
            instance.isRequire = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_require"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            instance.priceType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["price_type"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.fileExtension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file_extension"] as AnyObject?)
            instance.maxCharacters = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_characters"] as AnyObject?)
            instance.imageSizeX = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["image_size_x"] as AnyObject?)
            instance.imageSizeY = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["image_size_y"] as AnyObject?)
            instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataProductCustomOptionValuesInterface]
        Decoders.addDecoder(clazz: [CatalogDataProductCustomOptionValuesInterface].self) { (source: AnyObject) -> [CatalogDataProductCustomOptionValuesInterface] in
            return Decoders.decode(clazz: [CatalogDataProductCustomOptionValuesInterface].self, source: source)
        }
        // Decoder for CatalogDataProductCustomOptionValuesInterface
        Decoders.addDecoder(clazz: CatalogDataProductCustomOptionValuesInterface.self) { (source: AnyObject) -> CatalogDataProductCustomOptionValuesInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataProductCustomOptionValuesInterface()
            instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?)
            instance.sortOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort_order"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            instance.priceType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["price_type"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.optionTypeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["option_type_id"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataProductLinkInterface]
        Decoders.addDecoder(clazz: [CatalogDataProductLinkInterface].self) { (source: AnyObject) -> [CatalogDataProductLinkInterface] in
            return Decoders.decode(clazz: [CatalogDataProductLinkInterface].self, source: source)
        }
        // Decoder for CatalogDataProductLinkInterface
        Decoders.addDecoder(clazz: CatalogDataProductLinkInterface.self) { (source: AnyObject) -> CatalogDataProductLinkInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataProductLinkInterface()
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.linkType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link_type"] as AnyObject?)
            instance.linkedProductSku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["linked_product_sku"] as AnyObject?)
            instance.linkedProductType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["linked_product_type"] as AnyObject?)
            instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataProductSearchResultsInterface]
        Decoders.addDecoder(clazz: [CatalogDataProductSearchResultsInterface].self) { (source: AnyObject) -> [CatalogDataProductSearchResultsInterface] in
            return Decoders.decode(clazz: [CatalogDataProductSearchResultsInterface].self, source: source)
        }
        // Decoder for CatalogDataProductSearchResultsInterface
        Decoders.addDecoder(clazz: CatalogDataProductSearchResultsInterface.self) { (source: AnyObject) -> CatalogDataProductSearchResultsInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataProductSearchResultsInterface()
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            instance.searchCriteria = Decoders.decodeOptional(clazz: FrameworkSearchCriteriaInterface.self, source: sourceDictionary["search_criteria"] as AnyObject?)
            instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_count"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogDataProductTierPriceInterface]
        Decoders.addDecoder(clazz: [CatalogDataProductTierPriceInterface].self) { (source: AnyObject) -> [CatalogDataProductTierPriceInterface] in
            return Decoders.decode(clazz: [CatalogDataProductTierPriceInterface].self, source: source)
        }
        // Decoder for CatalogDataProductTierPriceInterface
        Decoders.addDecoder(clazz: CatalogDataProductTierPriceInterface.self) { (source: AnyObject) -> CatalogDataProductTierPriceInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogDataProductTierPriceInterface()
            instance.customerGroupId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["customer_group_id"] as AnyObject?)
            instance.qty = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["qty"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogInventoryDataStockItemInterface]
        Decoders.addDecoder(clazz: [CatalogInventoryDataStockItemInterface].self) { (source: AnyObject) -> [CatalogInventoryDataStockItemInterface] in
            return Decoders.decode(clazz: [CatalogInventoryDataStockItemInterface].self, source: source)
        }
        // Decoder for CatalogInventoryDataStockItemInterface
        Decoders.addDecoder(clazz: CatalogInventoryDataStockItemInterface.self) { (source: AnyObject) -> CatalogInventoryDataStockItemInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogInventoryDataStockItemInterface()
            instance.itemId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["item_id"] as AnyObject?)
            instance.productId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["product_id"] as AnyObject?)
            instance.stockId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["stock_id"] as AnyObject?)
            instance.qty = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["qty"] as AnyObject?)
            instance.isInStock = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_in_stock"] as AnyObject?)
            instance.isQtyDecimal = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_qty_decimal"] as AnyObject?)
            instance.showDefaultNotificationMessage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["show_default_notification_message"] as AnyObject?)
            instance.useConfigMinQty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["use_config_min_qty"] as AnyObject?)
            instance.minQty = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min_qty"] as AnyObject?)
            instance.useConfigMinSaleQty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["use_config_min_sale_qty"] as AnyObject?)
            instance.minSaleQty = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min_sale_qty"] as AnyObject?)
            instance.useConfigMaxSaleQty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["use_config_max_sale_qty"] as AnyObject?)
            instance.maxSaleQty = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max_sale_qty"] as AnyObject?)
            instance.useConfigBackorders = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["use_config_backorders"] as AnyObject?)
            instance.backorders = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["backorders"] as AnyObject?)
            instance.useConfigNotifyStockQty = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["use_config_notify_stock_qty"] as AnyObject?)
            instance.notifyStockQty = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["notify_stock_qty"] as AnyObject?)
            instance.useConfigQtyIncrements = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["use_config_qty_increments"] as AnyObject?)
            instance.qtyIncrements = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["qty_increments"] as AnyObject?)
            instance.useConfigEnableQtyInc = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["use_config_enable_qty_inc"] as AnyObject?)
            instance.enableQtyIncrements = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_qty_increments"] as AnyObject?)
            instance.useConfigManageStock = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["use_config_manage_stock"] as AnyObject?)
            instance.manageStock = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manage_stock"] as AnyObject?)
            instance.lowStockDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["low_stock_date"] as AnyObject?)
            instance.isDecimalDivided = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_decimal_divided"] as AnyObject?)
            instance.stockStatusChangedAuto = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["stock_status_changed_auto"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogInventoryDataStockStatusCollectionInterface]
        Decoders.addDecoder(clazz: [CatalogInventoryDataStockStatusCollectionInterface].self) { (source: AnyObject) -> [CatalogInventoryDataStockStatusCollectionInterface] in
            return Decoders.decode(clazz: [CatalogInventoryDataStockStatusCollectionInterface].self, source: source)
        }
        // Decoder for CatalogInventoryDataStockStatusCollectionInterface
        Decoders.addDecoder(clazz: CatalogInventoryDataStockStatusCollectionInterface.self) { (source: AnyObject) -> CatalogInventoryDataStockStatusCollectionInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogInventoryDataStockStatusCollectionInterface()
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            instance.searchCriteria = Decoders.decodeOptional(clazz: CatalogInventoryStockStatusCriteriaInterface.self, source: sourceDictionary["search_criteria"] as AnyObject?)
            instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_count"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogInventoryDataStockStatusInterface]
        Decoders.addDecoder(clazz: [CatalogInventoryDataStockStatusInterface].self) { (source: AnyObject) -> [CatalogInventoryDataStockStatusInterface] in
            return Decoders.decode(clazz: [CatalogInventoryDataStockStatusInterface].self, source: source)
        }
        // Decoder for CatalogInventoryDataStockStatusInterface
        Decoders.addDecoder(clazz: CatalogInventoryDataStockStatusInterface.self) { (source: AnyObject) -> CatalogInventoryDataStockStatusInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogInventoryDataStockStatusInterface()
            instance.productId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["product_id"] as AnyObject?)
            instance.stockId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["stock_id"] as AnyObject?)
            instance.qty = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["qty"] as AnyObject?)
            instance.stockStatus = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["stock_status"] as AnyObject?)
            instance.stockItem = Decoders.decodeOptional(clazz: CatalogInventoryDataStockItemInterface.self, source: sourceDictionary["stock_item"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogInventoryStockStatusCriteriaInterface]
        Decoders.addDecoder(clazz: [CatalogInventoryStockStatusCriteriaInterface].self) { (source: AnyObject) -> [CatalogInventoryStockStatusCriteriaInterface] in
            return Decoders.decode(clazz: [CatalogInventoryStockStatusCriteriaInterface].self, source: source)
        }
        // Decoder for CatalogInventoryStockStatusCriteriaInterface
        Decoders.addDecoder(clazz: CatalogInventoryStockStatusCriteriaInterface.self) { (source: AnyObject) -> CatalogInventoryStockStatusCriteriaInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogInventoryStockStatusCriteriaInterface()
            instance.mapperInterfaceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mapper_interface_name"] as AnyObject?)
            instance.criteriaList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["criteria_list"] as AnyObject?)
            instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.orders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orders"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["limit"] as AnyObject?)
            return instance
        }


        // Decoder for [CatalogProductWebsiteLinkInterface]
        Decoders.addDecoder(clazz: [CatalogProductWebsiteLinkInterface].self) { (source: AnyObject) -> [CatalogProductWebsiteLinkInterface] in
            return Decoders.decode(clazz: [CatalogProductWebsiteLinkInterface].self, source: source)
        }
        // Decoder for CatalogProductWebsiteLinkInterface
        Decoders.addDecoder(clazz: CatalogProductWebsiteLinkInterface.self) { (source: AnyObject) -> CatalogProductWebsiteLinkInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CatalogProductWebsiteLinkInterface()
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.websiteId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["website_id"] as AnyObject?)
            return instance
        }


        // Decoder for [Category]
        Decoders.addDecoder(clazz: [Category].self) { (source: AnyObject) -> [Category] in
            return Decoders.decode(clazz: [Category].self, source: source)
        }
        // Decoder for Category
        Decoders.addDecoder(clazz: Category.self) { (source: AnyObject) -> Category in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Category()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [ConfigurableProductDataOptionInterface]
        Decoders.addDecoder(clazz: [ConfigurableProductDataOptionInterface].self) { (source: AnyObject) -> [ConfigurableProductDataOptionInterface] in
            return Decoders.decode(clazz: [ConfigurableProductDataOptionInterface].self, source: source)
        }
        // Decoder for ConfigurableProductDataOptionInterface
        Decoders.addDecoder(clazz: ConfigurableProductDataOptionInterface.self) { (source: AnyObject) -> ConfigurableProductDataOptionInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ConfigurableProductDataOptionInterface()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.attributeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attribute_id"] as AnyObject?)
            instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            instance.position = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["position"] as AnyObject?)
            instance.isUseDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_use_default"] as AnyObject?)
            instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"] as AnyObject?)
            instance.productId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["product_id"] as AnyObject?)
            return instance
        }


        // Decoder for [ConfigurableProductDataOptionValueInterface]
        Decoders.addDecoder(clazz: [ConfigurableProductDataOptionValueInterface].self) { (source: AnyObject) -> [ConfigurableProductDataOptionValueInterface] in
            return Decoders.decode(clazz: [ConfigurableProductDataOptionValueInterface].self, source: source)
        }
        // Decoder for ConfigurableProductDataOptionValueInterface
        Decoders.addDecoder(clazz: ConfigurableProductDataOptionValueInterface.self) { (source: AnyObject) -> ConfigurableProductDataOptionValueInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ConfigurableProductDataOptionValueInterface()
            instance.valueIndex = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value_index"] as AnyObject?)
            return instance
        }


        // Decoder for [DownloadableDataFileContentInterface]
        Decoders.addDecoder(clazz: [DownloadableDataFileContentInterface].self) { (source: AnyObject) -> [DownloadableDataFileContentInterface] in
            return Decoders.decode(clazz: [DownloadableDataFileContentInterface].self, source: source)
        }
        // Decoder for DownloadableDataFileContentInterface
        Decoders.addDecoder(clazz: DownloadableDataFileContentInterface.self) { (source: AnyObject) -> DownloadableDataFileContentInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DownloadableDataFileContentInterface()
            instance.fileData = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["file_data"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [DownloadableDataLinkInterface]
        Decoders.addDecoder(clazz: [DownloadableDataLinkInterface].self) { (source: AnyObject) -> [DownloadableDataLinkInterface] in
            return Decoders.decode(clazz: [DownloadableDataLinkInterface].self, source: source)
        }
        // Decoder for DownloadableDataLinkInterface
        Decoders.addDecoder(clazz: DownloadableDataLinkInterface.self) { (source: AnyObject) -> DownloadableDataLinkInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DownloadableDataLinkInterface()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?)
            instance.sortOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort_order"] as AnyObject?)
            instance.isShareable = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["is_shareable"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            instance.numberOfDownloads = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number_of_downloads"] as AnyObject?)
            instance.linkType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link_type"] as AnyObject?)
            instance.linkFile = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link_file"] as AnyObject?)
            instance.linkFileContent = Decoders.decodeOptional(clazz: DownloadableDataFileContentInterface.self, source: sourceDictionary["link_file_content"] as AnyObject?)
            instance.linkUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["link_url"] as AnyObject?)
            instance.sampleType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sample_type"] as AnyObject?)
            instance.sampleFile = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sample_file"] as AnyObject?)
            instance.sampleFileContent = Decoders.decodeOptional(clazz: DownloadableDataFileContentInterface.self, source: sourceDictionary["sample_file_content"] as AnyObject?)
            instance.sampleUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sample_url"] as AnyObject?)
            return instance
        }


        // Decoder for [DownloadableDataSampleInterface]
        Decoders.addDecoder(clazz: [DownloadableDataSampleInterface].self) { (source: AnyObject) -> [DownloadableDataSampleInterface] in
            return Decoders.decode(clazz: [DownloadableDataSampleInterface].self, source: source)
        }
        // Decoder for DownloadableDataSampleInterface
        Decoders.addDecoder(clazz: DownloadableDataSampleInterface.self) { (source: AnyObject) -> DownloadableDataSampleInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DownloadableDataSampleInterface()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?)
            instance.sortOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort_order"] as AnyObject?)
            instance.sampleType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sample_type"] as AnyObject?)
            instance.sampleFile = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sample_file"] as AnyObject?)
            instance.sampleFileContent = Decoders.decodeOptional(clazz: DownloadableDataFileContentInterface.self, source: sourceDictionary["sample_file_content"] as AnyObject?)
            instance.sampleUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sample_url"] as AnyObject?)
            return instance
        }


        // Decoder for [EavDataAttributeFrontendLabelInterface]
        Decoders.addDecoder(clazz: [EavDataAttributeFrontendLabelInterface].self) { (source: AnyObject) -> [EavDataAttributeFrontendLabelInterface] in
            return Decoders.decode(clazz: [EavDataAttributeFrontendLabelInterface].self, source: source)
        }
        // Decoder for EavDataAttributeFrontendLabelInterface
        Decoders.addDecoder(clazz: EavDataAttributeFrontendLabelInterface.self) { (source: AnyObject) -> EavDataAttributeFrontendLabelInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = EavDataAttributeFrontendLabelInterface()
            instance.storeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["store_id"] as AnyObject?)
            instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            return instance
        }


        // Decoder for [EavDataAttributeOptionInterface]
        Decoders.addDecoder(clazz: [EavDataAttributeOptionInterface].self) { (source: AnyObject) -> [EavDataAttributeOptionInterface] in
            return Decoders.decode(clazz: [EavDataAttributeOptionInterface].self, source: source)
        }
        // Decoder for EavDataAttributeOptionInterface
        Decoders.addDecoder(clazz: EavDataAttributeOptionInterface.self) { (source: AnyObject) -> EavDataAttributeOptionInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = EavDataAttributeOptionInterface()
            instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            instance.sortOrder = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sort_order"] as AnyObject?)
            instance.isDefault = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_default"] as AnyObject?)
            instance.storeLabels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["store_labels"] as AnyObject?)
            return instance
        }


        // Decoder for [EavDataAttributeOptionLabelInterface]
        Decoders.addDecoder(clazz: [EavDataAttributeOptionLabelInterface].self) { (source: AnyObject) -> [EavDataAttributeOptionLabelInterface] in
            return Decoders.decode(clazz: [EavDataAttributeOptionLabelInterface].self, source: source)
        }
        // Decoder for EavDataAttributeOptionLabelInterface
        Decoders.addDecoder(clazz: EavDataAttributeOptionLabelInterface.self) { (source: AnyObject) -> EavDataAttributeOptionLabelInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = EavDataAttributeOptionLabelInterface()
            instance.storeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["store_id"] as AnyObject?)
            instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?)
            return instance
        }


        // Decoder for [EavDataAttributeValidationRuleInterface]
        Decoders.addDecoder(clazz: [EavDataAttributeValidationRuleInterface].self) { (source: AnyObject) -> [EavDataAttributeValidationRuleInterface] in
            return Decoders.decode(clazz: [EavDataAttributeValidationRuleInterface].self, source: source)
        }
        // Decoder for EavDataAttributeValidationRuleInterface
        Decoders.addDecoder(clazz: EavDataAttributeValidationRuleInterface.self) { (source: AnyObject) -> EavDataAttributeValidationRuleInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = EavDataAttributeValidationRuleInterface()
            instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [ErrorErrors]
        Decoders.addDecoder(clazz: [ErrorErrors].self) { (source: AnyObject) -> [ErrorErrors] in
            return Decoders.decode(clazz: [ErrorErrors].self, source: source)
        }
        // Decoder for ErrorErrors
        Decoders.addDecoder(clazz: ErrorErrors.self) { (source: AnyObject) -> ErrorErrors in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: ErrorErrorsItem.self, source: $0) })
        }


        // Decoder for [ErrorErrorsItem]
        Decoders.addDecoder(clazz: [ErrorErrorsItem].self) { (source: AnyObject) -> [ErrorErrorsItem] in
            return Decoders.decode(clazz: [ErrorErrorsItem].self, source: source)
        }
        // Decoder for ErrorErrorsItem
        Decoders.addDecoder(clazz: ErrorErrorsItem.self) { (source: AnyObject) -> ErrorErrorsItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ErrorErrorsItem()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            instance.parameters = Decoders.decodeOptional(clazz: ErrorParameters.self, source: sourceDictionary["parameters"] as AnyObject?)
            return instance
        }


        // Decoder for [ErrorParameters]
        Decoders.addDecoder(clazz: [ErrorParameters].self) { (source: AnyObject) -> [ErrorParameters] in
            return Decoders.decode(clazz: [ErrorParameters].self, source: source)
        }
        // Decoder for ErrorParameters
        Decoders.addDecoder(clazz: ErrorParameters.self) { (source: AnyObject) -> ErrorParameters in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: ErrorParametersItem.self, source: $0) })
        }


        // Decoder for [ErrorParametersItem]
        Decoders.addDecoder(clazz: [ErrorParametersItem].self) { (source: AnyObject) -> [ErrorParametersItem] in
            return Decoders.decode(clazz: [ErrorParametersItem].self, source: source)
        }
        // Decoder for ErrorParametersItem
        Decoders.addDecoder(clazz: ErrorParametersItem.self) { (source: AnyObject) -> ErrorParametersItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ErrorParametersItem()
            instance.resources = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resources"] as AnyObject?)
            instance.fieldName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldName"] as AnyObject?)
            instance.fieldValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fieldValue"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkAttributeInterface]
        Decoders.addDecoder(clazz: [FrameworkAttributeInterface].self) { (source: AnyObject) -> [FrameworkAttributeInterface] in
            return Decoders.decode(clazz: [FrameworkAttributeInterface].self, source: source)
        }
        // Decoder for FrameworkAttributeInterface
        Decoders.addDecoder(clazz: FrameworkAttributeInterface.self) { (source: AnyObject) -> FrameworkAttributeInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkAttributeInterface()
            instance.attributeCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attribute_code"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkCriteriaInterface]
        Decoders.addDecoder(clazz: [FrameworkCriteriaInterface].self) { (source: AnyObject) -> [FrameworkCriteriaInterface] in
            return Decoders.decode(clazz: [FrameworkCriteriaInterface].self, source: source)
        }
        // Decoder for FrameworkCriteriaInterface
        Decoders.addDecoder(clazz: FrameworkCriteriaInterface.self) { (source: AnyObject) -> FrameworkCriteriaInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkCriteriaInterface()
            instance.mapperInterfaceName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mapper_interface_name"] as AnyObject?)
            instance.criteriaList = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["criteria_list"] as AnyObject?)
            instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.orders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orders"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["limit"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkDataImageContentInterface]
        Decoders.addDecoder(clazz: [FrameworkDataImageContentInterface].self) { (source: AnyObject) -> [FrameworkDataImageContentInterface] in
            return Decoders.decode(clazz: [FrameworkDataImageContentInterface].self, source: source)
        }
        // Decoder for FrameworkDataImageContentInterface
        Decoders.addDecoder(clazz: FrameworkDataImageContentInterface.self) { (source: AnyObject) -> FrameworkDataImageContentInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkDataImageContentInterface()
            instance.base64EncodedData = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base64_encoded_data"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkFilter]
        Decoders.addDecoder(clazz: [FrameworkFilter].self) { (source: AnyObject) -> [FrameworkFilter] in
            return Decoders.decode(clazz: [FrameworkFilter].self, source: source)
        }
        // Decoder for FrameworkFilter
        Decoders.addDecoder(clazz: FrameworkFilter.self) { (source: AnyObject) -> FrameworkFilter in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkFilter()
            instance.field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["field"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            instance.conditionType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["condition_type"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkSearchAggregationInterface]
        Decoders.addDecoder(clazz: [FrameworkSearchAggregationInterface].self) { (source: AnyObject) -> [FrameworkSearchAggregationInterface] in
            return Decoders.decode(clazz: [FrameworkSearchAggregationInterface].self, source: source)
        }
        // Decoder for FrameworkSearchAggregationInterface
        Decoders.addDecoder(clazz: FrameworkSearchAggregationInterface.self) { (source: AnyObject) -> FrameworkSearchAggregationInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkSearchAggregationInterface()
            instance.buckets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["buckets"] as AnyObject?)
            instance.bucketNames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bucket_names"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkSearchAggregationValueInterface]
        Decoders.addDecoder(clazz: [FrameworkSearchAggregationValueInterface].self) { (source: AnyObject) -> [FrameworkSearchAggregationValueInterface] in
            return Decoders.decode(clazz: [FrameworkSearchAggregationValueInterface].self, source: source)
        }
        // Decoder for FrameworkSearchAggregationValueInterface
        Decoders.addDecoder(clazz: FrameworkSearchAggregationValueInterface.self) { (source: AnyObject) -> FrameworkSearchAggregationValueInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkSearchAggregationValueInterface()
            instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            instance.metrics = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["metrics"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkSearchBucketInterface]
        Decoders.addDecoder(clazz: [FrameworkSearchBucketInterface].self) { (source: AnyObject) -> [FrameworkSearchBucketInterface] in
            return Decoders.decode(clazz: [FrameworkSearchBucketInterface].self, source: source)
        }
        // Decoder for FrameworkSearchBucketInterface
        Decoders.addDecoder(clazz: FrameworkSearchBucketInterface.self) { (source: AnyObject) -> FrameworkSearchBucketInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkSearchBucketInterface()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.values = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["values"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkSearchCriteriaInterface]
        Decoders.addDecoder(clazz: [FrameworkSearchCriteriaInterface].self) { (source: AnyObject) -> [FrameworkSearchCriteriaInterface] in
            return Decoders.decode(clazz: [FrameworkSearchCriteriaInterface].self, source: source)
        }
        // Decoder for FrameworkSearchCriteriaInterface
        Decoders.addDecoder(clazz: FrameworkSearchCriteriaInterface.self) { (source: AnyObject) -> FrameworkSearchCriteriaInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkSearchCriteriaInterface()
            instance.filterGroups = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filter_groups"] as AnyObject?)
            instance.sortOrders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort_orders"] as AnyObject?)
            instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["page_size"] as AnyObject?)
            instance.currentPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["current_page"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkSearchDocumentInterface]
        Decoders.addDecoder(clazz: [FrameworkSearchDocumentInterface].self) { (source: AnyObject) -> [FrameworkSearchDocumentInterface] in
            return Decoders.decode(clazz: [FrameworkSearchDocumentInterface].self, source: source)
        }
        // Decoder for FrameworkSearchDocumentInterface
        Decoders.addDecoder(clazz: FrameworkSearchDocumentInterface.self) { (source: AnyObject) -> FrameworkSearchDocumentInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkSearchDocumentInterface()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.customAttributes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["custom_attributes"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkSearchFilterGroup]
        Decoders.addDecoder(clazz: [FrameworkSearchFilterGroup].self) { (source: AnyObject) -> [FrameworkSearchFilterGroup] in
            return Decoders.decode(clazz: [FrameworkSearchFilterGroup].self, source: source)
        }
        // Decoder for FrameworkSearchFilterGroup
        Decoders.addDecoder(clazz: FrameworkSearchFilterGroup.self) { (source: AnyObject) -> FrameworkSearchFilterGroup in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkSearchFilterGroup()
            instance.filters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filters"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkSearchSearchCriteriaInterface]
        Decoders.addDecoder(clazz: [FrameworkSearchSearchCriteriaInterface].self) { (source: AnyObject) -> [FrameworkSearchSearchCriteriaInterface] in
            return Decoders.decode(clazz: [FrameworkSearchSearchCriteriaInterface].self, source: source)
        }
        // Decoder for FrameworkSearchSearchCriteriaInterface
        Decoders.addDecoder(clazz: FrameworkSearchSearchCriteriaInterface.self) { (source: AnyObject) -> FrameworkSearchSearchCriteriaInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkSearchSearchCriteriaInterface()
            instance.requestName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["request_name"] as AnyObject?)
            instance.filterGroups = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["filter_groups"] as AnyObject?)
            instance.sortOrders = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort_orders"] as AnyObject?)
            instance.pageSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["page_size"] as AnyObject?)
            instance.currentPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["current_page"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkSearchSearchResultInterface]
        Decoders.addDecoder(clazz: [FrameworkSearchSearchResultInterface].self) { (source: AnyObject) -> [FrameworkSearchSearchResultInterface] in
            return Decoders.decode(clazz: [FrameworkSearchSearchResultInterface].self, source: source)
        }
        // Decoder for FrameworkSearchSearchResultInterface
        Decoders.addDecoder(clazz: FrameworkSearchSearchResultInterface.self) { (source: AnyObject) -> FrameworkSearchSearchResultInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkSearchSearchResultInterface()
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            instance.aggregations = Decoders.decodeOptional(clazz: FrameworkSearchAggregationInterface.self, source: sourceDictionary["aggregations"] as AnyObject?)
            instance.searchCriteria = Decoders.decodeOptional(clazz: FrameworkSearchSearchCriteriaInterface.self, source: sourceDictionary["search_criteria"] as AnyObject?)
            instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_count"] as AnyObject?)
            return instance
        }


        // Decoder for [FrameworkSortOrder]
        Decoders.addDecoder(clazz: [FrameworkSortOrder].self) { (source: AnyObject) -> [FrameworkSortOrder] in
            return Decoders.decode(clazz: [FrameworkSortOrder].self, source: source)
        }
        // Decoder for FrameworkSortOrder
        Decoders.addDecoder(clazz: FrameworkSortOrder.self) { (source: AnyObject) -> FrameworkSortOrder in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FrameworkSortOrder()
            instance.field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["field"] as AnyObject?)
            instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"] as AnyObject?)
            return instance
        }


        // Decoder for [ModelErrorResponse]
        Decoders.addDecoder(clazz: [ModelErrorResponse].self) { (source: AnyObject) -> [ModelErrorResponse] in
            return Decoders.decode(clazz: [ModelErrorResponse].self, source: source)
        }
        // Decoder for ModelErrorResponse
        Decoders.addDecoder(clazz: ModelErrorResponse.self) { (source: AnyObject) -> ModelErrorResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ModelErrorResponse()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            instance.errors = Decoders.decodeOptional(clazz: ErrorErrors.self, source: sourceDictionary["errors"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?)
            instance.parameters = Decoders.decodeOptional(clazz: ErrorParameters.self, source: sourceDictionary["parameters"] as AnyObject?)
            instance.trace = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["trace"] as AnyObject?)
            return instance
        }


        // Decoder for [Product]
        Decoders.addDecoder(clazz: [Product].self) { (source: AnyObject) -> [Product] in
            return Decoders.decode(clazz: [Product].self, source: source)
        }
        // Decoder for Product
        Decoders.addDecoder(clazz: Product.self) { (source: AnyObject) -> Product in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Product()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.sku = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sku"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.attributeSetId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["attribute_set_id"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"] as AnyObject?)
            instance.status = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["status"] as AnyObject?)
            instance.visibility = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["visibility"] as AnyObject?)
            instance.typeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type_id"] as AnyObject?)
            instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"] as AnyObject?)
            instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated_at"] as AnyObject?)
            instance.weight = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["weight"] as AnyObject?)
            instance.extensionAttributes = Decoders.decodeOptional(clazz: ProductExtensionInterface.self, source: sourceDictionary["extension_attributes"] as AnyObject?)
            instance.productLinks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["product_links"] as AnyObject?)
            instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"] as AnyObject?)
            instance.mediaGalleryEntries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["media_gallery_entries"] as AnyObject?)
            instance.tierPrices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tier_prices"] as AnyObject?)
            instance.customAttributes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["custom_attributes"] as AnyObject?)
            return instance
        }


        // Decoder for [ProductExtensionInterface]
        Decoders.addDecoder(clazz: [ProductExtensionInterface].self) { (source: AnyObject) -> [ProductExtensionInterface] in
            return Decoders.decode(clazz: [ProductExtensionInterface].self, source: source)
        }
        // Decoder for ProductExtensionInterface
        Decoders.addDecoder(clazz: ProductExtensionInterface.self) { (source: AnyObject) -> ProductExtensionInterface in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ProductExtensionInterface()
            instance.stockItem = Decoders.decodeOptional(clazz: CatalogInventoryDataStockItemInterface.self, source: sourceDictionary["stock_item"] as AnyObject?)
            instance.bundleProductOptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bundle_product_options"] as AnyObject?)
            instance.downloadableProductLinks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["downloadable_product_links"] as AnyObject?)
            instance.downloadableProductSamples = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["downloadable_product_samples"] as AnyObject?)
            instance.configurableProductOptions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["configurable_product_options"] as AnyObject?)
            instance.configurableProductLinks = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["configurable_product_links"] as AnyObject?)
            return instance
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
