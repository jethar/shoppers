/**
 * Shoppers OpenAPI
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.CatalogDataCategoryTreeInterface;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * 
 **/
@ApiModel(description = "")
public class CatalogDataCategoryTreeInterface {
  
  @SerializedName("id")
  private Integer id = null;
  @SerializedName("parent_id")
  private Integer parentId = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("is_active")
  private Boolean isActive = null;
  @SerializedName("position")
  private Integer position = null;
  @SerializedName("level")
  private Integer level = null;
  @SerializedName("product_count")
  private Integer productCount = null;
  @SerializedName("children_data")
  private List<CatalogDataCategoryTreeInterface> childrenData = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * Parent category ID
   **/
  @ApiModelProperty(required = true, value = "Parent category ID")
  public Integer getParentId() {
    return parentId;
  }
  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }

  /**
   * Category name
   **/
  @ApiModelProperty(required = true, value = "Category name")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Whether category is active
   **/
  @ApiModelProperty(required = true, value = "Whether category is active")
  public Boolean getIsActive() {
    return isActive;
  }
  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  /**
   * Category position
   **/
  @ApiModelProperty(required = true, value = "Category position")
  public Integer getPosition() {
    return position;
  }
  public void setPosition(Integer position) {
    this.position = position;
  }

  /**
   * Category level
   **/
  @ApiModelProperty(required = true, value = "Category level")
  public Integer getLevel() {
    return level;
  }
  public void setLevel(Integer level) {
    this.level = level;
  }

  /**
   * Product count
   **/
  @ApiModelProperty(required = true, value = "Product count")
  public Integer getProductCount() {
    return productCount;
  }
  public void setProductCount(Integer productCount) {
    this.productCount = productCount;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public List<CatalogDataCategoryTreeInterface> getChildrenData() {
    return childrenData;
  }
  public void setChildrenData(List<CatalogDataCategoryTreeInterface> childrenData) {
    this.childrenData = childrenData;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataCategoryTreeInterface catalogDataCategoryTreeInterface = (CatalogDataCategoryTreeInterface) o;
    return (this.id == null ? catalogDataCategoryTreeInterface.id == null : this.id.equals(catalogDataCategoryTreeInterface.id)) &&
        (this.parentId == null ? catalogDataCategoryTreeInterface.parentId == null : this.parentId.equals(catalogDataCategoryTreeInterface.parentId)) &&
        (this.name == null ? catalogDataCategoryTreeInterface.name == null : this.name.equals(catalogDataCategoryTreeInterface.name)) &&
        (this.isActive == null ? catalogDataCategoryTreeInterface.isActive == null : this.isActive.equals(catalogDataCategoryTreeInterface.isActive)) &&
        (this.position == null ? catalogDataCategoryTreeInterface.position == null : this.position.equals(catalogDataCategoryTreeInterface.position)) &&
        (this.level == null ? catalogDataCategoryTreeInterface.level == null : this.level.equals(catalogDataCategoryTreeInterface.level)) &&
        (this.productCount == null ? catalogDataCategoryTreeInterface.productCount == null : this.productCount.equals(catalogDataCategoryTreeInterface.productCount)) &&
        (this.childrenData == null ? catalogDataCategoryTreeInterface.childrenData == null : this.childrenData.equals(catalogDataCategoryTreeInterface.childrenData));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.parentId == null ? 0: this.parentId.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.isActive == null ? 0: this.isActive.hashCode());
    result = 31 * result + (this.position == null ? 0: this.position.hashCode());
    result = 31 * result + (this.level == null ? 0: this.level.hashCode());
    result = 31 * result + (this.productCount == null ? 0: this.productCount.hashCode());
    result = 31 * result + (this.childrenData == null ? 0: this.childrenData.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataCategoryTreeInterface {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  parentId: ").append(parentId).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  isActive: ").append(isActive).append("\n");
    sb.append("  position: ").append(position).append("\n");
    sb.append("  level: ").append(level).append("\n");
    sb.append("  productCount: ").append(productCount).append("\n");
    sb.append("  childrenData: ").append(childrenData).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
