/**
 * Shoppers OpenAPI
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.FrameworkDataImageContentInterface;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * 
 **/
@ApiModel(description = "")
public class CatalogDataProductAttributeMediaGalleryEntryInterface {
  
  @SerializedName("id")
  private Integer id = null;
  @SerializedName("media_type")
  private String mediaType = null;
  @SerializedName("label")
  private String label = null;
  @SerializedName("position")
  private Integer position = null;
  @SerializedName("disabled")
  private Boolean disabled = null;
  @SerializedName("types")
  private List<String> types = null;
  @SerializedName("file")
  private String file = null;
  @SerializedName("content")
  private FrameworkDataImageContentInterface content = null;

  /**
   * Gallery entry ID
   **/
  @ApiModelProperty(value = "Gallery entry ID")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * Media type
   **/
  @ApiModelProperty(required = true, value = "Media type")
  public String getMediaType() {
    return mediaType;
  }
  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }

  /**
   * Gallery entry alternative text
   **/
  @ApiModelProperty(required = true, value = "Gallery entry alternative text")
  public String getLabel() {
    return label;
  }
  public void setLabel(String label) {
    this.label = label;
  }

  /**
   * Gallery entry position (sort order)
   **/
  @ApiModelProperty(required = true, value = "Gallery entry position (sort order)")
  public Integer getPosition() {
    return position;
  }
  public void setPosition(Integer position) {
    this.position = position;
  }

  /**
   * If gallery entry is hidden from product page
   **/
  @ApiModelProperty(required = true, value = "If gallery entry is hidden from product page")
  public Boolean getDisabled() {
    return disabled;
  }
  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  /**
   * Gallery entry image types (thumbnail, image, small_image etc)
   **/
  @ApiModelProperty(required = true, value = "Gallery entry image types (thumbnail, image, small_image etc)")
  public List<String> getTypes() {
    return types;
  }
  public void setTypes(List<String> types) {
    this.types = types;
  }

  /**
   * File path
   **/
  @ApiModelProperty(value = "File path")
  public String getFile() {
    return file;
  }
  public void setFile(String file) {
    this.file = file;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public FrameworkDataImageContentInterface getContent() {
    return content;
  }
  public void setContent(FrameworkDataImageContentInterface content) {
    this.content = content;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataProductAttributeMediaGalleryEntryInterface catalogDataProductAttributeMediaGalleryEntryInterface = (CatalogDataProductAttributeMediaGalleryEntryInterface) o;
    return (this.id == null ? catalogDataProductAttributeMediaGalleryEntryInterface.id == null : this.id.equals(catalogDataProductAttributeMediaGalleryEntryInterface.id)) &&
        (this.mediaType == null ? catalogDataProductAttributeMediaGalleryEntryInterface.mediaType == null : this.mediaType.equals(catalogDataProductAttributeMediaGalleryEntryInterface.mediaType)) &&
        (this.label == null ? catalogDataProductAttributeMediaGalleryEntryInterface.label == null : this.label.equals(catalogDataProductAttributeMediaGalleryEntryInterface.label)) &&
        (this.position == null ? catalogDataProductAttributeMediaGalleryEntryInterface.position == null : this.position.equals(catalogDataProductAttributeMediaGalleryEntryInterface.position)) &&
        (this.disabled == null ? catalogDataProductAttributeMediaGalleryEntryInterface.disabled == null : this.disabled.equals(catalogDataProductAttributeMediaGalleryEntryInterface.disabled)) &&
        (this.types == null ? catalogDataProductAttributeMediaGalleryEntryInterface.types == null : this.types.equals(catalogDataProductAttributeMediaGalleryEntryInterface.types)) &&
        (this.file == null ? catalogDataProductAttributeMediaGalleryEntryInterface.file == null : this.file.equals(catalogDataProductAttributeMediaGalleryEntryInterface.file)) &&
        (this.content == null ? catalogDataProductAttributeMediaGalleryEntryInterface.content == null : this.content.equals(catalogDataProductAttributeMediaGalleryEntryInterface.content));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.mediaType == null ? 0: this.mediaType.hashCode());
    result = 31 * result + (this.label == null ? 0: this.label.hashCode());
    result = 31 * result + (this.position == null ? 0: this.position.hashCode());
    result = 31 * result + (this.disabled == null ? 0: this.disabled.hashCode());
    result = 31 * result + (this.types == null ? 0: this.types.hashCode());
    result = 31 * result + (this.file == null ? 0: this.file.hashCode());
    result = 31 * result + (this.content == null ? 0: this.content.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataProductAttributeMediaGalleryEntryInterface {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  mediaType: ").append(mediaType).append("\n");
    sb.append("  label: ").append(label).append("\n");
    sb.append("  position: ").append(position).append("\n");
    sb.append("  disabled: ").append(disabled).append("\n");
    sb.append("  types: ").append(types).append("\n");
    sb.append("  file: ").append(file).append("\n");
    sb.append("  content: ").append(content).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
