/**
 * Shoppers OpenAPI
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.EavDataAttributeFrontendLabelInterface;
import io.swagger.client.model.EavDataAttributeOptionInterface;
import io.swagger.client.model.EavDataAttributeValidationRuleInterface;
import io.swagger.client.model.FrameworkAttributeInterface;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * 
 **/
@ApiModel(description = "")
public class CatalogDataCategoryAttributeInterface {
  
  @SerializedName("is_wysiwyg_enabled")
  private Boolean isWysiwygEnabled = null;
  @SerializedName("is_html_allowed_on_front")
  private Boolean isHtmlAllowedOnFront = null;
  @SerializedName("used_for_sort_by")
  private Boolean usedForSortBy = null;
  @SerializedName("is_filterable")
  private Boolean isFilterable = null;
  @SerializedName("is_filterable_in_search")
  private Boolean isFilterableInSearch = null;
  @SerializedName("is_used_in_grid")
  private Boolean isUsedInGrid = null;
  @SerializedName("is_visible_in_grid")
  private Boolean isVisibleInGrid = null;
  @SerializedName("is_filterable_in_grid")
  private Boolean isFilterableInGrid = null;
  @SerializedName("position")
  private Integer position = null;
  @SerializedName("apply_to")
  private List<String> applyTo = null;
  @SerializedName("is_searchable")
  private String isSearchable = null;
  @SerializedName("is_visible_in_advanced_search")
  private String isVisibleInAdvancedSearch = null;
  @SerializedName("is_comparable")
  private String isComparable = null;
  @SerializedName("is_used_for_promo_rules")
  private String isUsedForPromoRules = null;
  @SerializedName("is_visible_on_front")
  private String isVisibleOnFront = null;
  @SerializedName("used_in_product_listing")
  private String usedInProductListing = null;
  @SerializedName("is_visible")
  private Boolean isVisible = null;
  @SerializedName("scope")
  private String scope = null;
  @SerializedName("attribute_id")
  private Integer attributeId = null;
  @SerializedName("attribute_code")
  private String attributeCode = null;
  @SerializedName("frontend_input")
  private String frontendInput = null;
  @SerializedName("entity_type_id")
  private String entityTypeId = null;
  @SerializedName("is_required")
  private Boolean isRequired = null;
  @SerializedName("options")
  private List<EavDataAttributeOptionInterface> options = null;
  @SerializedName("is_user_defined")
  private Boolean isUserDefined = null;
  @SerializedName("default_frontend_label")
  private String defaultFrontendLabel = null;
  @SerializedName("frontend_labels")
  private List<EavDataAttributeFrontendLabelInterface> frontendLabels = null;
  @SerializedName("note")
  private String note = null;
  @SerializedName("backend_type")
  private String backendType = null;
  @SerializedName("backend_model")
  private String backendModel = null;
  @SerializedName("source_model")
  private String sourceModel = null;
  @SerializedName("default_value")
  private String defaultValue = null;
  @SerializedName("is_unique")
  private String isUnique = null;
  @SerializedName("frontend_class")
  private String frontendClass = null;
  @SerializedName("validation_rules")
  private List<EavDataAttributeValidationRuleInterface> validationRules = null;
  @SerializedName("custom_attributes")
  private List<FrameworkAttributeInterface> customAttributes = null;

  /**
   * WYSIWYG flag
   **/
  @ApiModelProperty(value = "WYSIWYG flag")
  public Boolean getIsWysiwygEnabled() {
    return isWysiwygEnabled;
  }
  public void setIsWysiwygEnabled(Boolean isWysiwygEnabled) {
    this.isWysiwygEnabled = isWysiwygEnabled;
  }

  /**
   * The HTML tags are allowed on the frontend
   **/
  @ApiModelProperty(value = "The HTML tags are allowed on the frontend")
  public Boolean getIsHtmlAllowedOnFront() {
    return isHtmlAllowedOnFront;
  }
  public void setIsHtmlAllowedOnFront(Boolean isHtmlAllowedOnFront) {
    this.isHtmlAllowedOnFront = isHtmlAllowedOnFront;
  }

  /**
   * It is used for sorting in product listing
   **/
  @ApiModelProperty(value = "It is used for sorting in product listing")
  public Boolean getUsedForSortBy() {
    return usedForSortBy;
  }
  public void setUsedForSortBy(Boolean usedForSortBy) {
    this.usedForSortBy = usedForSortBy;
  }

  /**
   * It used in layered navigation
   **/
  @ApiModelProperty(value = "It used in layered navigation")
  public Boolean getIsFilterable() {
    return isFilterable;
  }
  public void setIsFilterable(Boolean isFilterable) {
    this.isFilterable = isFilterable;
  }

  /**
   * It is used in search results layered navigation
   **/
  @ApiModelProperty(value = "It is used in search results layered navigation")
  public Boolean getIsFilterableInSearch() {
    return isFilterableInSearch;
  }
  public void setIsFilterableInSearch(Boolean isFilterableInSearch) {
    this.isFilterableInSearch = isFilterableInSearch;
  }

  /**
   * It is used in catalog product grid
   **/
  @ApiModelProperty(value = "It is used in catalog product grid")
  public Boolean getIsUsedInGrid() {
    return isUsedInGrid;
  }
  public void setIsUsedInGrid(Boolean isUsedInGrid) {
    this.isUsedInGrid = isUsedInGrid;
  }

  /**
   * It is visible in catalog product grid
   **/
  @ApiModelProperty(value = "It is visible in catalog product grid")
  public Boolean getIsVisibleInGrid() {
    return isVisibleInGrid;
  }
  public void setIsVisibleInGrid(Boolean isVisibleInGrid) {
    this.isVisibleInGrid = isVisibleInGrid;
  }

  /**
   * It is filterable in catalog product grid
   **/
  @ApiModelProperty(value = "It is filterable in catalog product grid")
  public Boolean getIsFilterableInGrid() {
    return isFilterableInGrid;
  }
  public void setIsFilterableInGrid(Boolean isFilterableInGrid) {
    this.isFilterableInGrid = isFilterableInGrid;
  }

  /**
   * Position
   **/
  @ApiModelProperty(value = "Position")
  public Integer getPosition() {
    return position;
  }
  public void setPosition(Integer position) {
    this.position = position;
  }

  /**
   * Apply to value for the element
   **/
  @ApiModelProperty(value = "Apply to value for the element")
  public List<String> getApplyTo() {
    return applyTo;
  }
  public void setApplyTo(List<String> applyTo) {
    this.applyTo = applyTo;
  }

  /**
   * The attribute can be used in Quick Search
   **/
  @ApiModelProperty(value = "The attribute can be used in Quick Search")
  public String getIsSearchable() {
    return isSearchable;
  }
  public void setIsSearchable(String isSearchable) {
    this.isSearchable = isSearchable;
  }

  /**
   * The attribute can be used in Advanced Search
   **/
  @ApiModelProperty(value = "The attribute can be used in Advanced Search")
  public String getIsVisibleInAdvancedSearch() {
    return isVisibleInAdvancedSearch;
  }
  public void setIsVisibleInAdvancedSearch(String isVisibleInAdvancedSearch) {
    this.isVisibleInAdvancedSearch = isVisibleInAdvancedSearch;
  }

  /**
   * The attribute can be compared on the frontend
   **/
  @ApiModelProperty(value = "The attribute can be compared on the frontend")
  public String getIsComparable() {
    return isComparable;
  }
  public void setIsComparable(String isComparable) {
    this.isComparable = isComparable;
  }

  /**
   * The attribute can be used for promo rules
   **/
  @ApiModelProperty(value = "The attribute can be used for promo rules")
  public String getIsUsedForPromoRules() {
    return isUsedForPromoRules;
  }
  public void setIsUsedForPromoRules(String isUsedForPromoRules) {
    this.isUsedForPromoRules = isUsedForPromoRules;
  }

  /**
   * The attribute is visible on the frontend
   **/
  @ApiModelProperty(value = "The attribute is visible on the frontend")
  public String getIsVisibleOnFront() {
    return isVisibleOnFront;
  }
  public void setIsVisibleOnFront(String isVisibleOnFront) {
    this.isVisibleOnFront = isVisibleOnFront;
  }

  /**
   * The attribute can be used in product listing
   **/
  @ApiModelProperty(value = "The attribute can be used in product listing")
  public String getUsedInProductListing() {
    return usedInProductListing;
  }
  public void setUsedInProductListing(String usedInProductListing) {
    this.usedInProductListing = usedInProductListing;
  }

  /**
   * Attribute is visible on frontend.
   **/
  @ApiModelProperty(value = "Attribute is visible on frontend.")
  public Boolean getIsVisible() {
    return isVisible;
  }
  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }

  /**
   * Attribute scope
   **/
  @ApiModelProperty(value = "Attribute scope")
  public String getScope() {
    return scope;
  }
  public void setScope(String scope) {
    this.scope = scope;
  }

  /**
   * Id of the attribute.
   **/
  @ApiModelProperty(value = "Id of the attribute.")
  public Integer getAttributeId() {
    return attributeId;
  }
  public void setAttributeId(Integer attributeId) {
    this.attributeId = attributeId;
  }

  /**
   * Code of the attribute.
   **/
  @ApiModelProperty(required = true, value = "Code of the attribute.")
  public String getAttributeCode() {
    return attributeCode;
  }
  public void setAttributeCode(String attributeCode) {
    this.attributeCode = attributeCode;
  }

  /**
   * HTML for input element.
   **/
  @ApiModelProperty(required = true, value = "HTML for input element.")
  public String getFrontendInput() {
    return frontendInput;
  }
  public void setFrontendInput(String frontendInput) {
    this.frontendInput = frontendInput;
  }

  /**
   * Entity type id
   **/
  @ApiModelProperty(value = "Entity type id")
  public String getEntityTypeId() {
    return entityTypeId;
  }
  public void setEntityTypeId(String entityTypeId) {
    this.entityTypeId = entityTypeId;
  }

  /**
   * Attribute is required.
   **/
  @ApiModelProperty(required = true, value = "Attribute is required.")
  public Boolean getIsRequired() {
    return isRequired;
  }
  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }

  /**
   * Options of the attribute (key => value pairs for select)
   **/
  @ApiModelProperty(value = "Options of the attribute (key => value pairs for select)")
  public List<EavDataAttributeOptionInterface> getOptions() {
    return options;
  }
  public void setOptions(List<EavDataAttributeOptionInterface> options) {
    this.options = options;
  }

  /**
   * Current attribute has been defined by a user.
   **/
  @ApiModelProperty(value = "Current attribute has been defined by a user.")
  public Boolean getIsUserDefined() {
    return isUserDefined;
  }
  public void setIsUserDefined(Boolean isUserDefined) {
    this.isUserDefined = isUserDefined;
  }

  /**
   * Frontend label for default store
   **/
  @ApiModelProperty(value = "Frontend label for default store")
  public String getDefaultFrontendLabel() {
    return defaultFrontendLabel;
  }
  public void setDefaultFrontendLabel(String defaultFrontendLabel) {
    this.defaultFrontendLabel = defaultFrontendLabel;
  }

  /**
   * Frontend label for each store
   **/
  @ApiModelProperty(required = true, value = "Frontend label for each store")
  public List<EavDataAttributeFrontendLabelInterface> getFrontendLabels() {
    return frontendLabels;
  }
  public void setFrontendLabels(List<EavDataAttributeFrontendLabelInterface> frontendLabels) {
    this.frontendLabels = frontendLabels;
  }

  /**
   * The note attribute for the element.
   **/
  @ApiModelProperty(value = "The note attribute for the element.")
  public String getNote() {
    return note;
  }
  public void setNote(String note) {
    this.note = note;
  }

  /**
   * Backend type.
   **/
  @ApiModelProperty(value = "Backend type.")
  public String getBackendType() {
    return backendType;
  }
  public void setBackendType(String backendType) {
    this.backendType = backendType;
  }

  /**
   * Backend model
   **/
  @ApiModelProperty(value = "Backend model")
  public String getBackendModel() {
    return backendModel;
  }
  public void setBackendModel(String backendModel) {
    this.backendModel = backendModel;
  }

  /**
   * Source model
   **/
  @ApiModelProperty(value = "Source model")
  public String getSourceModel() {
    return sourceModel;
  }
  public void setSourceModel(String sourceModel) {
    this.sourceModel = sourceModel;
  }

  /**
   * Default value for the element.
   **/
  @ApiModelProperty(value = "Default value for the element.")
  public String getDefaultValue() {
    return defaultValue;
  }
  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  /**
   * This is a unique attribute
   **/
  @ApiModelProperty(value = "This is a unique attribute")
  public String getIsUnique() {
    return isUnique;
  }
  public void setIsUnique(String isUnique) {
    this.isUnique = isUnique;
  }

  /**
   * Frontend class of attribute
   **/
  @ApiModelProperty(value = "Frontend class of attribute")
  public String getFrontendClass() {
    return frontendClass;
  }
  public void setFrontendClass(String frontendClass) {
    this.frontendClass = frontendClass;
  }

  /**
   * Validation rules.
   **/
  @ApiModelProperty(value = "Validation rules.")
  public List<EavDataAttributeValidationRuleInterface> getValidationRules() {
    return validationRules;
  }
  public void setValidationRules(List<EavDataAttributeValidationRuleInterface> validationRules) {
    this.validationRules = validationRules;
  }

  /**
   * Custom attributes values.
   **/
  @ApiModelProperty(value = "Custom attributes values.")
  public List<FrameworkAttributeInterface> getCustomAttributes() {
    return customAttributes;
  }
  public void setCustomAttributes(List<FrameworkAttributeInterface> customAttributes) {
    this.customAttributes = customAttributes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogDataCategoryAttributeInterface catalogDataCategoryAttributeInterface = (CatalogDataCategoryAttributeInterface) o;
    return (this.isWysiwygEnabled == null ? catalogDataCategoryAttributeInterface.isWysiwygEnabled == null : this.isWysiwygEnabled.equals(catalogDataCategoryAttributeInterface.isWysiwygEnabled)) &&
        (this.isHtmlAllowedOnFront == null ? catalogDataCategoryAttributeInterface.isHtmlAllowedOnFront == null : this.isHtmlAllowedOnFront.equals(catalogDataCategoryAttributeInterface.isHtmlAllowedOnFront)) &&
        (this.usedForSortBy == null ? catalogDataCategoryAttributeInterface.usedForSortBy == null : this.usedForSortBy.equals(catalogDataCategoryAttributeInterface.usedForSortBy)) &&
        (this.isFilterable == null ? catalogDataCategoryAttributeInterface.isFilterable == null : this.isFilterable.equals(catalogDataCategoryAttributeInterface.isFilterable)) &&
        (this.isFilterableInSearch == null ? catalogDataCategoryAttributeInterface.isFilterableInSearch == null : this.isFilterableInSearch.equals(catalogDataCategoryAttributeInterface.isFilterableInSearch)) &&
        (this.isUsedInGrid == null ? catalogDataCategoryAttributeInterface.isUsedInGrid == null : this.isUsedInGrid.equals(catalogDataCategoryAttributeInterface.isUsedInGrid)) &&
        (this.isVisibleInGrid == null ? catalogDataCategoryAttributeInterface.isVisibleInGrid == null : this.isVisibleInGrid.equals(catalogDataCategoryAttributeInterface.isVisibleInGrid)) &&
        (this.isFilterableInGrid == null ? catalogDataCategoryAttributeInterface.isFilterableInGrid == null : this.isFilterableInGrid.equals(catalogDataCategoryAttributeInterface.isFilterableInGrid)) &&
        (this.position == null ? catalogDataCategoryAttributeInterface.position == null : this.position.equals(catalogDataCategoryAttributeInterface.position)) &&
        (this.applyTo == null ? catalogDataCategoryAttributeInterface.applyTo == null : this.applyTo.equals(catalogDataCategoryAttributeInterface.applyTo)) &&
        (this.isSearchable == null ? catalogDataCategoryAttributeInterface.isSearchable == null : this.isSearchable.equals(catalogDataCategoryAttributeInterface.isSearchable)) &&
        (this.isVisibleInAdvancedSearch == null ? catalogDataCategoryAttributeInterface.isVisibleInAdvancedSearch == null : this.isVisibleInAdvancedSearch.equals(catalogDataCategoryAttributeInterface.isVisibleInAdvancedSearch)) &&
        (this.isComparable == null ? catalogDataCategoryAttributeInterface.isComparable == null : this.isComparable.equals(catalogDataCategoryAttributeInterface.isComparable)) &&
        (this.isUsedForPromoRules == null ? catalogDataCategoryAttributeInterface.isUsedForPromoRules == null : this.isUsedForPromoRules.equals(catalogDataCategoryAttributeInterface.isUsedForPromoRules)) &&
        (this.isVisibleOnFront == null ? catalogDataCategoryAttributeInterface.isVisibleOnFront == null : this.isVisibleOnFront.equals(catalogDataCategoryAttributeInterface.isVisibleOnFront)) &&
        (this.usedInProductListing == null ? catalogDataCategoryAttributeInterface.usedInProductListing == null : this.usedInProductListing.equals(catalogDataCategoryAttributeInterface.usedInProductListing)) &&
        (this.isVisible == null ? catalogDataCategoryAttributeInterface.isVisible == null : this.isVisible.equals(catalogDataCategoryAttributeInterface.isVisible)) &&
        (this.scope == null ? catalogDataCategoryAttributeInterface.scope == null : this.scope.equals(catalogDataCategoryAttributeInterface.scope)) &&
        (this.attributeId == null ? catalogDataCategoryAttributeInterface.attributeId == null : this.attributeId.equals(catalogDataCategoryAttributeInterface.attributeId)) &&
        (this.attributeCode == null ? catalogDataCategoryAttributeInterface.attributeCode == null : this.attributeCode.equals(catalogDataCategoryAttributeInterface.attributeCode)) &&
        (this.frontendInput == null ? catalogDataCategoryAttributeInterface.frontendInput == null : this.frontendInput.equals(catalogDataCategoryAttributeInterface.frontendInput)) &&
        (this.entityTypeId == null ? catalogDataCategoryAttributeInterface.entityTypeId == null : this.entityTypeId.equals(catalogDataCategoryAttributeInterface.entityTypeId)) &&
        (this.isRequired == null ? catalogDataCategoryAttributeInterface.isRequired == null : this.isRequired.equals(catalogDataCategoryAttributeInterface.isRequired)) &&
        (this.options == null ? catalogDataCategoryAttributeInterface.options == null : this.options.equals(catalogDataCategoryAttributeInterface.options)) &&
        (this.isUserDefined == null ? catalogDataCategoryAttributeInterface.isUserDefined == null : this.isUserDefined.equals(catalogDataCategoryAttributeInterface.isUserDefined)) &&
        (this.defaultFrontendLabel == null ? catalogDataCategoryAttributeInterface.defaultFrontendLabel == null : this.defaultFrontendLabel.equals(catalogDataCategoryAttributeInterface.defaultFrontendLabel)) &&
        (this.frontendLabels == null ? catalogDataCategoryAttributeInterface.frontendLabels == null : this.frontendLabels.equals(catalogDataCategoryAttributeInterface.frontendLabels)) &&
        (this.note == null ? catalogDataCategoryAttributeInterface.note == null : this.note.equals(catalogDataCategoryAttributeInterface.note)) &&
        (this.backendType == null ? catalogDataCategoryAttributeInterface.backendType == null : this.backendType.equals(catalogDataCategoryAttributeInterface.backendType)) &&
        (this.backendModel == null ? catalogDataCategoryAttributeInterface.backendModel == null : this.backendModel.equals(catalogDataCategoryAttributeInterface.backendModel)) &&
        (this.sourceModel == null ? catalogDataCategoryAttributeInterface.sourceModel == null : this.sourceModel.equals(catalogDataCategoryAttributeInterface.sourceModel)) &&
        (this.defaultValue == null ? catalogDataCategoryAttributeInterface.defaultValue == null : this.defaultValue.equals(catalogDataCategoryAttributeInterface.defaultValue)) &&
        (this.isUnique == null ? catalogDataCategoryAttributeInterface.isUnique == null : this.isUnique.equals(catalogDataCategoryAttributeInterface.isUnique)) &&
        (this.frontendClass == null ? catalogDataCategoryAttributeInterface.frontendClass == null : this.frontendClass.equals(catalogDataCategoryAttributeInterface.frontendClass)) &&
        (this.validationRules == null ? catalogDataCategoryAttributeInterface.validationRules == null : this.validationRules.equals(catalogDataCategoryAttributeInterface.validationRules)) &&
        (this.customAttributes == null ? catalogDataCategoryAttributeInterface.customAttributes == null : this.customAttributes.equals(catalogDataCategoryAttributeInterface.customAttributes));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.isWysiwygEnabled == null ? 0: this.isWysiwygEnabled.hashCode());
    result = 31 * result + (this.isHtmlAllowedOnFront == null ? 0: this.isHtmlAllowedOnFront.hashCode());
    result = 31 * result + (this.usedForSortBy == null ? 0: this.usedForSortBy.hashCode());
    result = 31 * result + (this.isFilterable == null ? 0: this.isFilterable.hashCode());
    result = 31 * result + (this.isFilterableInSearch == null ? 0: this.isFilterableInSearch.hashCode());
    result = 31 * result + (this.isUsedInGrid == null ? 0: this.isUsedInGrid.hashCode());
    result = 31 * result + (this.isVisibleInGrid == null ? 0: this.isVisibleInGrid.hashCode());
    result = 31 * result + (this.isFilterableInGrid == null ? 0: this.isFilterableInGrid.hashCode());
    result = 31 * result + (this.position == null ? 0: this.position.hashCode());
    result = 31 * result + (this.applyTo == null ? 0: this.applyTo.hashCode());
    result = 31 * result + (this.isSearchable == null ? 0: this.isSearchable.hashCode());
    result = 31 * result + (this.isVisibleInAdvancedSearch == null ? 0: this.isVisibleInAdvancedSearch.hashCode());
    result = 31 * result + (this.isComparable == null ? 0: this.isComparable.hashCode());
    result = 31 * result + (this.isUsedForPromoRules == null ? 0: this.isUsedForPromoRules.hashCode());
    result = 31 * result + (this.isVisibleOnFront == null ? 0: this.isVisibleOnFront.hashCode());
    result = 31 * result + (this.usedInProductListing == null ? 0: this.usedInProductListing.hashCode());
    result = 31 * result + (this.isVisible == null ? 0: this.isVisible.hashCode());
    result = 31 * result + (this.scope == null ? 0: this.scope.hashCode());
    result = 31 * result + (this.attributeId == null ? 0: this.attributeId.hashCode());
    result = 31 * result + (this.attributeCode == null ? 0: this.attributeCode.hashCode());
    result = 31 * result + (this.frontendInput == null ? 0: this.frontendInput.hashCode());
    result = 31 * result + (this.entityTypeId == null ? 0: this.entityTypeId.hashCode());
    result = 31 * result + (this.isRequired == null ? 0: this.isRequired.hashCode());
    result = 31 * result + (this.options == null ? 0: this.options.hashCode());
    result = 31 * result + (this.isUserDefined == null ? 0: this.isUserDefined.hashCode());
    result = 31 * result + (this.defaultFrontendLabel == null ? 0: this.defaultFrontendLabel.hashCode());
    result = 31 * result + (this.frontendLabels == null ? 0: this.frontendLabels.hashCode());
    result = 31 * result + (this.note == null ? 0: this.note.hashCode());
    result = 31 * result + (this.backendType == null ? 0: this.backendType.hashCode());
    result = 31 * result + (this.backendModel == null ? 0: this.backendModel.hashCode());
    result = 31 * result + (this.sourceModel == null ? 0: this.sourceModel.hashCode());
    result = 31 * result + (this.defaultValue == null ? 0: this.defaultValue.hashCode());
    result = 31 * result + (this.isUnique == null ? 0: this.isUnique.hashCode());
    result = 31 * result + (this.frontendClass == null ? 0: this.frontendClass.hashCode());
    result = 31 * result + (this.validationRules == null ? 0: this.validationRules.hashCode());
    result = 31 * result + (this.customAttributes == null ? 0: this.customAttributes.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogDataCategoryAttributeInterface {\n");
    
    sb.append("  isWysiwygEnabled: ").append(isWysiwygEnabled).append("\n");
    sb.append("  isHtmlAllowedOnFront: ").append(isHtmlAllowedOnFront).append("\n");
    sb.append("  usedForSortBy: ").append(usedForSortBy).append("\n");
    sb.append("  isFilterable: ").append(isFilterable).append("\n");
    sb.append("  isFilterableInSearch: ").append(isFilterableInSearch).append("\n");
    sb.append("  isUsedInGrid: ").append(isUsedInGrid).append("\n");
    sb.append("  isVisibleInGrid: ").append(isVisibleInGrid).append("\n");
    sb.append("  isFilterableInGrid: ").append(isFilterableInGrid).append("\n");
    sb.append("  position: ").append(position).append("\n");
    sb.append("  applyTo: ").append(applyTo).append("\n");
    sb.append("  isSearchable: ").append(isSearchable).append("\n");
    sb.append("  isVisibleInAdvancedSearch: ").append(isVisibleInAdvancedSearch).append("\n");
    sb.append("  isComparable: ").append(isComparable).append("\n");
    sb.append("  isUsedForPromoRules: ").append(isUsedForPromoRules).append("\n");
    sb.append("  isVisibleOnFront: ").append(isVisibleOnFront).append("\n");
    sb.append("  usedInProductListing: ").append(usedInProductListing).append("\n");
    sb.append("  isVisible: ").append(isVisible).append("\n");
    sb.append("  scope: ").append(scope).append("\n");
    sb.append("  attributeId: ").append(attributeId).append("\n");
    sb.append("  attributeCode: ").append(attributeCode).append("\n");
    sb.append("  frontendInput: ").append(frontendInput).append("\n");
    sb.append("  entityTypeId: ").append(entityTypeId).append("\n");
    sb.append("  isRequired: ").append(isRequired).append("\n");
    sb.append("  options: ").append(options).append("\n");
    sb.append("  isUserDefined: ").append(isUserDefined).append("\n");
    sb.append("  defaultFrontendLabel: ").append(defaultFrontendLabel).append("\n");
    sb.append("  frontendLabels: ").append(frontendLabels).append("\n");
    sb.append("  note: ").append(note).append("\n");
    sb.append("  backendType: ").append(backendType).append("\n");
    sb.append("  backendModel: ").append(backendModel).append("\n");
    sb.append("  sourceModel: ").append(sourceModel).append("\n");
    sb.append("  defaultValue: ").append(defaultValue).append("\n");
    sb.append("  isUnique: ").append(isUnique).append("\n");
    sb.append("  frontendClass: ").append(frontendClass).append("\n");
    sb.append("  validationRules: ").append(validationRules).append("\n");
    sb.append("  customAttributes: ").append(customAttributes).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
