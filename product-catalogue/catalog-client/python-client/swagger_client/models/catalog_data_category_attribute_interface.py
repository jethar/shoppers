# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataCategoryAttributeInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, is_wysiwyg_enabled=None, is_html_allowed_on_front=None, used_for_sort_by=None, is_filterable=None, is_filterable_in_search=None, is_used_in_grid=None, is_visible_in_grid=None, is_filterable_in_grid=None, position=None, apply_to=None, is_searchable=None, is_visible_in_advanced_search=None, is_comparable=None, is_used_for_promo_rules=None, is_visible_on_front=None, used_in_product_listing=None, is_visible=None, scope=None, attribute_id=None, attribute_code=None, frontend_input=None, entity_type_id=None, is_required=None, options=None, is_user_defined=None, default_frontend_label=None, frontend_labels=None, note=None, backend_type=None, backend_model=None, source_model=None, default_value=None, is_unique=None, frontend_class=None, validation_rules=None, custom_attributes=None):
        """
        CatalogDataCategoryAttributeInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_wysiwyg_enabled': 'bool',
            'is_html_allowed_on_front': 'bool',
            'used_for_sort_by': 'bool',
            'is_filterable': 'bool',
            'is_filterable_in_search': 'bool',
            'is_used_in_grid': 'bool',
            'is_visible_in_grid': 'bool',
            'is_filterable_in_grid': 'bool',
            'position': 'int',
            'apply_to': 'list[str]',
            'is_searchable': 'str',
            'is_visible_in_advanced_search': 'str',
            'is_comparable': 'str',
            'is_used_for_promo_rules': 'str',
            'is_visible_on_front': 'str',
            'used_in_product_listing': 'str',
            'is_visible': 'bool',
            'scope': 'str',
            'attribute_id': 'int',
            'attribute_code': 'str',
            'frontend_input': 'str',
            'entity_type_id': 'str',
            'is_required': 'bool',
            'options': 'list[EavDataAttributeOptionInterface]',
            'is_user_defined': 'bool',
            'default_frontend_label': 'str',
            'frontend_labels': 'list[EavDataAttributeFrontendLabelInterface]',
            'note': 'str',
            'backend_type': 'str',
            'backend_model': 'str',
            'source_model': 'str',
            'default_value': 'str',
            'is_unique': 'str',
            'frontend_class': 'str',
            'validation_rules': 'list[EavDataAttributeValidationRuleInterface]',
            'custom_attributes': 'list[FrameworkAttributeInterface]'
        }

        self.attribute_map = {
            'is_wysiwyg_enabled': 'is_wysiwyg_enabled',
            'is_html_allowed_on_front': 'is_html_allowed_on_front',
            'used_for_sort_by': 'used_for_sort_by',
            'is_filterable': 'is_filterable',
            'is_filterable_in_search': 'is_filterable_in_search',
            'is_used_in_grid': 'is_used_in_grid',
            'is_visible_in_grid': 'is_visible_in_grid',
            'is_filterable_in_grid': 'is_filterable_in_grid',
            'position': 'position',
            'apply_to': 'apply_to',
            'is_searchable': 'is_searchable',
            'is_visible_in_advanced_search': 'is_visible_in_advanced_search',
            'is_comparable': 'is_comparable',
            'is_used_for_promo_rules': 'is_used_for_promo_rules',
            'is_visible_on_front': 'is_visible_on_front',
            'used_in_product_listing': 'used_in_product_listing',
            'is_visible': 'is_visible',
            'scope': 'scope',
            'attribute_id': 'attribute_id',
            'attribute_code': 'attribute_code',
            'frontend_input': 'frontend_input',
            'entity_type_id': 'entity_type_id',
            'is_required': 'is_required',
            'options': 'options',
            'is_user_defined': 'is_user_defined',
            'default_frontend_label': 'default_frontend_label',
            'frontend_labels': 'frontend_labels',
            'note': 'note',
            'backend_type': 'backend_type',
            'backend_model': 'backend_model',
            'source_model': 'source_model',
            'default_value': 'default_value',
            'is_unique': 'is_unique',
            'frontend_class': 'frontend_class',
            'validation_rules': 'validation_rules',
            'custom_attributes': 'custom_attributes'
        }

        self._is_wysiwyg_enabled = is_wysiwyg_enabled
        self._is_html_allowed_on_front = is_html_allowed_on_front
        self._used_for_sort_by = used_for_sort_by
        self._is_filterable = is_filterable
        self._is_filterable_in_search = is_filterable_in_search
        self._is_used_in_grid = is_used_in_grid
        self._is_visible_in_grid = is_visible_in_grid
        self._is_filterable_in_grid = is_filterable_in_grid
        self._position = position
        self._apply_to = apply_to
        self._is_searchable = is_searchable
        self._is_visible_in_advanced_search = is_visible_in_advanced_search
        self._is_comparable = is_comparable
        self._is_used_for_promo_rules = is_used_for_promo_rules
        self._is_visible_on_front = is_visible_on_front
        self._used_in_product_listing = used_in_product_listing
        self._is_visible = is_visible
        self._scope = scope
        self._attribute_id = attribute_id
        self._attribute_code = attribute_code
        self._frontend_input = frontend_input
        self._entity_type_id = entity_type_id
        self._is_required = is_required
        self._options = options
        self._is_user_defined = is_user_defined
        self._default_frontend_label = default_frontend_label
        self._frontend_labels = frontend_labels
        self._note = note
        self._backend_type = backend_type
        self._backend_model = backend_model
        self._source_model = source_model
        self._default_value = default_value
        self._is_unique = is_unique
        self._frontend_class = frontend_class
        self._validation_rules = validation_rules
        self._custom_attributes = custom_attributes

    @property
    def is_wysiwyg_enabled(self):
        """
        Gets the is_wysiwyg_enabled of this CatalogDataCategoryAttributeInterface.
        WYSIWYG flag

        :return: The is_wysiwyg_enabled of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_wysiwyg_enabled

    @is_wysiwyg_enabled.setter
    def is_wysiwyg_enabled(self, is_wysiwyg_enabled):
        """
        Sets the is_wysiwyg_enabled of this CatalogDataCategoryAttributeInterface.
        WYSIWYG flag

        :param is_wysiwyg_enabled: The is_wysiwyg_enabled of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._is_wysiwyg_enabled = is_wysiwyg_enabled

    @property
    def is_html_allowed_on_front(self):
        """
        Gets the is_html_allowed_on_front of this CatalogDataCategoryAttributeInterface.
        The HTML tags are allowed on the frontend

        :return: The is_html_allowed_on_front of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_html_allowed_on_front

    @is_html_allowed_on_front.setter
    def is_html_allowed_on_front(self, is_html_allowed_on_front):
        """
        Sets the is_html_allowed_on_front of this CatalogDataCategoryAttributeInterface.
        The HTML tags are allowed on the frontend

        :param is_html_allowed_on_front: The is_html_allowed_on_front of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._is_html_allowed_on_front = is_html_allowed_on_front

    @property
    def used_for_sort_by(self):
        """
        Gets the used_for_sort_by of this CatalogDataCategoryAttributeInterface.
        It is used for sorting in product listing

        :return: The used_for_sort_by of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._used_for_sort_by

    @used_for_sort_by.setter
    def used_for_sort_by(self, used_for_sort_by):
        """
        Sets the used_for_sort_by of this CatalogDataCategoryAttributeInterface.
        It is used for sorting in product listing

        :param used_for_sort_by: The used_for_sort_by of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._used_for_sort_by = used_for_sort_by

    @property
    def is_filterable(self):
        """
        Gets the is_filterable of this CatalogDataCategoryAttributeInterface.
        It used in layered navigation

        :return: The is_filterable of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_filterable

    @is_filterable.setter
    def is_filterable(self, is_filterable):
        """
        Sets the is_filterable of this CatalogDataCategoryAttributeInterface.
        It used in layered navigation

        :param is_filterable: The is_filterable of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._is_filterable = is_filterable

    @property
    def is_filterable_in_search(self):
        """
        Gets the is_filterable_in_search of this CatalogDataCategoryAttributeInterface.
        It is used in search results layered navigation

        :return: The is_filterable_in_search of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_filterable_in_search

    @is_filterable_in_search.setter
    def is_filterable_in_search(self, is_filterable_in_search):
        """
        Sets the is_filterable_in_search of this CatalogDataCategoryAttributeInterface.
        It is used in search results layered navigation

        :param is_filterable_in_search: The is_filterable_in_search of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._is_filterable_in_search = is_filterable_in_search

    @property
    def is_used_in_grid(self):
        """
        Gets the is_used_in_grid of this CatalogDataCategoryAttributeInterface.
        It is used in catalog product grid

        :return: The is_used_in_grid of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_used_in_grid

    @is_used_in_grid.setter
    def is_used_in_grid(self, is_used_in_grid):
        """
        Sets the is_used_in_grid of this CatalogDataCategoryAttributeInterface.
        It is used in catalog product grid

        :param is_used_in_grid: The is_used_in_grid of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._is_used_in_grid = is_used_in_grid

    @property
    def is_visible_in_grid(self):
        """
        Gets the is_visible_in_grid of this CatalogDataCategoryAttributeInterface.
        It is visible in catalog product grid

        :return: The is_visible_in_grid of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_visible_in_grid

    @is_visible_in_grid.setter
    def is_visible_in_grid(self, is_visible_in_grid):
        """
        Sets the is_visible_in_grid of this CatalogDataCategoryAttributeInterface.
        It is visible in catalog product grid

        :param is_visible_in_grid: The is_visible_in_grid of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._is_visible_in_grid = is_visible_in_grid

    @property
    def is_filterable_in_grid(self):
        """
        Gets the is_filterable_in_grid of this CatalogDataCategoryAttributeInterface.
        It is filterable in catalog product grid

        :return: The is_filterable_in_grid of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_filterable_in_grid

    @is_filterable_in_grid.setter
    def is_filterable_in_grid(self, is_filterable_in_grid):
        """
        Sets the is_filterable_in_grid of this CatalogDataCategoryAttributeInterface.
        It is filterable in catalog product grid

        :param is_filterable_in_grid: The is_filterable_in_grid of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._is_filterable_in_grid = is_filterable_in_grid

    @property
    def position(self):
        """
        Gets the position of this CatalogDataCategoryAttributeInterface.
        Position

        :return: The position of this CatalogDataCategoryAttributeInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this CatalogDataCategoryAttributeInterface.
        Position

        :param position: The position of this CatalogDataCategoryAttributeInterface.
        :type: int
        """

        self._position = position

    @property
    def apply_to(self):
        """
        Gets the apply_to of this CatalogDataCategoryAttributeInterface.
        Apply to value for the element

        :return: The apply_to of this CatalogDataCategoryAttributeInterface.
        :rtype: list[str]
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """
        Sets the apply_to of this CatalogDataCategoryAttributeInterface.
        Apply to value for the element

        :param apply_to: The apply_to of this CatalogDataCategoryAttributeInterface.
        :type: list[str]
        """

        self._apply_to = apply_to

    @property
    def is_searchable(self):
        """
        Gets the is_searchable of this CatalogDataCategoryAttributeInterface.
        The attribute can be used in Quick Search

        :return: The is_searchable of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._is_searchable

    @is_searchable.setter
    def is_searchable(self, is_searchable):
        """
        Sets the is_searchable of this CatalogDataCategoryAttributeInterface.
        The attribute can be used in Quick Search

        :param is_searchable: The is_searchable of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._is_searchable = is_searchable

    @property
    def is_visible_in_advanced_search(self):
        """
        Gets the is_visible_in_advanced_search of this CatalogDataCategoryAttributeInterface.
        The attribute can be used in Advanced Search

        :return: The is_visible_in_advanced_search of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._is_visible_in_advanced_search

    @is_visible_in_advanced_search.setter
    def is_visible_in_advanced_search(self, is_visible_in_advanced_search):
        """
        Sets the is_visible_in_advanced_search of this CatalogDataCategoryAttributeInterface.
        The attribute can be used in Advanced Search

        :param is_visible_in_advanced_search: The is_visible_in_advanced_search of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._is_visible_in_advanced_search = is_visible_in_advanced_search

    @property
    def is_comparable(self):
        """
        Gets the is_comparable of this CatalogDataCategoryAttributeInterface.
        The attribute can be compared on the frontend

        :return: The is_comparable of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._is_comparable

    @is_comparable.setter
    def is_comparable(self, is_comparable):
        """
        Sets the is_comparable of this CatalogDataCategoryAttributeInterface.
        The attribute can be compared on the frontend

        :param is_comparable: The is_comparable of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._is_comparable = is_comparable

    @property
    def is_used_for_promo_rules(self):
        """
        Gets the is_used_for_promo_rules of this CatalogDataCategoryAttributeInterface.
        The attribute can be used for promo rules

        :return: The is_used_for_promo_rules of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._is_used_for_promo_rules

    @is_used_for_promo_rules.setter
    def is_used_for_promo_rules(self, is_used_for_promo_rules):
        """
        Sets the is_used_for_promo_rules of this CatalogDataCategoryAttributeInterface.
        The attribute can be used for promo rules

        :param is_used_for_promo_rules: The is_used_for_promo_rules of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._is_used_for_promo_rules = is_used_for_promo_rules

    @property
    def is_visible_on_front(self):
        """
        Gets the is_visible_on_front of this CatalogDataCategoryAttributeInterface.
        The attribute is visible on the frontend

        :return: The is_visible_on_front of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._is_visible_on_front

    @is_visible_on_front.setter
    def is_visible_on_front(self, is_visible_on_front):
        """
        Sets the is_visible_on_front of this CatalogDataCategoryAttributeInterface.
        The attribute is visible on the frontend

        :param is_visible_on_front: The is_visible_on_front of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._is_visible_on_front = is_visible_on_front

    @property
    def used_in_product_listing(self):
        """
        Gets the used_in_product_listing of this CatalogDataCategoryAttributeInterface.
        The attribute can be used in product listing

        :return: The used_in_product_listing of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._used_in_product_listing

    @used_in_product_listing.setter
    def used_in_product_listing(self, used_in_product_listing):
        """
        Sets the used_in_product_listing of this CatalogDataCategoryAttributeInterface.
        The attribute can be used in product listing

        :param used_in_product_listing: The used_in_product_listing of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._used_in_product_listing = used_in_product_listing

    @property
    def is_visible(self):
        """
        Gets the is_visible of this CatalogDataCategoryAttributeInterface.
        Attribute is visible on frontend.

        :return: The is_visible of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """
        Sets the is_visible of this CatalogDataCategoryAttributeInterface.
        Attribute is visible on frontend.

        :param is_visible: The is_visible of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._is_visible = is_visible

    @property
    def scope(self):
        """
        Gets the scope of this CatalogDataCategoryAttributeInterface.
        Attribute scope

        :return: The scope of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this CatalogDataCategoryAttributeInterface.
        Attribute scope

        :param scope: The scope of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._scope = scope

    @property
    def attribute_id(self):
        """
        Gets the attribute_id of this CatalogDataCategoryAttributeInterface.
        Id of the attribute.

        :return: The attribute_id of this CatalogDataCategoryAttributeInterface.
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """
        Sets the attribute_id of this CatalogDataCategoryAttributeInterface.
        Id of the attribute.

        :param attribute_id: The attribute_id of this CatalogDataCategoryAttributeInterface.
        :type: int
        """

        self._attribute_id = attribute_id

    @property
    def attribute_code(self):
        """
        Gets the attribute_code of this CatalogDataCategoryAttributeInterface.
        Code of the attribute.

        :return: The attribute_code of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._attribute_code

    @attribute_code.setter
    def attribute_code(self, attribute_code):
        """
        Sets the attribute_code of this CatalogDataCategoryAttributeInterface.
        Code of the attribute.

        :param attribute_code: The attribute_code of this CatalogDataCategoryAttributeInterface.
        :type: str
        """
        if attribute_code is None:
            raise ValueError("Invalid value for `attribute_code`, must not be `None`")

        self._attribute_code = attribute_code

    @property
    def frontend_input(self):
        """
        Gets the frontend_input of this CatalogDataCategoryAttributeInterface.
        HTML for input element.

        :return: The frontend_input of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._frontend_input

    @frontend_input.setter
    def frontend_input(self, frontend_input):
        """
        Sets the frontend_input of this CatalogDataCategoryAttributeInterface.
        HTML for input element.

        :param frontend_input: The frontend_input of this CatalogDataCategoryAttributeInterface.
        :type: str
        """
        if frontend_input is None:
            raise ValueError("Invalid value for `frontend_input`, must not be `None`")

        self._frontend_input = frontend_input

    @property
    def entity_type_id(self):
        """
        Gets the entity_type_id of this CatalogDataCategoryAttributeInterface.
        Entity type id

        :return: The entity_type_id of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._entity_type_id

    @entity_type_id.setter
    def entity_type_id(self, entity_type_id):
        """
        Sets the entity_type_id of this CatalogDataCategoryAttributeInterface.
        Entity type id

        :param entity_type_id: The entity_type_id of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._entity_type_id = entity_type_id

    @property
    def is_required(self):
        """
        Gets the is_required of this CatalogDataCategoryAttributeInterface.
        Attribute is required.

        :return: The is_required of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """
        Sets the is_required of this CatalogDataCategoryAttributeInterface.
        Attribute is required.

        :param is_required: The is_required of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """
        if is_required is None:
            raise ValueError("Invalid value for `is_required`, must not be `None`")

        self._is_required = is_required

    @property
    def options(self):
        """
        Gets the options of this CatalogDataCategoryAttributeInterface.
        Options of the attribute (key => value pairs for select)

        :return: The options of this CatalogDataCategoryAttributeInterface.
        :rtype: list[EavDataAttributeOptionInterface]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this CatalogDataCategoryAttributeInterface.
        Options of the attribute (key => value pairs for select)

        :param options: The options of this CatalogDataCategoryAttributeInterface.
        :type: list[EavDataAttributeOptionInterface]
        """

        self._options = options

    @property
    def is_user_defined(self):
        """
        Gets the is_user_defined of this CatalogDataCategoryAttributeInterface.
        Current attribute has been defined by a user.

        :return: The is_user_defined of this CatalogDataCategoryAttributeInterface.
        :rtype: bool
        """
        return self._is_user_defined

    @is_user_defined.setter
    def is_user_defined(self, is_user_defined):
        """
        Sets the is_user_defined of this CatalogDataCategoryAttributeInterface.
        Current attribute has been defined by a user.

        :param is_user_defined: The is_user_defined of this CatalogDataCategoryAttributeInterface.
        :type: bool
        """

        self._is_user_defined = is_user_defined

    @property
    def default_frontend_label(self):
        """
        Gets the default_frontend_label of this CatalogDataCategoryAttributeInterface.
        Frontend label for default store

        :return: The default_frontend_label of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._default_frontend_label

    @default_frontend_label.setter
    def default_frontend_label(self, default_frontend_label):
        """
        Sets the default_frontend_label of this CatalogDataCategoryAttributeInterface.
        Frontend label for default store

        :param default_frontend_label: The default_frontend_label of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._default_frontend_label = default_frontend_label

    @property
    def frontend_labels(self):
        """
        Gets the frontend_labels of this CatalogDataCategoryAttributeInterface.
        Frontend label for each store

        :return: The frontend_labels of this CatalogDataCategoryAttributeInterface.
        :rtype: list[EavDataAttributeFrontendLabelInterface]
        """
        return self._frontend_labels

    @frontend_labels.setter
    def frontend_labels(self, frontend_labels):
        """
        Sets the frontend_labels of this CatalogDataCategoryAttributeInterface.
        Frontend label for each store

        :param frontend_labels: The frontend_labels of this CatalogDataCategoryAttributeInterface.
        :type: list[EavDataAttributeFrontendLabelInterface]
        """
        if frontend_labels is None:
            raise ValueError("Invalid value for `frontend_labels`, must not be `None`")

        self._frontend_labels = frontend_labels

    @property
    def note(self):
        """
        Gets the note of this CatalogDataCategoryAttributeInterface.
        The note attribute for the element.

        :return: The note of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this CatalogDataCategoryAttributeInterface.
        The note attribute for the element.

        :param note: The note of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._note = note

    @property
    def backend_type(self):
        """
        Gets the backend_type of this CatalogDataCategoryAttributeInterface.
        Backend type.

        :return: The backend_type of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._backend_type

    @backend_type.setter
    def backend_type(self, backend_type):
        """
        Sets the backend_type of this CatalogDataCategoryAttributeInterface.
        Backend type.

        :param backend_type: The backend_type of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._backend_type = backend_type

    @property
    def backend_model(self):
        """
        Gets the backend_model of this CatalogDataCategoryAttributeInterface.
        Backend model

        :return: The backend_model of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._backend_model

    @backend_model.setter
    def backend_model(self, backend_model):
        """
        Sets the backend_model of this CatalogDataCategoryAttributeInterface.
        Backend model

        :param backend_model: The backend_model of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._backend_model = backend_model

    @property
    def source_model(self):
        """
        Gets the source_model of this CatalogDataCategoryAttributeInterface.
        Source model

        :return: The source_model of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._source_model

    @source_model.setter
    def source_model(self, source_model):
        """
        Sets the source_model of this CatalogDataCategoryAttributeInterface.
        Source model

        :param source_model: The source_model of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._source_model = source_model

    @property
    def default_value(self):
        """
        Gets the default_value of this CatalogDataCategoryAttributeInterface.
        Default value for the element.

        :return: The default_value of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """
        Sets the default_value of this CatalogDataCategoryAttributeInterface.
        Default value for the element.

        :param default_value: The default_value of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._default_value = default_value

    @property
    def is_unique(self):
        """
        Gets the is_unique of this CatalogDataCategoryAttributeInterface.
        This is a unique attribute

        :return: The is_unique of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._is_unique

    @is_unique.setter
    def is_unique(self, is_unique):
        """
        Sets the is_unique of this CatalogDataCategoryAttributeInterface.
        This is a unique attribute

        :param is_unique: The is_unique of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._is_unique = is_unique

    @property
    def frontend_class(self):
        """
        Gets the frontend_class of this CatalogDataCategoryAttributeInterface.
        Frontend class of attribute

        :return: The frontend_class of this CatalogDataCategoryAttributeInterface.
        :rtype: str
        """
        return self._frontend_class

    @frontend_class.setter
    def frontend_class(self, frontend_class):
        """
        Sets the frontend_class of this CatalogDataCategoryAttributeInterface.
        Frontend class of attribute

        :param frontend_class: The frontend_class of this CatalogDataCategoryAttributeInterface.
        :type: str
        """

        self._frontend_class = frontend_class

    @property
    def validation_rules(self):
        """
        Gets the validation_rules of this CatalogDataCategoryAttributeInterface.
        Validation rules.

        :return: The validation_rules of this CatalogDataCategoryAttributeInterface.
        :rtype: list[EavDataAttributeValidationRuleInterface]
        """
        return self._validation_rules

    @validation_rules.setter
    def validation_rules(self, validation_rules):
        """
        Sets the validation_rules of this CatalogDataCategoryAttributeInterface.
        Validation rules.

        :param validation_rules: The validation_rules of this CatalogDataCategoryAttributeInterface.
        :type: list[EavDataAttributeValidationRuleInterface]
        """

        self._validation_rules = validation_rules

    @property
    def custom_attributes(self):
        """
        Gets the custom_attributes of this CatalogDataCategoryAttributeInterface.
        Custom attributes values.

        :return: The custom_attributes of this CatalogDataCategoryAttributeInterface.
        :rtype: list[FrameworkAttributeInterface]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """
        Sets the custom_attributes of this CatalogDataCategoryAttributeInterface.
        Custom attributes values.

        :param custom_attributes: The custom_attributes of this CatalogDataCategoryAttributeInterface.
        :type: list[FrameworkAttributeInterface]
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
