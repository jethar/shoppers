# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProductExtensionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, stock_item=None, bundle_product_options=None, downloadable_product_links=None, downloadable_product_samples=None, configurable_product_options=None, configurable_product_links=None):
        """
        ProductExtensionInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'stock_item': 'CatalogInventoryDataStockItemInterface',
            'bundle_product_options': 'list[BundleDataOptionInterface]',
            'downloadable_product_links': 'list[DownloadableDataLinkInterface]',
            'downloadable_product_samples': 'list[DownloadableDataSampleInterface]',
            'configurable_product_options': 'list[ConfigurableProductDataOptionInterface]',
            'configurable_product_links': 'list[int]'
        }

        self.attribute_map = {
            'stock_item': 'stock_item',
            'bundle_product_options': 'bundle_product_options',
            'downloadable_product_links': 'downloadable_product_links',
            'downloadable_product_samples': 'downloadable_product_samples',
            'configurable_product_options': 'configurable_product_options',
            'configurable_product_links': 'configurable_product_links'
        }

        self._stock_item = stock_item
        self._bundle_product_options = bundle_product_options
        self._downloadable_product_links = downloadable_product_links
        self._downloadable_product_samples = downloadable_product_samples
        self._configurable_product_options = configurable_product_options
        self._configurable_product_links = configurable_product_links

    @property
    def stock_item(self):
        """
        Gets the stock_item of this ProductExtensionInterface.

        :return: The stock_item of this ProductExtensionInterface.
        :rtype: CatalogInventoryDataStockItemInterface
        """
        return self._stock_item

    @stock_item.setter
    def stock_item(self, stock_item):
        """
        Sets the stock_item of this ProductExtensionInterface.

        :param stock_item: The stock_item of this ProductExtensionInterface.
        :type: CatalogInventoryDataStockItemInterface
        """

        self._stock_item = stock_item

    @property
    def bundle_product_options(self):
        """
        Gets the bundle_product_options of this ProductExtensionInterface.

        :return: The bundle_product_options of this ProductExtensionInterface.
        :rtype: list[BundleDataOptionInterface]
        """
        return self._bundle_product_options

    @bundle_product_options.setter
    def bundle_product_options(self, bundle_product_options):
        """
        Sets the bundle_product_options of this ProductExtensionInterface.

        :param bundle_product_options: The bundle_product_options of this ProductExtensionInterface.
        :type: list[BundleDataOptionInterface]
        """

        self._bundle_product_options = bundle_product_options

    @property
    def downloadable_product_links(self):
        """
        Gets the downloadable_product_links of this ProductExtensionInterface.

        :return: The downloadable_product_links of this ProductExtensionInterface.
        :rtype: list[DownloadableDataLinkInterface]
        """
        return self._downloadable_product_links

    @downloadable_product_links.setter
    def downloadable_product_links(self, downloadable_product_links):
        """
        Sets the downloadable_product_links of this ProductExtensionInterface.

        :param downloadable_product_links: The downloadable_product_links of this ProductExtensionInterface.
        :type: list[DownloadableDataLinkInterface]
        """

        self._downloadable_product_links = downloadable_product_links

    @property
    def downloadable_product_samples(self):
        """
        Gets the downloadable_product_samples of this ProductExtensionInterface.

        :return: The downloadable_product_samples of this ProductExtensionInterface.
        :rtype: list[DownloadableDataSampleInterface]
        """
        return self._downloadable_product_samples

    @downloadable_product_samples.setter
    def downloadable_product_samples(self, downloadable_product_samples):
        """
        Sets the downloadable_product_samples of this ProductExtensionInterface.

        :param downloadable_product_samples: The downloadable_product_samples of this ProductExtensionInterface.
        :type: list[DownloadableDataSampleInterface]
        """

        self._downloadable_product_samples = downloadable_product_samples

    @property
    def configurable_product_options(self):
        """
        Gets the configurable_product_options of this ProductExtensionInterface.

        :return: The configurable_product_options of this ProductExtensionInterface.
        :rtype: list[ConfigurableProductDataOptionInterface]
        """
        return self._configurable_product_options

    @configurable_product_options.setter
    def configurable_product_options(self, configurable_product_options):
        """
        Sets the configurable_product_options of this ProductExtensionInterface.

        :param configurable_product_options: The configurable_product_options of this ProductExtensionInterface.
        :type: list[ConfigurableProductDataOptionInterface]
        """

        self._configurable_product_options = configurable_product_options

    @property
    def configurable_product_links(self):
        """
        Gets the configurable_product_links of this ProductExtensionInterface.

        :return: The configurable_product_links of this ProductExtensionInterface.
        :rtype: list[int]
        """
        return self._configurable_product_links

    @configurable_product_links.setter
    def configurable_product_links(self, configurable_product_links):
        """
        Sets the configurable_product_links of this ProductExtensionInterface.

        :param configurable_product_links: The configurable_product_links of this ProductExtensionInterface.
        :type: list[int]
        """

        self._configurable_product_links = configurable_product_links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
