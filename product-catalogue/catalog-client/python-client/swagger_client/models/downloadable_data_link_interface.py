# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DownloadableDataLinkInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, title=None, sort_order=None, is_shareable=None, price=None, number_of_downloads=None, link_type=None, link_file=None, link_file_content=None, link_url=None, sample_type=None, sample_file=None, sample_file_content=None, sample_url=None):
        """
        DownloadableDataLinkInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'title': 'str',
            'sort_order': 'int',
            'is_shareable': 'int',
            'price': 'float',
            'number_of_downloads': 'int',
            'link_type': 'str',
            'link_file': 'str',
            'link_file_content': 'DownloadableDataFileContentInterface',
            'link_url': 'str',
            'sample_type': 'str',
            'sample_file': 'str',
            'sample_file_content': 'DownloadableDataFileContentInterface',
            'sample_url': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'sort_order': 'sort_order',
            'is_shareable': 'is_shareable',
            'price': 'price',
            'number_of_downloads': 'number_of_downloads',
            'link_type': 'link_type',
            'link_file': 'link_file',
            'link_file_content': 'link_file_content',
            'link_url': 'link_url',
            'sample_type': 'sample_type',
            'sample_file': 'sample_file',
            'sample_file_content': 'sample_file_content',
            'sample_url': 'sample_url'
        }

        self._id = id
        self._title = title
        self._sort_order = sort_order
        self._is_shareable = is_shareable
        self._price = price
        self._number_of_downloads = number_of_downloads
        self._link_type = link_type
        self._link_file = link_file
        self._link_file_content = link_file_content
        self._link_url = link_url
        self._sample_type = sample_type
        self._sample_file = sample_file
        self._sample_file_content = sample_file_content
        self._sample_url = sample_url

    @property
    def id(self):
        """
        Gets the id of this DownloadableDataLinkInterface.
        Sample(or link) id

        :return: The id of this DownloadableDataLinkInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DownloadableDataLinkInterface.
        Sample(or link) id

        :param id: The id of this DownloadableDataLinkInterface.
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this DownloadableDataLinkInterface.

        :return: The title of this DownloadableDataLinkInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this DownloadableDataLinkInterface.

        :param title: The title of this DownloadableDataLinkInterface.
        :type: str
        """

        self._title = title

    @property
    def sort_order(self):
        """
        Gets the sort_order of this DownloadableDataLinkInterface.

        :return: The sort_order of this DownloadableDataLinkInterface.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """
        Sets the sort_order of this DownloadableDataLinkInterface.

        :param sort_order: The sort_order of this DownloadableDataLinkInterface.
        :type: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def is_shareable(self):
        """
        Gets the is_shareable of this DownloadableDataLinkInterface.
        Shareable status

        :return: The is_shareable of this DownloadableDataLinkInterface.
        :rtype: int
        """
        return self._is_shareable

    @is_shareable.setter
    def is_shareable(self, is_shareable):
        """
        Sets the is_shareable of this DownloadableDataLinkInterface.
        Shareable status

        :param is_shareable: The is_shareable of this DownloadableDataLinkInterface.
        :type: int
        """
        if is_shareable is None:
            raise ValueError("Invalid value for `is_shareable`, must not be `None`")

        self._is_shareable = is_shareable

    @property
    def price(self):
        """
        Gets the price of this DownloadableDataLinkInterface.
        Price

        :return: The price of this DownloadableDataLinkInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this DownloadableDataLinkInterface.
        Price

        :param price: The price of this DownloadableDataLinkInterface.
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def number_of_downloads(self):
        """
        Gets the number_of_downloads of this DownloadableDataLinkInterface.
        Of downloads per user

        :return: The number_of_downloads of this DownloadableDataLinkInterface.
        :rtype: int
        """
        return self._number_of_downloads

    @number_of_downloads.setter
    def number_of_downloads(self, number_of_downloads):
        """
        Sets the number_of_downloads of this DownloadableDataLinkInterface.
        Of downloads per user

        :param number_of_downloads: The number_of_downloads of this DownloadableDataLinkInterface.
        :type: int
        """

        self._number_of_downloads = number_of_downloads

    @property
    def link_type(self):
        """
        Gets the link_type of this DownloadableDataLinkInterface.

        :return: The link_type of this DownloadableDataLinkInterface.
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """
        Sets the link_type of this DownloadableDataLinkInterface.

        :param link_type: The link_type of this DownloadableDataLinkInterface.
        :type: str
        """
        if link_type is None:
            raise ValueError("Invalid value for `link_type`, must not be `None`")

        self._link_type = link_type

    @property
    def link_file(self):
        """
        Gets the link_file of this DownloadableDataLinkInterface.
        relative file path

        :return: The link_file of this DownloadableDataLinkInterface.
        :rtype: str
        """
        return self._link_file

    @link_file.setter
    def link_file(self, link_file):
        """
        Sets the link_file of this DownloadableDataLinkInterface.
        relative file path

        :param link_file: The link_file of this DownloadableDataLinkInterface.
        :type: str
        """

        self._link_file = link_file

    @property
    def link_file_content(self):
        """
        Gets the link_file_content of this DownloadableDataLinkInterface.

        :return: The link_file_content of this DownloadableDataLinkInterface.
        :rtype: DownloadableDataFileContentInterface
        """
        return self._link_file_content

    @link_file_content.setter
    def link_file_content(self, link_file_content):
        """
        Sets the link_file_content of this DownloadableDataLinkInterface.

        :param link_file_content: The link_file_content of this DownloadableDataLinkInterface.
        :type: DownloadableDataFileContentInterface
        """

        self._link_file_content = link_file_content

    @property
    def link_url(self):
        """
        Gets the link_url of this DownloadableDataLinkInterface.
        Link url or null when type is 'file'

        :return: The link_url of this DownloadableDataLinkInterface.
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url):
        """
        Sets the link_url of this DownloadableDataLinkInterface.
        Link url or null when type is 'file'

        :param link_url: The link_url of this DownloadableDataLinkInterface.
        :type: str
        """

        self._link_url = link_url

    @property
    def sample_type(self):
        """
        Gets the sample_type of this DownloadableDataLinkInterface.

        :return: The sample_type of this DownloadableDataLinkInterface.
        :rtype: str
        """
        return self._sample_type

    @sample_type.setter
    def sample_type(self, sample_type):
        """
        Sets the sample_type of this DownloadableDataLinkInterface.

        :param sample_type: The sample_type of this DownloadableDataLinkInterface.
        :type: str
        """
        if sample_type is None:
            raise ValueError("Invalid value for `sample_type`, must not be `None`")

        self._sample_type = sample_type

    @property
    def sample_file(self):
        """
        Gets the sample_file of this DownloadableDataLinkInterface.
        relative file path

        :return: The sample_file of this DownloadableDataLinkInterface.
        :rtype: str
        """
        return self._sample_file

    @sample_file.setter
    def sample_file(self, sample_file):
        """
        Sets the sample_file of this DownloadableDataLinkInterface.
        relative file path

        :param sample_file: The sample_file of this DownloadableDataLinkInterface.
        :type: str
        """

        self._sample_file = sample_file

    @property
    def sample_file_content(self):
        """
        Gets the sample_file_content of this DownloadableDataLinkInterface.

        :return: The sample_file_content of this DownloadableDataLinkInterface.
        :rtype: DownloadableDataFileContentInterface
        """
        return self._sample_file_content

    @sample_file_content.setter
    def sample_file_content(self, sample_file_content):
        """
        Sets the sample_file_content of this DownloadableDataLinkInterface.

        :param sample_file_content: The sample_file_content of this DownloadableDataLinkInterface.
        :type: DownloadableDataFileContentInterface
        """

        self._sample_file_content = sample_file_content

    @property
    def sample_url(self):
        """
        Gets the sample_url of this DownloadableDataLinkInterface.
        file URL

        :return: The sample_url of this DownloadableDataLinkInterface.
        :rtype: str
        """
        return self._sample_url

    @sample_url.setter
    def sample_url(self, sample_url):
        """
        Sets the sample_url of this DownloadableDataLinkInterface.
        file URL

        :param sample_url: The sample_url of this DownloadableDataLinkInterface.
        :type: str
        """

        self._sample_url = sample_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
