# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogInventoryDataStockStatusCollectionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, items=None, search_criteria=None, total_count=None):
        """
        CatalogInventoryDataStockStatusCollectionInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'items': 'list[CatalogInventoryDataStockStatusInterface]',
            'search_criteria': 'CatalogInventoryStockStatusCriteriaInterface',
            'total_count': 'int'
        }

        self.attribute_map = {
            'items': 'items',
            'search_criteria': 'search_criteria',
            'total_count': 'total_count'
        }

        self._items = items
        self._search_criteria = search_criteria
        self._total_count = total_count

    @property
    def items(self):
        """
        Gets the items of this CatalogInventoryDataStockStatusCollectionInterface.
        Items

        :return: The items of this CatalogInventoryDataStockStatusCollectionInterface.
        :rtype: list[CatalogInventoryDataStockStatusInterface]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this CatalogInventoryDataStockStatusCollectionInterface.
        Items

        :param items: The items of this CatalogInventoryDataStockStatusCollectionInterface.
        :type: list[CatalogInventoryDataStockStatusInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def search_criteria(self):
        """
        Gets the search_criteria of this CatalogInventoryDataStockStatusCollectionInterface.

        :return: The search_criteria of this CatalogInventoryDataStockStatusCollectionInterface.
        :rtype: CatalogInventoryStockStatusCriteriaInterface
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria):
        """
        Sets the search_criteria of this CatalogInventoryDataStockStatusCollectionInterface.

        :param search_criteria: The search_criteria of this CatalogInventoryDataStockStatusCollectionInterface.
        :type: CatalogInventoryStockStatusCriteriaInterface
        """
        if search_criteria is None:
            raise ValueError("Invalid value for `search_criteria`, must not be `None`")

        self._search_criteria = search_criteria

    @property
    def total_count(self):
        """
        Gets the total_count of this CatalogInventoryDataStockStatusCollectionInterface.
        Total count.

        :return: The total_count of this CatalogInventoryDataStockStatusCollectionInterface.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """
        Sets the total_count of this CatalogInventoryDataStockStatusCollectionInterface.
        Total count.

        :param total_count: The total_count of this CatalogInventoryDataStockStatusCollectionInterface.
        :type: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
