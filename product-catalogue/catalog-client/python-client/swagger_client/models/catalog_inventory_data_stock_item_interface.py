# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogInventoryDataStockItemInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, item_id=None, product_id=None, stock_id=None, qty=None, is_in_stock=None, is_qty_decimal=None, show_default_notification_message=None, use_config_min_qty=None, min_qty=None, use_config_min_sale_qty=None, min_sale_qty=None, use_config_max_sale_qty=None, max_sale_qty=None, use_config_backorders=None, backorders=None, use_config_notify_stock_qty=None, notify_stock_qty=None, use_config_qty_increments=None, qty_increments=None, use_config_enable_qty_inc=None, enable_qty_increments=None, use_config_manage_stock=None, manage_stock=None, low_stock_date=None, is_decimal_divided=None, stock_status_changed_auto=None):
        """
        CatalogInventoryDataStockItemInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'item_id': 'int',
            'product_id': 'int',
            'stock_id': 'int',
            'qty': 'float',
            'is_in_stock': 'bool',
            'is_qty_decimal': 'bool',
            'show_default_notification_message': 'bool',
            'use_config_min_qty': 'bool',
            'min_qty': 'float',
            'use_config_min_sale_qty': 'int',
            'min_sale_qty': 'float',
            'use_config_max_sale_qty': 'bool',
            'max_sale_qty': 'float',
            'use_config_backorders': 'bool',
            'backorders': 'int',
            'use_config_notify_stock_qty': 'bool',
            'notify_stock_qty': 'float',
            'use_config_qty_increments': 'bool',
            'qty_increments': 'float',
            'use_config_enable_qty_inc': 'bool',
            'enable_qty_increments': 'bool',
            'use_config_manage_stock': 'bool',
            'manage_stock': 'bool',
            'low_stock_date': 'str',
            'is_decimal_divided': 'bool',
            'stock_status_changed_auto': 'int'
        }

        self.attribute_map = {
            'item_id': 'item_id',
            'product_id': 'product_id',
            'stock_id': 'stock_id',
            'qty': 'qty',
            'is_in_stock': 'is_in_stock',
            'is_qty_decimal': 'is_qty_decimal',
            'show_default_notification_message': 'show_default_notification_message',
            'use_config_min_qty': 'use_config_min_qty',
            'min_qty': 'min_qty',
            'use_config_min_sale_qty': 'use_config_min_sale_qty',
            'min_sale_qty': 'min_sale_qty',
            'use_config_max_sale_qty': 'use_config_max_sale_qty',
            'max_sale_qty': 'max_sale_qty',
            'use_config_backorders': 'use_config_backorders',
            'backorders': 'backorders',
            'use_config_notify_stock_qty': 'use_config_notify_stock_qty',
            'notify_stock_qty': 'notify_stock_qty',
            'use_config_qty_increments': 'use_config_qty_increments',
            'qty_increments': 'qty_increments',
            'use_config_enable_qty_inc': 'use_config_enable_qty_inc',
            'enable_qty_increments': 'enable_qty_increments',
            'use_config_manage_stock': 'use_config_manage_stock',
            'manage_stock': 'manage_stock',
            'low_stock_date': 'low_stock_date',
            'is_decimal_divided': 'is_decimal_divided',
            'stock_status_changed_auto': 'stock_status_changed_auto'
        }

        self._item_id = item_id
        self._product_id = product_id
        self._stock_id = stock_id
        self._qty = qty
        self._is_in_stock = is_in_stock
        self._is_qty_decimal = is_qty_decimal
        self._show_default_notification_message = show_default_notification_message
        self._use_config_min_qty = use_config_min_qty
        self._min_qty = min_qty
        self._use_config_min_sale_qty = use_config_min_sale_qty
        self._min_sale_qty = min_sale_qty
        self._use_config_max_sale_qty = use_config_max_sale_qty
        self._max_sale_qty = max_sale_qty
        self._use_config_backorders = use_config_backorders
        self._backorders = backorders
        self._use_config_notify_stock_qty = use_config_notify_stock_qty
        self._notify_stock_qty = notify_stock_qty
        self._use_config_qty_increments = use_config_qty_increments
        self._qty_increments = qty_increments
        self._use_config_enable_qty_inc = use_config_enable_qty_inc
        self._enable_qty_increments = enable_qty_increments
        self._use_config_manage_stock = use_config_manage_stock
        self._manage_stock = manage_stock
        self._low_stock_date = low_stock_date
        self._is_decimal_divided = is_decimal_divided
        self._stock_status_changed_auto = stock_status_changed_auto

    @property
    def item_id(self):
        """
        Gets the item_id of this CatalogInventoryDataStockItemInterface.

        :return: The item_id of this CatalogInventoryDataStockItemInterface.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this CatalogInventoryDataStockItemInterface.

        :param item_id: The item_id of this CatalogInventoryDataStockItemInterface.
        :type: int
        """

        self._item_id = item_id

    @property
    def product_id(self):
        """
        Gets the product_id of this CatalogInventoryDataStockItemInterface.

        :return: The product_id of this CatalogInventoryDataStockItemInterface.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this CatalogInventoryDataStockItemInterface.

        :param product_id: The product_id of this CatalogInventoryDataStockItemInterface.
        :type: int
        """

        self._product_id = product_id

    @property
    def stock_id(self):
        """
        Gets the stock_id of this CatalogInventoryDataStockItemInterface.
        Stock identifier

        :return: The stock_id of this CatalogInventoryDataStockItemInterface.
        :rtype: int
        """
        return self._stock_id

    @stock_id.setter
    def stock_id(self, stock_id):
        """
        Sets the stock_id of this CatalogInventoryDataStockItemInterface.
        Stock identifier

        :param stock_id: The stock_id of this CatalogInventoryDataStockItemInterface.
        :type: int
        """

        self._stock_id = stock_id

    @property
    def qty(self):
        """
        Gets the qty of this CatalogInventoryDataStockItemInterface.

        :return: The qty of this CatalogInventoryDataStockItemInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """
        Sets the qty of this CatalogInventoryDataStockItemInterface.

        :param qty: The qty of this CatalogInventoryDataStockItemInterface.
        :type: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    @property
    def is_in_stock(self):
        """
        Gets the is_in_stock of this CatalogInventoryDataStockItemInterface.
        Stock Availability

        :return: The is_in_stock of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._is_in_stock

    @is_in_stock.setter
    def is_in_stock(self, is_in_stock):
        """
        Sets the is_in_stock of this CatalogInventoryDataStockItemInterface.
        Stock Availability

        :param is_in_stock: The is_in_stock of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if is_in_stock is None:
            raise ValueError("Invalid value for `is_in_stock`, must not be `None`")

        self._is_in_stock = is_in_stock

    @property
    def is_qty_decimal(self):
        """
        Gets the is_qty_decimal of this CatalogInventoryDataStockItemInterface.

        :return: The is_qty_decimal of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._is_qty_decimal

    @is_qty_decimal.setter
    def is_qty_decimal(self, is_qty_decimal):
        """
        Sets the is_qty_decimal of this CatalogInventoryDataStockItemInterface.

        :param is_qty_decimal: The is_qty_decimal of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if is_qty_decimal is None:
            raise ValueError("Invalid value for `is_qty_decimal`, must not be `None`")

        self._is_qty_decimal = is_qty_decimal

    @property
    def show_default_notification_message(self):
        """
        Gets the show_default_notification_message of this CatalogInventoryDataStockItemInterface.

        :return: The show_default_notification_message of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._show_default_notification_message

    @show_default_notification_message.setter
    def show_default_notification_message(self, show_default_notification_message):
        """
        Sets the show_default_notification_message of this CatalogInventoryDataStockItemInterface.

        :param show_default_notification_message: The show_default_notification_message of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if show_default_notification_message is None:
            raise ValueError("Invalid value for `show_default_notification_message`, must not be `None`")

        self._show_default_notification_message = show_default_notification_message

    @property
    def use_config_min_qty(self):
        """
        Gets the use_config_min_qty of this CatalogInventoryDataStockItemInterface.

        :return: The use_config_min_qty of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_min_qty

    @use_config_min_qty.setter
    def use_config_min_qty(self, use_config_min_qty):
        """
        Sets the use_config_min_qty of this CatalogInventoryDataStockItemInterface.

        :param use_config_min_qty: The use_config_min_qty of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if use_config_min_qty is None:
            raise ValueError("Invalid value for `use_config_min_qty`, must not be `None`")

        self._use_config_min_qty = use_config_min_qty

    @property
    def min_qty(self):
        """
        Gets the min_qty of this CatalogInventoryDataStockItemInterface.
        Minimal quantity available for item status in stock

        :return: The min_qty of this CatalogInventoryDataStockItemInterface.
        :rtype: float
        """
        return self._min_qty

    @min_qty.setter
    def min_qty(self, min_qty):
        """
        Sets the min_qty of this CatalogInventoryDataStockItemInterface.
        Minimal quantity available for item status in stock

        :param min_qty: The min_qty of this CatalogInventoryDataStockItemInterface.
        :type: float
        """
        if min_qty is None:
            raise ValueError("Invalid value for `min_qty`, must not be `None`")

        self._min_qty = min_qty

    @property
    def use_config_min_sale_qty(self):
        """
        Gets the use_config_min_sale_qty of this CatalogInventoryDataStockItemInterface.

        :return: The use_config_min_sale_qty of this CatalogInventoryDataStockItemInterface.
        :rtype: int
        """
        return self._use_config_min_sale_qty

    @use_config_min_sale_qty.setter
    def use_config_min_sale_qty(self, use_config_min_sale_qty):
        """
        Sets the use_config_min_sale_qty of this CatalogInventoryDataStockItemInterface.

        :param use_config_min_sale_qty: The use_config_min_sale_qty of this CatalogInventoryDataStockItemInterface.
        :type: int
        """
        if use_config_min_sale_qty is None:
            raise ValueError("Invalid value for `use_config_min_sale_qty`, must not be `None`")

        self._use_config_min_sale_qty = use_config_min_sale_qty

    @property
    def min_sale_qty(self):
        """
        Gets the min_sale_qty of this CatalogInventoryDataStockItemInterface.
        Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation

        :return: The min_sale_qty of this CatalogInventoryDataStockItemInterface.
        :rtype: float
        """
        return self._min_sale_qty

    @min_sale_qty.setter
    def min_sale_qty(self, min_sale_qty):
        """
        Sets the min_sale_qty of this CatalogInventoryDataStockItemInterface.
        Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation

        :param min_sale_qty: The min_sale_qty of this CatalogInventoryDataStockItemInterface.
        :type: float
        """
        if min_sale_qty is None:
            raise ValueError("Invalid value for `min_sale_qty`, must not be `None`")

        self._min_sale_qty = min_sale_qty

    @property
    def use_config_max_sale_qty(self):
        """
        Gets the use_config_max_sale_qty of this CatalogInventoryDataStockItemInterface.

        :return: The use_config_max_sale_qty of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_max_sale_qty

    @use_config_max_sale_qty.setter
    def use_config_max_sale_qty(self, use_config_max_sale_qty):
        """
        Sets the use_config_max_sale_qty of this CatalogInventoryDataStockItemInterface.

        :param use_config_max_sale_qty: The use_config_max_sale_qty of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if use_config_max_sale_qty is None:
            raise ValueError("Invalid value for `use_config_max_sale_qty`, must not be `None`")

        self._use_config_max_sale_qty = use_config_max_sale_qty

    @property
    def max_sale_qty(self):
        """
        Gets the max_sale_qty of this CatalogInventoryDataStockItemInterface.
        Maximum Qty Allowed in Shopping Cart data wrapper

        :return: The max_sale_qty of this CatalogInventoryDataStockItemInterface.
        :rtype: float
        """
        return self._max_sale_qty

    @max_sale_qty.setter
    def max_sale_qty(self, max_sale_qty):
        """
        Sets the max_sale_qty of this CatalogInventoryDataStockItemInterface.
        Maximum Qty Allowed in Shopping Cart data wrapper

        :param max_sale_qty: The max_sale_qty of this CatalogInventoryDataStockItemInterface.
        :type: float
        """
        if max_sale_qty is None:
            raise ValueError("Invalid value for `max_sale_qty`, must not be `None`")

        self._max_sale_qty = max_sale_qty

    @property
    def use_config_backorders(self):
        """
        Gets the use_config_backorders of this CatalogInventoryDataStockItemInterface.

        :return: The use_config_backorders of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_backorders

    @use_config_backorders.setter
    def use_config_backorders(self, use_config_backorders):
        """
        Sets the use_config_backorders of this CatalogInventoryDataStockItemInterface.

        :param use_config_backorders: The use_config_backorders of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if use_config_backorders is None:
            raise ValueError("Invalid value for `use_config_backorders`, must not be `None`")

        self._use_config_backorders = use_config_backorders

    @property
    def backorders(self):
        """
        Gets the backorders of this CatalogInventoryDataStockItemInterface.
        Backorders status

        :return: The backorders of this CatalogInventoryDataStockItemInterface.
        :rtype: int
        """
        return self._backorders

    @backorders.setter
    def backorders(self, backorders):
        """
        Sets the backorders of this CatalogInventoryDataStockItemInterface.
        Backorders status

        :param backorders: The backorders of this CatalogInventoryDataStockItemInterface.
        :type: int
        """
        if backorders is None:
            raise ValueError("Invalid value for `backorders`, must not be `None`")

        self._backorders = backorders

    @property
    def use_config_notify_stock_qty(self):
        """
        Gets the use_config_notify_stock_qty of this CatalogInventoryDataStockItemInterface.

        :return: The use_config_notify_stock_qty of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_notify_stock_qty

    @use_config_notify_stock_qty.setter
    def use_config_notify_stock_qty(self, use_config_notify_stock_qty):
        """
        Sets the use_config_notify_stock_qty of this CatalogInventoryDataStockItemInterface.

        :param use_config_notify_stock_qty: The use_config_notify_stock_qty of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if use_config_notify_stock_qty is None:
            raise ValueError("Invalid value for `use_config_notify_stock_qty`, must not be `None`")

        self._use_config_notify_stock_qty = use_config_notify_stock_qty

    @property
    def notify_stock_qty(self):
        """
        Gets the notify_stock_qty of this CatalogInventoryDataStockItemInterface.
        Notify for Quantity Below data wrapper

        :return: The notify_stock_qty of this CatalogInventoryDataStockItemInterface.
        :rtype: float
        """
        return self._notify_stock_qty

    @notify_stock_qty.setter
    def notify_stock_qty(self, notify_stock_qty):
        """
        Sets the notify_stock_qty of this CatalogInventoryDataStockItemInterface.
        Notify for Quantity Below data wrapper

        :param notify_stock_qty: The notify_stock_qty of this CatalogInventoryDataStockItemInterface.
        :type: float
        """
        if notify_stock_qty is None:
            raise ValueError("Invalid value for `notify_stock_qty`, must not be `None`")

        self._notify_stock_qty = notify_stock_qty

    @property
    def use_config_qty_increments(self):
        """
        Gets the use_config_qty_increments of this CatalogInventoryDataStockItemInterface.

        :return: The use_config_qty_increments of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_qty_increments

    @use_config_qty_increments.setter
    def use_config_qty_increments(self, use_config_qty_increments):
        """
        Sets the use_config_qty_increments of this CatalogInventoryDataStockItemInterface.

        :param use_config_qty_increments: The use_config_qty_increments of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if use_config_qty_increments is None:
            raise ValueError("Invalid value for `use_config_qty_increments`, must not be `None`")

        self._use_config_qty_increments = use_config_qty_increments

    @property
    def qty_increments(self):
        """
        Gets the qty_increments of this CatalogInventoryDataStockItemInterface.
        Quantity Increments data wrapper

        :return: The qty_increments of this CatalogInventoryDataStockItemInterface.
        :rtype: float
        """
        return self._qty_increments

    @qty_increments.setter
    def qty_increments(self, qty_increments):
        """
        Sets the qty_increments of this CatalogInventoryDataStockItemInterface.
        Quantity Increments data wrapper

        :param qty_increments: The qty_increments of this CatalogInventoryDataStockItemInterface.
        :type: float
        """
        if qty_increments is None:
            raise ValueError("Invalid value for `qty_increments`, must not be `None`")

        self._qty_increments = qty_increments

    @property
    def use_config_enable_qty_inc(self):
        """
        Gets the use_config_enable_qty_inc of this CatalogInventoryDataStockItemInterface.

        :return: The use_config_enable_qty_inc of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_enable_qty_inc

    @use_config_enable_qty_inc.setter
    def use_config_enable_qty_inc(self, use_config_enable_qty_inc):
        """
        Sets the use_config_enable_qty_inc of this CatalogInventoryDataStockItemInterface.

        :param use_config_enable_qty_inc: The use_config_enable_qty_inc of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if use_config_enable_qty_inc is None:
            raise ValueError("Invalid value for `use_config_enable_qty_inc`, must not be `None`")

        self._use_config_enable_qty_inc = use_config_enable_qty_inc

    @property
    def enable_qty_increments(self):
        """
        Gets the enable_qty_increments of this CatalogInventoryDataStockItemInterface.
        Whether Quantity Increments is enabled

        :return: The enable_qty_increments of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._enable_qty_increments

    @enable_qty_increments.setter
    def enable_qty_increments(self, enable_qty_increments):
        """
        Sets the enable_qty_increments of this CatalogInventoryDataStockItemInterface.
        Whether Quantity Increments is enabled

        :param enable_qty_increments: The enable_qty_increments of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if enable_qty_increments is None:
            raise ValueError("Invalid value for `enable_qty_increments`, must not be `None`")

        self._enable_qty_increments = enable_qty_increments

    @property
    def use_config_manage_stock(self):
        """
        Gets the use_config_manage_stock of this CatalogInventoryDataStockItemInterface.

        :return: The use_config_manage_stock of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_manage_stock

    @use_config_manage_stock.setter
    def use_config_manage_stock(self, use_config_manage_stock):
        """
        Sets the use_config_manage_stock of this CatalogInventoryDataStockItemInterface.

        :param use_config_manage_stock: The use_config_manage_stock of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if use_config_manage_stock is None:
            raise ValueError("Invalid value for `use_config_manage_stock`, must not be `None`")

        self._use_config_manage_stock = use_config_manage_stock

    @property
    def manage_stock(self):
        """
        Gets the manage_stock of this CatalogInventoryDataStockItemInterface.
        Can Manage Stock

        :return: The manage_stock of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._manage_stock

    @manage_stock.setter
    def manage_stock(self, manage_stock):
        """
        Sets the manage_stock of this CatalogInventoryDataStockItemInterface.
        Can Manage Stock

        :param manage_stock: The manage_stock of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if manage_stock is None:
            raise ValueError("Invalid value for `manage_stock`, must not be `None`")

        self._manage_stock = manage_stock

    @property
    def low_stock_date(self):
        """
        Gets the low_stock_date of this CatalogInventoryDataStockItemInterface.

        :return: The low_stock_date of this CatalogInventoryDataStockItemInterface.
        :rtype: str
        """
        return self._low_stock_date

    @low_stock_date.setter
    def low_stock_date(self, low_stock_date):
        """
        Sets the low_stock_date of this CatalogInventoryDataStockItemInterface.

        :param low_stock_date: The low_stock_date of this CatalogInventoryDataStockItemInterface.
        :type: str
        """
        if low_stock_date is None:
            raise ValueError("Invalid value for `low_stock_date`, must not be `None`")

        self._low_stock_date = low_stock_date

    @property
    def is_decimal_divided(self):
        """
        Gets the is_decimal_divided of this CatalogInventoryDataStockItemInterface.

        :return: The is_decimal_divided of this CatalogInventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._is_decimal_divided

    @is_decimal_divided.setter
    def is_decimal_divided(self, is_decimal_divided):
        """
        Sets the is_decimal_divided of this CatalogInventoryDataStockItemInterface.

        :param is_decimal_divided: The is_decimal_divided of this CatalogInventoryDataStockItemInterface.
        :type: bool
        """
        if is_decimal_divided is None:
            raise ValueError("Invalid value for `is_decimal_divided`, must not be `None`")

        self._is_decimal_divided = is_decimal_divided

    @property
    def stock_status_changed_auto(self):
        """
        Gets the stock_status_changed_auto of this CatalogInventoryDataStockItemInterface.

        :return: The stock_status_changed_auto of this CatalogInventoryDataStockItemInterface.
        :rtype: int
        """
        return self._stock_status_changed_auto

    @stock_status_changed_auto.setter
    def stock_status_changed_auto(self, stock_status_changed_auto):
        """
        Sets the stock_status_changed_auto of this CatalogInventoryDataStockItemInterface.

        :param stock_status_changed_auto: The stock_status_changed_auto of this CatalogInventoryDataStockItemInterface.
        :type: int
        """
        if stock_status_changed_auto is None:
            raise ValueError("Invalid value for `stock_status_changed_auto`, must not be `None`")

        self._stock_status_changed_auto = stock_status_changed_auto

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
