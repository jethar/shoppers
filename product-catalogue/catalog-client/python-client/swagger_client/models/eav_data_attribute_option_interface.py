# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EavDataAttributeOptionInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, label=None, value=None, sort_order=None, is_default=None, store_labels=None):
        """
        EavDataAttributeOptionInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'label': 'str',
            'value': 'str',
            'sort_order': 'int',
            'is_default': 'bool',
            'store_labels': 'list[EavDataAttributeOptionLabelInterface]'
        }

        self.attribute_map = {
            'label': 'label',
            'value': 'value',
            'sort_order': 'sort_order',
            'is_default': 'is_default',
            'store_labels': 'store_labels'
        }

        self._label = label
        self._value = value
        self._sort_order = sort_order
        self._is_default = is_default
        self._store_labels = store_labels

    @property
    def label(self):
        """
        Gets the label of this EavDataAttributeOptionInterface.
        Option label

        :return: The label of this EavDataAttributeOptionInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this EavDataAttributeOptionInterface.
        Option label

        :param label: The label of this EavDataAttributeOptionInterface.
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def value(self):
        """
        Gets the value of this EavDataAttributeOptionInterface.
        Option value

        :return: The value of this EavDataAttributeOptionInterface.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this EavDataAttributeOptionInterface.
        Option value

        :param value: The value of this EavDataAttributeOptionInterface.
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def sort_order(self):
        """
        Gets the sort_order of this EavDataAttributeOptionInterface.
        Option order

        :return: The sort_order of this EavDataAttributeOptionInterface.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """
        Sets the sort_order of this EavDataAttributeOptionInterface.
        Option order

        :param sort_order: The sort_order of this EavDataAttributeOptionInterface.
        :type: int
        """

        self._sort_order = sort_order

    @property
    def is_default(self):
        """
        Gets the is_default of this EavDataAttributeOptionInterface.
        Default

        :return: The is_default of this EavDataAttributeOptionInterface.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this EavDataAttributeOptionInterface.
        Default

        :param is_default: The is_default of this EavDataAttributeOptionInterface.
        :type: bool
        """

        self._is_default = is_default

    @property
    def store_labels(self):
        """
        Gets the store_labels of this EavDataAttributeOptionInterface.
        Option label for store scopes

        :return: The store_labels of this EavDataAttributeOptionInterface.
        :rtype: list[EavDataAttributeOptionLabelInterface]
        """
        return self._store_labels

    @store_labels.setter
    def store_labels(self, store_labels):
        """
        Sets the store_labels of this EavDataAttributeOptionInterface.
        Option label for store scopes

        :param store_labels: The store_labels of this EavDataAttributeOptionInterface.
        :type: list[EavDataAttributeOptionLabelInterface]
        """

        self._store_labels = store_labels

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
