# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataProductAttributeMediaGalleryEntryInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, media_type=None, label=None, position=None, disabled=None, types=None, file=None, content=None):
        """
        CatalogDataProductAttributeMediaGalleryEntryInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'media_type': 'str',
            'label': 'str',
            'position': 'int',
            'disabled': 'bool',
            'types': 'list[str]',
            'file': 'str',
            'content': 'FrameworkDataImageContentInterface'
        }

        self.attribute_map = {
            'id': 'id',
            'media_type': 'media_type',
            'label': 'label',
            'position': 'position',
            'disabled': 'disabled',
            'types': 'types',
            'file': 'file',
            'content': 'content'
        }

        self._id = id
        self._media_type = media_type
        self._label = label
        self._position = position
        self._disabled = disabled
        self._types = types
        self._file = file
        self._content = content

    @property
    def id(self):
        """
        Gets the id of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Gallery entry ID

        :return: The id of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Gallery entry ID

        :param id: The id of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type: int
        """

        self._id = id

    @property
    def media_type(self):
        """
        Gets the media_type of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Media type

        :return: The media_type of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """
        Sets the media_type of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Media type

        :param media_type: The media_type of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")

        self._media_type = media_type

    @property
    def label(self):
        """
        Gets the label of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Gallery entry alternative text

        :return: The label of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Gallery entry alternative text

        :param label: The label of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def position(self):
        """
        Gets the position of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Gallery entry position (sort order)

        :return: The position of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Gallery entry position (sort order)

        :param position: The position of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

    @property
    def disabled(self):
        """
        Gets the disabled of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        If gallery entry is hidden from product page

        :return: The disabled of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """
        Sets the disabled of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        If gallery entry is hidden from product page

        :param disabled: The disabled of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")

        self._disabled = disabled

    @property
    def types(self):
        """
        Gets the types of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Gallery entry image types (thumbnail, image, small_image etc)

        :return: The types of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """
        Sets the types of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        Gallery entry image types (thumbnail, image, small_image etc)

        :param types: The types of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type: list[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")

        self._types = types

    @property
    def file(self):
        """
        Gets the file of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        File path

        :return: The file of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """
        Sets the file of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        File path

        :param file: The file of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type: str
        """

        self._file = file

    @property
    def content(self):
        """
        Gets the content of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        :return: The content of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :rtype: FrameworkDataImageContentInterface
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this CatalogDataProductAttributeMediaGalleryEntryInterface.

        :param content: The content of this CatalogDataProductAttributeMediaGalleryEntryInterface.
        :type: FrameworkDataImageContentInterface
        """

        self._content = content

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
