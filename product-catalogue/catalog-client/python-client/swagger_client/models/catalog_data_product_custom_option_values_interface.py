# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CatalogDataProductCustomOptionValuesInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title=None, sort_order=None, price=None, price_type=None, sku=None, option_type_id=None):
        """
        CatalogDataProductCustomOptionValuesInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'title': 'str',
            'sort_order': 'int',
            'price': 'float',
            'price_type': 'str',
            'sku': 'str',
            'option_type_id': 'int'
        }

        self.attribute_map = {
            'title': 'title',
            'sort_order': 'sort_order',
            'price': 'price',
            'price_type': 'price_type',
            'sku': 'sku',
            'option_type_id': 'option_type_id'
        }

        self._title = title
        self._sort_order = sort_order
        self._price = price
        self._price_type = price_type
        self._sku = sku
        self._option_type_id = option_type_id

    @property
    def title(self):
        """
        Gets the title of this CatalogDataProductCustomOptionValuesInterface.
        Option title

        :return: The title of this CatalogDataProductCustomOptionValuesInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this CatalogDataProductCustomOptionValuesInterface.
        Option title

        :param title: The title of this CatalogDataProductCustomOptionValuesInterface.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def sort_order(self):
        """
        Gets the sort_order of this CatalogDataProductCustomOptionValuesInterface.
        Sort order

        :return: The sort_order of this CatalogDataProductCustomOptionValuesInterface.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """
        Sets the sort_order of this CatalogDataProductCustomOptionValuesInterface.
        Sort order

        :param sort_order: The sort_order of this CatalogDataProductCustomOptionValuesInterface.
        :type: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def price(self):
        """
        Gets the price of this CatalogDataProductCustomOptionValuesInterface.
        Price

        :return: The price of this CatalogDataProductCustomOptionValuesInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this CatalogDataProductCustomOptionValuesInterface.
        Price

        :param price: The price of this CatalogDataProductCustomOptionValuesInterface.
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_type(self):
        """
        Gets the price_type of this CatalogDataProductCustomOptionValuesInterface.
        Price type

        :return: The price_type of this CatalogDataProductCustomOptionValuesInterface.
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """
        Sets the price_type of this CatalogDataProductCustomOptionValuesInterface.
        Price type

        :param price_type: The price_type of this CatalogDataProductCustomOptionValuesInterface.
        :type: str
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")

        self._price_type = price_type

    @property
    def sku(self):
        """
        Gets the sku of this CatalogDataProductCustomOptionValuesInterface.
        Sku

        :return: The sku of this CatalogDataProductCustomOptionValuesInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this CatalogDataProductCustomOptionValuesInterface.
        Sku

        :param sku: The sku of this CatalogDataProductCustomOptionValuesInterface.
        :type: str
        """

        self._sku = sku

    @property
    def option_type_id(self):
        """
        Gets the option_type_id of this CatalogDataProductCustomOptionValuesInterface.
        Option type id

        :return: The option_type_id of this CatalogDataProductCustomOptionValuesInterface.
        :rtype: int
        """
        return self._option_type_id

    @option_type_id.setter
    def option_type_id(self, option_type_id):
        """
        Sets the option_type_id of this CatalogDataProductCustomOptionValuesInterface.
        Option type id

        :param option_type_id: The option_type_id of this CatalogDataProductCustomOptionValuesInterface.
        :type: int
        """

        self._option_type_id = option_type_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
