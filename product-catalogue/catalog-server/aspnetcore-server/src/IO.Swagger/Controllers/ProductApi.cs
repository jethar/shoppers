/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ProductApiController : Controller
    { 

        /// <summary>
        /// Add a new product to the store
        /// </summary>
        /// <remarks></remarks>
        /// <param name="body"></param>
        /// <response code="200">200 Success.</response>
        /// <response code="400">400 Bad Request</response>
        /// <response code="401">401 Unauthorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/v2/v1/products")]
        [SwaggerOperation("AddProduct")]
        [SwaggerResponse(200, type: typeof(Product))]
        public virtual IActionResult AddProduct([FromBody]Body body)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Product>(exampleJson)
            : default(Product);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Deletes a product
        /// </summary>
        /// <remarks></remarks>
        /// <param name="apiKey"></param>
        /// <param name="productId">Product id to delete</param>
        /// <response code="400">Invalid product value</response>
        [HttpDelete]
        [Route("/v2/v1/products/{productId}")]
        [SwaggerOperation("DeleteProduct")]
        public virtual void DeleteProduct([FromHeader]string apiKey, [FromRoute]long? productId)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Finds Products by category
        /// </summary>
        /// <remarks>Use category1 for testing.</remarks>
        /// <param name="category">Category to filter by</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid category value</response>
        [HttpGet]
        [Route("/v2/v1/products/findByCategory")]
        [SwaggerOperation("FindProductsByCategories")]
        [SwaggerResponse(200, type: typeof(List<CatalogDataProductSearchResultsInterface>))]
        public virtual IActionResult FindProductsByCategories([FromQuery]string category)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<CatalogDataProductSearchResultsInterface>>(exampleJson)
            : default(List<CatalogDataProductSearchResultsInterface>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Find product by ID
        /// </summary>
        /// <remarks>Returns a product when ID &lt; 10.  ID &gt; 10 or nonintegers will simulate API error conditions</remarks>
        /// <param name="productId">ID of product that needs to be fetched</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Product not found</response>
        [HttpGet]
        [Route("/v2/v1/products/{productId}")]
        [SwaggerOperation("GetProductById")]
        [SwaggerResponse(200, type: typeof(Product))]
        public virtual IActionResult GetProductById([FromRoute]long? productId)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Product>(exampleJson)
            : default(Product);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Updates a product in the store with form data
        /// </summary>
        /// <remarks></remarks>
        /// <param name="productId">ID of product that needs to be updated</param>
        /// <param name="name">Updated name of the product</param>
        /// <param name="status">Updated status of the product</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/v2/v1/products/{productId}")]
        [SwaggerOperation("UpdateProductWithForm")]
        public virtual void UpdateProductWithForm([FromRoute]string productId, [FromForm]string name, [FromForm]string status)
        { 
            throw new NotImplementedException();
        }
    }
}
