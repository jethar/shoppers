/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogDataProductTierPriceInterface :  IEquatable<CatalogDataProductTierPriceInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogDataProductTierPriceInterface" /> class.
        /// </summary>
        /// <param name="CustomerGroupId">Customer group id (required).</param>
        /// <param name="Qty">Tier qty (required).</param>
        /// <param name="Value">Price value (required).</param>
        public CatalogDataProductTierPriceInterface(int? CustomerGroupId = null, decimal? Qty = null, decimal? Value = null)
        {
            // to ensure "CustomerGroupId" is required (not null)
            if (CustomerGroupId == null)
            {
                throw new InvalidDataException("CustomerGroupId is a required property for CatalogDataProductTierPriceInterface and cannot be null");
            }
            else
            {
                this.CustomerGroupId = CustomerGroupId;
            }
            // to ensure "Qty" is required (not null)
            if (Qty == null)
            {
                throw new InvalidDataException("Qty is a required property for CatalogDataProductTierPriceInterface and cannot be null");
            }
            else
            {
                this.Qty = Qty;
            }
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for CatalogDataProductTierPriceInterface and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            
        }

        /// <summary>
        /// Customer group id
        /// </summary>
        /// <value>Customer group id</value>
        [DataMember(Name="customer_group_id")]
        public int? CustomerGroupId { get; set; }

        /// <summary>
        /// Tier qty
        /// </summary>
        /// <value>Tier qty</value>
        [DataMember(Name="qty")]
        public decimal? Qty { get; set; }

        /// <summary>
        /// Price value
        /// </summary>
        /// <value>Price value</value>
        [DataMember(Name="value")]
        public decimal? Value { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogDataProductTierPriceInterface {\n");
            sb.Append("  CustomerGroupId: ").Append(CustomerGroupId).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CatalogDataProductTierPriceInterface)obj);
        }

        /// <summary>
        /// Returns true if CatalogDataProductTierPriceInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogDataProductTierPriceInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogDataProductTierPriceInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CustomerGroupId == other.CustomerGroupId ||
                    this.CustomerGroupId != null &&
                    this.CustomerGroupId.Equals(other.CustomerGroupId)
                ) && 
                (
                    this.Qty == other.Qty ||
                    this.Qty != null &&
                    this.Qty.Equals(other.Qty)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.CustomerGroupId != null)
                    hash = hash * 59 + this.CustomerGroupId.GetHashCode();
                    if (this.Qty != null)
                    hash = hash * 59 + this.Qty.GetHashCode();
                    if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CatalogDataProductTierPriceInterface left, CatalogDataProductTierPriceInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogDataProductTierPriceInterface left, CatalogDataProductTierPriceInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
