/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogDataCategoryTreeInterface :  IEquatable<CatalogDataCategoryTreeInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogDataCategoryTreeInterface" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ParentId">Parent category ID (required).</param>
        /// <param name="Name">Category name (required).</param>
        /// <param name="IsActive">Whether category is active (required).</param>
        /// <param name="Position">Category position (required).</param>
        /// <param name="Level">Category level (required).</param>
        /// <param name="ProductCount">Product count (required).</param>
        /// <param name="ChildrenData">ChildrenData (required).</param>
        public CatalogDataCategoryTreeInterface(int? Id = null, int? ParentId = null, string Name = null, bool? IsActive = null, int? Position = null, int? Level = null, int? ProductCount = null, List<CatalogDataCategoryTreeInterface> ChildrenData = null)
        {
            // to ensure "ParentId" is required (not null)
            if (ParentId == null)
            {
                throw new InvalidDataException("ParentId is a required property for CatalogDataCategoryTreeInterface and cannot be null");
            }
            else
            {
                this.ParentId = ParentId;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CatalogDataCategoryTreeInterface and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "IsActive" is required (not null)
            if (IsActive == null)
            {
                throw new InvalidDataException("IsActive is a required property for CatalogDataCategoryTreeInterface and cannot be null");
            }
            else
            {
                this.IsActive = IsActive;
            }
            // to ensure "Position" is required (not null)
            if (Position == null)
            {
                throw new InvalidDataException("Position is a required property for CatalogDataCategoryTreeInterface and cannot be null");
            }
            else
            {
                this.Position = Position;
            }
            // to ensure "Level" is required (not null)
            if (Level == null)
            {
                throw new InvalidDataException("Level is a required property for CatalogDataCategoryTreeInterface and cannot be null");
            }
            else
            {
                this.Level = Level;
            }
            // to ensure "ProductCount" is required (not null)
            if (ProductCount == null)
            {
                throw new InvalidDataException("ProductCount is a required property for CatalogDataCategoryTreeInterface and cannot be null");
            }
            else
            {
                this.ProductCount = ProductCount;
            }
            // to ensure "ChildrenData" is required (not null)
            if (ChildrenData == null)
            {
                throw new InvalidDataException("ChildrenData is a required property for CatalogDataCategoryTreeInterface and cannot be null");
            }
            else
            {
                this.ChildrenData = ChildrenData;
            }
            this.Id = Id;
            
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Parent category ID
        /// </summary>
        /// <value>Parent category ID</value>
        [DataMember(Name="parent_id")]
        public int? ParentId { get; set; }

        /// <summary>
        /// Category name
        /// </summary>
        /// <value>Category name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Whether category is active
        /// </summary>
        /// <value>Whether category is active</value>
        [DataMember(Name="is_active")]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Category position
        /// </summary>
        /// <value>Category position</value>
        [DataMember(Name="position")]
        public int? Position { get; set; }

        /// <summary>
        /// Category level
        /// </summary>
        /// <value>Category level</value>
        [DataMember(Name="level")]
        public int? Level { get; set; }

        /// <summary>
        /// Product count
        /// </summary>
        /// <value>Product count</value>
        [DataMember(Name="product_count")]
        public int? ProductCount { get; set; }

        /// <summary>
        /// Gets or Sets ChildrenData
        /// </summary>
        [DataMember(Name="children_data")]
        public List<CatalogDataCategoryTreeInterface> ChildrenData { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogDataCategoryTreeInterface {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  ProductCount: ").Append(ProductCount).Append("\n");
            sb.Append("  ChildrenData: ").Append(ChildrenData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CatalogDataCategoryTreeInterface)obj);
        }

        /// <summary>
        /// Returns true if CatalogDataCategoryTreeInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogDataCategoryTreeInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogDataCategoryTreeInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ParentId == other.ParentId ||
                    this.ParentId != null &&
                    this.ParentId.Equals(other.ParentId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.IsActive == other.IsActive ||
                    this.IsActive != null &&
                    this.IsActive.Equals(other.IsActive)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.Level == other.Level ||
                    this.Level != null &&
                    this.Level.Equals(other.Level)
                ) && 
                (
                    this.ProductCount == other.ProductCount ||
                    this.ProductCount != null &&
                    this.ProductCount.Equals(other.ProductCount)
                ) && 
                (
                    this.ChildrenData == other.ChildrenData ||
                    this.ChildrenData != null &&
                    this.ChildrenData.SequenceEqual(other.ChildrenData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.ParentId != null)
                    hash = hash * 59 + this.ParentId.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.IsActive != null)
                    hash = hash * 59 + this.IsActive.GetHashCode();
                    if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                    if (this.Level != null)
                    hash = hash * 59 + this.Level.GetHashCode();
                    if (this.ProductCount != null)
                    hash = hash * 59 + this.ProductCount.GetHashCode();
                    if (this.ChildrenData != null)
                    hash = hash * 59 + this.ChildrenData.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CatalogDataCategoryTreeInterface left, CatalogDataCategoryTreeInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogDataCategoryTreeInterface left, CatalogDataCategoryTreeInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
