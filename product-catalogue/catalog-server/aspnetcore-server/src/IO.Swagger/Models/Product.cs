/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Product :  IEquatable<Product>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Sku">Sku (required).</param>
        /// <param name="Name">Name.</param>
        /// <param name="AttributeSetId">Attribute set id.</param>
        /// <param name="Price">Price.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Visibility">Visibility.</param>
        /// <param name="TypeId">Type id.</param>
        /// <param name="CreatedAt">Created date.</param>
        /// <param name="UpdatedAt">Updated date.</param>
        /// <param name="Weight">Weight.</param>
        /// <param name="ExtensionAttributes">ExtensionAttributes.</param>
        /// <param name="ProductLinks">Product links info.</param>
        /// <param name="Options">List of product options.</param>
        /// <param name="MediaGalleryEntries">Media gallery entries.</param>
        /// <param name="TierPrices">List of product tier prices.</param>
        /// <param name="CustomAttributes">Custom attributes values..</param>
        public Product(int? Id = null, string Sku = null, string Name = null, int? AttributeSetId = null, decimal? Price = null, int? Status = null, int? Visibility = null, string TypeId = null, string CreatedAt = null, string UpdatedAt = null, decimal? Weight = null, ProductExtensionInterface ExtensionAttributes = null, List<CatalogDataProductLinkInterface> ProductLinks = null, List<CatalogDataProductCustomOptionInterface> Options = null, List<CatalogDataProductAttributeMediaGalleryEntryInterface> MediaGalleryEntries = null, List<CatalogDataProductTierPriceInterface> TierPrices = null, List<FrameworkAttributeInterface> CustomAttributes = null)
        {
            // to ensure "Sku" is required (not null)
            if (Sku == null)
            {
                throw new InvalidDataException("Sku is a required property for Product and cannot be null");
            }
            else
            {
                this.Sku = Sku;
            }
            this.Id = Id;
            this.Name = Name;
            this.AttributeSetId = AttributeSetId;
            this.Price = Price;
            this.Status = Status;
            this.Visibility = Visibility;
            this.TypeId = TypeId;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
            this.Weight = Weight;
            this.ExtensionAttributes = ExtensionAttributes;
            this.ProductLinks = ProductLinks;
            this.Options = Options;
            this.MediaGalleryEntries = MediaGalleryEntries;
            this.TierPrices = TierPrices;
            this.CustomAttributes = CustomAttributes;
            
        }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Sku
        /// </summary>
        /// <value>Sku</value>
        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Attribute set id
        /// </summary>
        /// <value>Attribute set id</value>
        [DataMember(Name="attribute_set_id")]
        public int? AttributeSetId { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name="price")]
        public decimal? Price { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status")]
        public int? Status { get; set; }

        /// <summary>
        /// Visibility
        /// </summary>
        /// <value>Visibility</value>
        [DataMember(Name="visibility")]
        public int? Visibility { get; set; }

        /// <summary>
        /// Type id
        /// </summary>
        /// <value>Type id</value>
        [DataMember(Name="type_id")]
        public string TypeId { get; set; }

        /// <summary>
        /// Created date
        /// </summary>
        /// <value>Created date</value>
        [DataMember(Name="created_at")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Updated date
        /// </summary>
        /// <value>Updated date</value>
        [DataMember(Name="updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Weight
        /// </summary>
        /// <value>Weight</value>
        [DataMember(Name="weight")]
        public decimal? Weight { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionAttributes
        /// </summary>
        [DataMember(Name="extension_attributes")]
        public ProductExtensionInterface ExtensionAttributes { get; set; }

        /// <summary>
        /// Product links info
        /// </summary>
        /// <value>Product links info</value>
        [DataMember(Name="product_links")]
        public List<CatalogDataProductLinkInterface> ProductLinks { get; set; }

        /// <summary>
        /// List of product options
        /// </summary>
        /// <value>List of product options</value>
        [DataMember(Name="options")]
        public List<CatalogDataProductCustomOptionInterface> Options { get; set; }

        /// <summary>
        /// Media gallery entries
        /// </summary>
        /// <value>Media gallery entries</value>
        [DataMember(Name="media_gallery_entries")]
        public List<CatalogDataProductAttributeMediaGalleryEntryInterface> MediaGalleryEntries { get; set; }

        /// <summary>
        /// List of product tier prices
        /// </summary>
        /// <value>List of product tier prices</value>
        [DataMember(Name="tier_prices")]
        public List<CatalogDataProductTierPriceInterface> TierPrices { get; set; }

        /// <summary>
        /// Custom attributes values.
        /// </summary>
        /// <value>Custom attributes values.</value>
        [DataMember(Name="custom_attributes")]
        public List<FrameworkAttributeInterface> CustomAttributes { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AttributeSetId: ").Append(AttributeSetId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  TypeId: ").Append(TypeId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ExtensionAttributes: ").Append(ExtensionAttributes).Append("\n");
            sb.Append("  ProductLinks: ").Append(ProductLinks).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  MediaGalleryEntries: ").Append(MediaGalleryEntries).Append("\n");
            sb.Append("  TierPrices: ").Append(TierPrices).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Product)obj);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="other">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Sku == other.Sku ||
                    this.Sku != null &&
                    this.Sku.Equals(other.Sku)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.AttributeSetId == other.AttributeSetId ||
                    this.AttributeSetId != null &&
                    this.AttributeSetId.Equals(other.AttributeSetId)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Visibility == other.Visibility ||
                    this.Visibility != null &&
                    this.Visibility.Equals(other.Visibility)
                ) && 
                (
                    this.TypeId == other.TypeId ||
                    this.TypeId != null &&
                    this.TypeId.Equals(other.TypeId)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    this.Weight == other.Weight ||
                    this.Weight != null &&
                    this.Weight.Equals(other.Weight)
                ) && 
                (
                    this.ExtensionAttributes == other.ExtensionAttributes ||
                    this.ExtensionAttributes != null &&
                    this.ExtensionAttributes.Equals(other.ExtensionAttributes)
                ) && 
                (
                    this.ProductLinks == other.ProductLinks ||
                    this.ProductLinks != null &&
                    this.ProductLinks.SequenceEqual(other.ProductLinks)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                ) && 
                (
                    this.MediaGalleryEntries == other.MediaGalleryEntries ||
                    this.MediaGalleryEntries != null &&
                    this.MediaGalleryEntries.SequenceEqual(other.MediaGalleryEntries)
                ) && 
                (
                    this.TierPrices == other.TierPrices ||
                    this.TierPrices != null &&
                    this.TierPrices.SequenceEqual(other.TierPrices)
                ) && 
                (
                    this.CustomAttributes == other.CustomAttributes ||
                    this.CustomAttributes != null &&
                    this.CustomAttributes.SequenceEqual(other.CustomAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Sku != null)
                    hash = hash * 59 + this.Sku.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.AttributeSetId != null)
                    hash = hash * 59 + this.AttributeSetId.GetHashCode();
                    if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                    if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                    if (this.Visibility != null)
                    hash = hash * 59 + this.Visibility.GetHashCode();
                    if (this.TypeId != null)
                    hash = hash * 59 + this.TypeId.GetHashCode();
                    if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                    if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                    if (this.Weight != null)
                    hash = hash * 59 + this.Weight.GetHashCode();
                    if (this.ExtensionAttributes != null)
                    hash = hash * 59 + this.ExtensionAttributes.GetHashCode();
                    if (this.ProductLinks != null)
                    hash = hash * 59 + this.ProductLinks.GetHashCode();
                    if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                    if (this.MediaGalleryEntries != null)
                    hash = hash * 59 + this.MediaGalleryEntries.GetHashCode();
                    if (this.TierPrices != null)
                    hash = hash * 59 + this.TierPrices.GetHashCode();
                    if (this.CustomAttributes != null)
                    hash = hash * 59 + this.CustomAttributes.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Product left, Product right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Product left, Product right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
