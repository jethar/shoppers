/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogDataProductAttributeMediaGalleryEntryInterface :  IEquatable<CatalogDataProductAttributeMediaGalleryEntryInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogDataProductAttributeMediaGalleryEntryInterface" /> class.
        /// </summary>
        /// <param name="Id">Gallery entry ID.</param>
        /// <param name="MediaType">Media type (required).</param>
        /// <param name="Label">Gallery entry alternative text (required).</param>
        /// <param name="Position">Gallery entry position (sort order) (required).</param>
        /// <param name="Disabled">If gallery entry is hidden from product page (required).</param>
        /// <param name="Types">Gallery entry image types (thumbnail, image, small_image etc) (required).</param>
        /// <param name="File">File path.</param>
        /// <param name="Content">Content.</param>
        public CatalogDataProductAttributeMediaGalleryEntryInterface(int? Id = null, string MediaType = null, string Label = null, int? Position = null, bool? Disabled = null, List<string> Types = null, string File = null, FrameworkDataImageContentInterface Content = null)
        {
            // to ensure "MediaType" is required (not null)
            if (MediaType == null)
            {
                throw new InvalidDataException("MediaType is a required property for CatalogDataProductAttributeMediaGalleryEntryInterface and cannot be null");
            }
            else
            {
                this.MediaType = MediaType;
            }
            // to ensure "Label" is required (not null)
            if (Label == null)
            {
                throw new InvalidDataException("Label is a required property for CatalogDataProductAttributeMediaGalleryEntryInterface and cannot be null");
            }
            else
            {
                this.Label = Label;
            }
            // to ensure "Position" is required (not null)
            if (Position == null)
            {
                throw new InvalidDataException("Position is a required property for CatalogDataProductAttributeMediaGalleryEntryInterface and cannot be null");
            }
            else
            {
                this.Position = Position;
            }
            // to ensure "Disabled" is required (not null)
            if (Disabled == null)
            {
                throw new InvalidDataException("Disabled is a required property for CatalogDataProductAttributeMediaGalleryEntryInterface and cannot be null");
            }
            else
            {
                this.Disabled = Disabled;
            }
            // to ensure "Types" is required (not null)
            if (Types == null)
            {
                throw new InvalidDataException("Types is a required property for CatalogDataProductAttributeMediaGalleryEntryInterface and cannot be null");
            }
            else
            {
                this.Types = Types;
            }
            this.Id = Id;
            this.File = File;
            this.Content = Content;
            
        }

        /// <summary>
        /// Gallery entry ID
        /// </summary>
        /// <value>Gallery entry ID</value>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Media type
        /// </summary>
        /// <value>Media type</value>
        [DataMember(Name="media_type")]
        public string MediaType { get; set; }

        /// <summary>
        /// Gallery entry alternative text
        /// </summary>
        /// <value>Gallery entry alternative text</value>
        [DataMember(Name="label")]
        public string Label { get; set; }

        /// <summary>
        /// Gallery entry position (sort order)
        /// </summary>
        /// <value>Gallery entry position (sort order)</value>
        [DataMember(Name="position")]
        public int? Position { get; set; }

        /// <summary>
        /// If gallery entry is hidden from product page
        /// </summary>
        /// <value>If gallery entry is hidden from product page</value>
        [DataMember(Name="disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Gallery entry image types (thumbnail, image, small_image etc)
        /// </summary>
        /// <value>Gallery entry image types (thumbnail, image, small_image etc)</value>
        [DataMember(Name="types")]
        public List<string> Types { get; set; }

        /// <summary>
        /// File path
        /// </summary>
        /// <value>File path</value>
        [DataMember(Name="file")]
        public string File { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content")]
        public FrameworkDataImageContentInterface Content { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogDataProductAttributeMediaGalleryEntryInterface {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CatalogDataProductAttributeMediaGalleryEntryInterface)obj);
        }

        /// <summary>
        /// Returns true if CatalogDataProductAttributeMediaGalleryEntryInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogDataProductAttributeMediaGalleryEntryInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogDataProductAttributeMediaGalleryEntryInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.MediaType == other.MediaType ||
                    this.MediaType != null &&
                    this.MediaType.Equals(other.MediaType)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.Disabled == other.Disabled ||
                    this.Disabled != null &&
                    this.Disabled.Equals(other.Disabled)
                ) && 
                (
                    this.Types == other.Types ||
                    this.Types != null &&
                    this.Types.SequenceEqual(other.Types)
                ) && 
                (
                    this.File == other.File ||
                    this.File != null &&
                    this.File.Equals(other.File)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.MediaType != null)
                    hash = hash * 59 + this.MediaType.GetHashCode();
                    if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                    if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                    if (this.Disabled != null)
                    hash = hash * 59 + this.Disabled.GetHashCode();
                    if (this.Types != null)
                    hash = hash * 59 + this.Types.GetHashCode();
                    if (this.File != null)
                    hash = hash * 59 + this.File.GetHashCode();
                    if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CatalogDataProductAttributeMediaGalleryEntryInterface left, CatalogDataProductAttributeMediaGalleryEntryInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogDataProductAttributeMediaGalleryEntryInterface left, CatalogDataProductAttributeMediaGalleryEntryInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
