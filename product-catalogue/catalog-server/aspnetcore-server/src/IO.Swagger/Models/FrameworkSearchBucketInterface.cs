/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Facet Bucket
    /// </summary>
    [DataContract]
    public partial class FrameworkSearchBucketInterface :  IEquatable<FrameworkSearchBucketInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FrameworkSearchBucketInterface" /> class.
        /// </summary>
        /// <param name="Name">Field name (required).</param>
        /// <param name="Values">Field values (required).</param>
        public FrameworkSearchBucketInterface(string Name = null, List<FrameworkSearchAggregationValueInterface> Values = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for FrameworkSearchBucketInterface and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Values" is required (not null)
            if (Values == null)
            {
                throw new InvalidDataException("Values is a required property for FrameworkSearchBucketInterface and cannot be null");
            }
            else
            {
                this.Values = Values;
            }
            
        }

        /// <summary>
        /// Field name
        /// </summary>
        /// <value>Field name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Field values
        /// </summary>
        /// <value>Field values</value>
        [DataMember(Name="values")]
        public List<FrameworkSearchAggregationValueInterface> Values { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FrameworkSearchBucketInterface {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((FrameworkSearchBucketInterface)obj);
        }

        /// <summary>
        /// Returns true if FrameworkSearchBucketInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of FrameworkSearchBucketInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FrameworkSearchBucketInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(FrameworkSearchBucketInterface left, FrameworkSearchBucketInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FrameworkSearchBucketInterface left, FrameworkSearchBucketInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
