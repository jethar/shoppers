/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Interface StockItem
    /// </summary>
    [DataContract]
    public partial class CatalogInventoryDataStockItemInterface :  IEquatable<CatalogInventoryDataStockItemInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogInventoryDataStockItemInterface" /> class.
        /// </summary>
        /// <param name="ItemId">ItemId.</param>
        /// <param name="ProductId">ProductId.</param>
        /// <param name="StockId">Stock identifier.</param>
        /// <param name="Qty">Qty (required).</param>
        /// <param name="IsInStock">Stock Availability (required).</param>
        /// <param name="IsQtyDecimal">IsQtyDecimal (required).</param>
        /// <param name="ShowDefaultNotificationMessage">ShowDefaultNotificationMessage (required).</param>
        /// <param name="UseConfigMinQty">UseConfigMinQty (required).</param>
        /// <param name="MinQty">Minimal quantity available for item status in stock (required).</param>
        /// <param name="UseConfigMinSaleQty">UseConfigMinSaleQty (required).</param>
        /// <param name="MinSaleQty">Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation (required).</param>
        /// <param name="UseConfigMaxSaleQty">UseConfigMaxSaleQty (required).</param>
        /// <param name="MaxSaleQty">Maximum Qty Allowed in Shopping Cart data wrapper (required).</param>
        /// <param name="UseConfigBackorders">UseConfigBackorders (required).</param>
        /// <param name="Backorders">Backorders status (required).</param>
        /// <param name="UseConfigNotifyStockQty">UseConfigNotifyStockQty (required).</param>
        /// <param name="NotifyStockQty">Notify for Quantity Below data wrapper (required).</param>
        /// <param name="UseConfigQtyIncrements">UseConfigQtyIncrements (required).</param>
        /// <param name="QtyIncrements">Quantity Increments data wrapper (required).</param>
        /// <param name="UseConfigEnableQtyInc">UseConfigEnableQtyInc (required).</param>
        /// <param name="EnableQtyIncrements">Whether Quantity Increments is enabled (required).</param>
        /// <param name="UseConfigManageStock">UseConfigManageStock (required).</param>
        /// <param name="ManageStock">Can Manage Stock (required).</param>
        /// <param name="LowStockDate">LowStockDate (required).</param>
        /// <param name="IsDecimalDivided">IsDecimalDivided (required).</param>
        /// <param name="StockStatusChangedAuto">StockStatusChangedAuto (required).</param>
        public CatalogInventoryDataStockItemInterface(int? ItemId = null, int? ProductId = null, int? StockId = null, decimal? Qty = null, bool? IsInStock = null, bool? IsQtyDecimal = null, bool? ShowDefaultNotificationMessage = null, bool? UseConfigMinQty = null, decimal? MinQty = null, int? UseConfigMinSaleQty = null, decimal? MinSaleQty = null, bool? UseConfigMaxSaleQty = null, decimal? MaxSaleQty = null, bool? UseConfigBackorders = null, int? Backorders = null, bool? UseConfigNotifyStockQty = null, decimal? NotifyStockQty = null, bool? UseConfigQtyIncrements = null, decimal? QtyIncrements = null, bool? UseConfigEnableQtyInc = null, bool? EnableQtyIncrements = null, bool? UseConfigManageStock = null, bool? ManageStock = null, string LowStockDate = null, bool? IsDecimalDivided = null, int? StockStatusChangedAuto = null)
        {
            // to ensure "Qty" is required (not null)
            if (Qty == null)
            {
                throw new InvalidDataException("Qty is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.Qty = Qty;
            }
            // to ensure "IsInStock" is required (not null)
            if (IsInStock == null)
            {
                throw new InvalidDataException("IsInStock is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.IsInStock = IsInStock;
            }
            // to ensure "IsQtyDecimal" is required (not null)
            if (IsQtyDecimal == null)
            {
                throw new InvalidDataException("IsQtyDecimal is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.IsQtyDecimal = IsQtyDecimal;
            }
            // to ensure "ShowDefaultNotificationMessage" is required (not null)
            if (ShowDefaultNotificationMessage == null)
            {
                throw new InvalidDataException("ShowDefaultNotificationMessage is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.ShowDefaultNotificationMessage = ShowDefaultNotificationMessage;
            }
            // to ensure "UseConfigMinQty" is required (not null)
            if (UseConfigMinQty == null)
            {
                throw new InvalidDataException("UseConfigMinQty is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.UseConfigMinQty = UseConfigMinQty;
            }
            // to ensure "MinQty" is required (not null)
            if (MinQty == null)
            {
                throw new InvalidDataException("MinQty is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.MinQty = MinQty;
            }
            // to ensure "UseConfigMinSaleQty" is required (not null)
            if (UseConfigMinSaleQty == null)
            {
                throw new InvalidDataException("UseConfigMinSaleQty is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.UseConfigMinSaleQty = UseConfigMinSaleQty;
            }
            // to ensure "MinSaleQty" is required (not null)
            if (MinSaleQty == null)
            {
                throw new InvalidDataException("MinSaleQty is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.MinSaleQty = MinSaleQty;
            }
            // to ensure "UseConfigMaxSaleQty" is required (not null)
            if (UseConfigMaxSaleQty == null)
            {
                throw new InvalidDataException("UseConfigMaxSaleQty is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.UseConfigMaxSaleQty = UseConfigMaxSaleQty;
            }
            // to ensure "MaxSaleQty" is required (not null)
            if (MaxSaleQty == null)
            {
                throw new InvalidDataException("MaxSaleQty is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.MaxSaleQty = MaxSaleQty;
            }
            // to ensure "UseConfigBackorders" is required (not null)
            if (UseConfigBackorders == null)
            {
                throw new InvalidDataException("UseConfigBackorders is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.UseConfigBackorders = UseConfigBackorders;
            }
            // to ensure "Backorders" is required (not null)
            if (Backorders == null)
            {
                throw new InvalidDataException("Backorders is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.Backorders = Backorders;
            }
            // to ensure "UseConfigNotifyStockQty" is required (not null)
            if (UseConfigNotifyStockQty == null)
            {
                throw new InvalidDataException("UseConfigNotifyStockQty is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.UseConfigNotifyStockQty = UseConfigNotifyStockQty;
            }
            // to ensure "NotifyStockQty" is required (not null)
            if (NotifyStockQty == null)
            {
                throw new InvalidDataException("NotifyStockQty is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.NotifyStockQty = NotifyStockQty;
            }
            // to ensure "UseConfigQtyIncrements" is required (not null)
            if (UseConfigQtyIncrements == null)
            {
                throw new InvalidDataException("UseConfigQtyIncrements is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.UseConfigQtyIncrements = UseConfigQtyIncrements;
            }
            // to ensure "QtyIncrements" is required (not null)
            if (QtyIncrements == null)
            {
                throw new InvalidDataException("QtyIncrements is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.QtyIncrements = QtyIncrements;
            }
            // to ensure "UseConfigEnableQtyInc" is required (not null)
            if (UseConfigEnableQtyInc == null)
            {
                throw new InvalidDataException("UseConfigEnableQtyInc is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.UseConfigEnableQtyInc = UseConfigEnableQtyInc;
            }
            // to ensure "EnableQtyIncrements" is required (not null)
            if (EnableQtyIncrements == null)
            {
                throw new InvalidDataException("EnableQtyIncrements is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.EnableQtyIncrements = EnableQtyIncrements;
            }
            // to ensure "UseConfigManageStock" is required (not null)
            if (UseConfigManageStock == null)
            {
                throw new InvalidDataException("UseConfigManageStock is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.UseConfigManageStock = UseConfigManageStock;
            }
            // to ensure "ManageStock" is required (not null)
            if (ManageStock == null)
            {
                throw new InvalidDataException("ManageStock is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.ManageStock = ManageStock;
            }
            // to ensure "LowStockDate" is required (not null)
            if (LowStockDate == null)
            {
                throw new InvalidDataException("LowStockDate is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.LowStockDate = LowStockDate;
            }
            // to ensure "IsDecimalDivided" is required (not null)
            if (IsDecimalDivided == null)
            {
                throw new InvalidDataException("IsDecimalDivided is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.IsDecimalDivided = IsDecimalDivided;
            }
            // to ensure "StockStatusChangedAuto" is required (not null)
            if (StockStatusChangedAuto == null)
            {
                throw new InvalidDataException("StockStatusChangedAuto is a required property for CatalogInventoryDataStockItemInterface and cannot be null");
            }
            else
            {
                this.StockStatusChangedAuto = StockStatusChangedAuto;
            }
            this.ItemId = ItemId;
            this.ProductId = ProductId;
            this.StockId = StockId;
            
        }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="item_id")]
        public int? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="product_id")]
        public int? ProductId { get; set; }

        /// <summary>
        /// Stock identifier
        /// </summary>
        /// <value>Stock identifier</value>
        [DataMember(Name="stock_id")]
        public int? StockId { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="qty")]
        public decimal? Qty { get; set; }

        /// <summary>
        /// Stock Availability
        /// </summary>
        /// <value>Stock Availability</value>
        [DataMember(Name="is_in_stock")]
        public bool? IsInStock { get; set; }

        /// <summary>
        /// Gets or Sets IsQtyDecimal
        /// </summary>
        [DataMember(Name="is_qty_decimal")]
        public bool? IsQtyDecimal { get; set; }

        /// <summary>
        /// Gets or Sets ShowDefaultNotificationMessage
        /// </summary>
        [DataMember(Name="show_default_notification_message")]
        public bool? ShowDefaultNotificationMessage { get; set; }

        /// <summary>
        /// Gets or Sets UseConfigMinQty
        /// </summary>
        [DataMember(Name="use_config_min_qty")]
        public bool? UseConfigMinQty { get; set; }

        /// <summary>
        /// Minimal quantity available for item status in stock
        /// </summary>
        /// <value>Minimal quantity available for item status in stock</value>
        [DataMember(Name="min_qty")]
        public decimal? MinQty { get; set; }

        /// <summary>
        /// Gets or Sets UseConfigMinSaleQty
        /// </summary>
        [DataMember(Name="use_config_min_sale_qty")]
        public int? UseConfigMinSaleQty { get; set; }

        /// <summary>
        /// Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation
        /// </summary>
        /// <value>Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation</value>
        [DataMember(Name="min_sale_qty")]
        public decimal? MinSaleQty { get; set; }

        /// <summary>
        /// Gets or Sets UseConfigMaxSaleQty
        /// </summary>
        [DataMember(Name="use_config_max_sale_qty")]
        public bool? UseConfigMaxSaleQty { get; set; }

        /// <summary>
        /// Maximum Qty Allowed in Shopping Cart data wrapper
        /// </summary>
        /// <value>Maximum Qty Allowed in Shopping Cart data wrapper</value>
        [DataMember(Name="max_sale_qty")]
        public decimal? MaxSaleQty { get; set; }

        /// <summary>
        /// Gets or Sets UseConfigBackorders
        /// </summary>
        [DataMember(Name="use_config_backorders")]
        public bool? UseConfigBackorders { get; set; }

        /// <summary>
        /// Backorders status
        /// </summary>
        /// <value>Backorders status</value>
        [DataMember(Name="backorders")]
        public int? Backorders { get; set; }

        /// <summary>
        /// Gets or Sets UseConfigNotifyStockQty
        /// </summary>
        [DataMember(Name="use_config_notify_stock_qty")]
        public bool? UseConfigNotifyStockQty { get; set; }

        /// <summary>
        /// Notify for Quantity Below data wrapper
        /// </summary>
        /// <value>Notify for Quantity Below data wrapper</value>
        [DataMember(Name="notify_stock_qty")]
        public decimal? NotifyStockQty { get; set; }

        /// <summary>
        /// Gets or Sets UseConfigQtyIncrements
        /// </summary>
        [DataMember(Name="use_config_qty_increments")]
        public bool? UseConfigQtyIncrements { get; set; }

        /// <summary>
        /// Quantity Increments data wrapper
        /// </summary>
        /// <value>Quantity Increments data wrapper</value>
        [DataMember(Name="qty_increments")]
        public decimal? QtyIncrements { get; set; }

        /// <summary>
        /// Gets or Sets UseConfigEnableQtyInc
        /// </summary>
        [DataMember(Name="use_config_enable_qty_inc")]
        public bool? UseConfigEnableQtyInc { get; set; }

        /// <summary>
        /// Whether Quantity Increments is enabled
        /// </summary>
        /// <value>Whether Quantity Increments is enabled</value>
        [DataMember(Name="enable_qty_increments")]
        public bool? EnableQtyIncrements { get; set; }

        /// <summary>
        /// Gets or Sets UseConfigManageStock
        /// </summary>
        [DataMember(Name="use_config_manage_stock")]
        public bool? UseConfigManageStock { get; set; }

        /// <summary>
        /// Can Manage Stock
        /// </summary>
        /// <value>Can Manage Stock</value>
        [DataMember(Name="manage_stock")]
        public bool? ManageStock { get; set; }

        /// <summary>
        /// Gets or Sets LowStockDate
        /// </summary>
        [DataMember(Name="low_stock_date")]
        public string LowStockDate { get; set; }

        /// <summary>
        /// Gets or Sets IsDecimalDivided
        /// </summary>
        [DataMember(Name="is_decimal_divided")]
        public bool? IsDecimalDivided { get; set; }

        /// <summary>
        /// Gets or Sets StockStatusChangedAuto
        /// </summary>
        [DataMember(Name="stock_status_changed_auto")]
        public int? StockStatusChangedAuto { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogInventoryDataStockItemInterface {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  StockId: ").Append(StockId).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  IsInStock: ").Append(IsInStock).Append("\n");
            sb.Append("  IsQtyDecimal: ").Append(IsQtyDecimal).Append("\n");
            sb.Append("  ShowDefaultNotificationMessage: ").Append(ShowDefaultNotificationMessage).Append("\n");
            sb.Append("  UseConfigMinQty: ").Append(UseConfigMinQty).Append("\n");
            sb.Append("  MinQty: ").Append(MinQty).Append("\n");
            sb.Append("  UseConfigMinSaleQty: ").Append(UseConfigMinSaleQty).Append("\n");
            sb.Append("  MinSaleQty: ").Append(MinSaleQty).Append("\n");
            sb.Append("  UseConfigMaxSaleQty: ").Append(UseConfigMaxSaleQty).Append("\n");
            sb.Append("  MaxSaleQty: ").Append(MaxSaleQty).Append("\n");
            sb.Append("  UseConfigBackorders: ").Append(UseConfigBackorders).Append("\n");
            sb.Append("  Backorders: ").Append(Backorders).Append("\n");
            sb.Append("  UseConfigNotifyStockQty: ").Append(UseConfigNotifyStockQty).Append("\n");
            sb.Append("  NotifyStockQty: ").Append(NotifyStockQty).Append("\n");
            sb.Append("  UseConfigQtyIncrements: ").Append(UseConfigQtyIncrements).Append("\n");
            sb.Append("  QtyIncrements: ").Append(QtyIncrements).Append("\n");
            sb.Append("  UseConfigEnableQtyInc: ").Append(UseConfigEnableQtyInc).Append("\n");
            sb.Append("  EnableQtyIncrements: ").Append(EnableQtyIncrements).Append("\n");
            sb.Append("  UseConfigManageStock: ").Append(UseConfigManageStock).Append("\n");
            sb.Append("  ManageStock: ").Append(ManageStock).Append("\n");
            sb.Append("  LowStockDate: ").Append(LowStockDate).Append("\n");
            sb.Append("  IsDecimalDivided: ").Append(IsDecimalDivided).Append("\n");
            sb.Append("  StockStatusChangedAuto: ").Append(StockStatusChangedAuto).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CatalogInventoryDataStockItemInterface)obj);
        }

        /// <summary>
        /// Returns true if CatalogInventoryDataStockItemInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogInventoryDataStockItemInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogInventoryDataStockItemInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ItemId == other.ItemId ||
                    this.ItemId != null &&
                    this.ItemId.Equals(other.ItemId)
                ) && 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.StockId == other.StockId ||
                    this.StockId != null &&
                    this.StockId.Equals(other.StockId)
                ) && 
                (
                    this.Qty == other.Qty ||
                    this.Qty != null &&
                    this.Qty.Equals(other.Qty)
                ) && 
                (
                    this.IsInStock == other.IsInStock ||
                    this.IsInStock != null &&
                    this.IsInStock.Equals(other.IsInStock)
                ) && 
                (
                    this.IsQtyDecimal == other.IsQtyDecimal ||
                    this.IsQtyDecimal != null &&
                    this.IsQtyDecimal.Equals(other.IsQtyDecimal)
                ) && 
                (
                    this.ShowDefaultNotificationMessage == other.ShowDefaultNotificationMessage ||
                    this.ShowDefaultNotificationMessage != null &&
                    this.ShowDefaultNotificationMessage.Equals(other.ShowDefaultNotificationMessage)
                ) && 
                (
                    this.UseConfigMinQty == other.UseConfigMinQty ||
                    this.UseConfigMinQty != null &&
                    this.UseConfigMinQty.Equals(other.UseConfigMinQty)
                ) && 
                (
                    this.MinQty == other.MinQty ||
                    this.MinQty != null &&
                    this.MinQty.Equals(other.MinQty)
                ) && 
                (
                    this.UseConfigMinSaleQty == other.UseConfigMinSaleQty ||
                    this.UseConfigMinSaleQty != null &&
                    this.UseConfigMinSaleQty.Equals(other.UseConfigMinSaleQty)
                ) && 
                (
                    this.MinSaleQty == other.MinSaleQty ||
                    this.MinSaleQty != null &&
                    this.MinSaleQty.Equals(other.MinSaleQty)
                ) && 
                (
                    this.UseConfigMaxSaleQty == other.UseConfigMaxSaleQty ||
                    this.UseConfigMaxSaleQty != null &&
                    this.UseConfigMaxSaleQty.Equals(other.UseConfigMaxSaleQty)
                ) && 
                (
                    this.MaxSaleQty == other.MaxSaleQty ||
                    this.MaxSaleQty != null &&
                    this.MaxSaleQty.Equals(other.MaxSaleQty)
                ) && 
                (
                    this.UseConfigBackorders == other.UseConfigBackorders ||
                    this.UseConfigBackorders != null &&
                    this.UseConfigBackorders.Equals(other.UseConfigBackorders)
                ) && 
                (
                    this.Backorders == other.Backorders ||
                    this.Backorders != null &&
                    this.Backorders.Equals(other.Backorders)
                ) && 
                (
                    this.UseConfigNotifyStockQty == other.UseConfigNotifyStockQty ||
                    this.UseConfigNotifyStockQty != null &&
                    this.UseConfigNotifyStockQty.Equals(other.UseConfigNotifyStockQty)
                ) && 
                (
                    this.NotifyStockQty == other.NotifyStockQty ||
                    this.NotifyStockQty != null &&
                    this.NotifyStockQty.Equals(other.NotifyStockQty)
                ) && 
                (
                    this.UseConfigQtyIncrements == other.UseConfigQtyIncrements ||
                    this.UseConfigQtyIncrements != null &&
                    this.UseConfigQtyIncrements.Equals(other.UseConfigQtyIncrements)
                ) && 
                (
                    this.QtyIncrements == other.QtyIncrements ||
                    this.QtyIncrements != null &&
                    this.QtyIncrements.Equals(other.QtyIncrements)
                ) && 
                (
                    this.UseConfigEnableQtyInc == other.UseConfigEnableQtyInc ||
                    this.UseConfigEnableQtyInc != null &&
                    this.UseConfigEnableQtyInc.Equals(other.UseConfigEnableQtyInc)
                ) && 
                (
                    this.EnableQtyIncrements == other.EnableQtyIncrements ||
                    this.EnableQtyIncrements != null &&
                    this.EnableQtyIncrements.Equals(other.EnableQtyIncrements)
                ) && 
                (
                    this.UseConfigManageStock == other.UseConfigManageStock ||
                    this.UseConfigManageStock != null &&
                    this.UseConfigManageStock.Equals(other.UseConfigManageStock)
                ) && 
                (
                    this.ManageStock == other.ManageStock ||
                    this.ManageStock != null &&
                    this.ManageStock.Equals(other.ManageStock)
                ) && 
                (
                    this.LowStockDate == other.LowStockDate ||
                    this.LowStockDate != null &&
                    this.LowStockDate.Equals(other.LowStockDate)
                ) && 
                (
                    this.IsDecimalDivided == other.IsDecimalDivided ||
                    this.IsDecimalDivided != null &&
                    this.IsDecimalDivided.Equals(other.IsDecimalDivided)
                ) && 
                (
                    this.StockStatusChangedAuto == other.StockStatusChangedAuto ||
                    this.StockStatusChangedAuto != null &&
                    this.StockStatusChangedAuto.Equals(other.StockStatusChangedAuto)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ItemId != null)
                    hash = hash * 59 + this.ItemId.GetHashCode();
                    if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                    if (this.StockId != null)
                    hash = hash * 59 + this.StockId.GetHashCode();
                    if (this.Qty != null)
                    hash = hash * 59 + this.Qty.GetHashCode();
                    if (this.IsInStock != null)
                    hash = hash * 59 + this.IsInStock.GetHashCode();
                    if (this.IsQtyDecimal != null)
                    hash = hash * 59 + this.IsQtyDecimal.GetHashCode();
                    if (this.ShowDefaultNotificationMessage != null)
                    hash = hash * 59 + this.ShowDefaultNotificationMessage.GetHashCode();
                    if (this.UseConfigMinQty != null)
                    hash = hash * 59 + this.UseConfigMinQty.GetHashCode();
                    if (this.MinQty != null)
                    hash = hash * 59 + this.MinQty.GetHashCode();
                    if (this.UseConfigMinSaleQty != null)
                    hash = hash * 59 + this.UseConfigMinSaleQty.GetHashCode();
                    if (this.MinSaleQty != null)
                    hash = hash * 59 + this.MinSaleQty.GetHashCode();
                    if (this.UseConfigMaxSaleQty != null)
                    hash = hash * 59 + this.UseConfigMaxSaleQty.GetHashCode();
                    if (this.MaxSaleQty != null)
                    hash = hash * 59 + this.MaxSaleQty.GetHashCode();
                    if (this.UseConfigBackorders != null)
                    hash = hash * 59 + this.UseConfigBackorders.GetHashCode();
                    if (this.Backorders != null)
                    hash = hash * 59 + this.Backorders.GetHashCode();
                    if (this.UseConfigNotifyStockQty != null)
                    hash = hash * 59 + this.UseConfigNotifyStockQty.GetHashCode();
                    if (this.NotifyStockQty != null)
                    hash = hash * 59 + this.NotifyStockQty.GetHashCode();
                    if (this.UseConfigQtyIncrements != null)
                    hash = hash * 59 + this.UseConfigQtyIncrements.GetHashCode();
                    if (this.QtyIncrements != null)
                    hash = hash * 59 + this.QtyIncrements.GetHashCode();
                    if (this.UseConfigEnableQtyInc != null)
                    hash = hash * 59 + this.UseConfigEnableQtyInc.GetHashCode();
                    if (this.EnableQtyIncrements != null)
                    hash = hash * 59 + this.EnableQtyIncrements.GetHashCode();
                    if (this.UseConfigManageStock != null)
                    hash = hash * 59 + this.UseConfigManageStock.GetHashCode();
                    if (this.ManageStock != null)
                    hash = hash * 59 + this.ManageStock.GetHashCode();
                    if (this.LowStockDate != null)
                    hash = hash * 59 + this.LowStockDate.GetHashCode();
                    if (this.IsDecimalDivided != null)
                    hash = hash * 59 + this.IsDecimalDivided.GetHashCode();
                    if (this.StockStatusChangedAuto != null)
                    hash = hash * 59 + this.StockStatusChangedAuto.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CatalogInventoryDataStockItemInterface left, CatalogInventoryDataStockItemInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogInventoryDataStockItemInterface left, CatalogInventoryDataStockItemInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
