/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Interface StockStatusInterface
    /// </summary>
    [DataContract]
    public partial class CatalogInventoryDataStockStatusInterface :  IEquatable<CatalogInventoryDataStockStatusInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogInventoryDataStockStatusInterface" /> class.
        /// </summary>
        /// <param name="ProductId">ProductId (required).</param>
        /// <param name="StockId">StockId (required).</param>
        /// <param name="Qty">Qty (required).</param>
        /// <param name="StockStatus">StockStatus (required).</param>
        /// <param name="StockItem">StockItem (required).</param>
        public CatalogInventoryDataStockStatusInterface(int? ProductId = null, int? StockId = null, int? Qty = null, int? StockStatus = null, CatalogInventoryDataStockItemInterface StockItem = null)
        {
            // to ensure "ProductId" is required (not null)
            if (ProductId == null)
            {
                throw new InvalidDataException("ProductId is a required property for CatalogInventoryDataStockStatusInterface and cannot be null");
            }
            else
            {
                this.ProductId = ProductId;
            }
            // to ensure "StockId" is required (not null)
            if (StockId == null)
            {
                throw new InvalidDataException("StockId is a required property for CatalogInventoryDataStockStatusInterface and cannot be null");
            }
            else
            {
                this.StockId = StockId;
            }
            // to ensure "Qty" is required (not null)
            if (Qty == null)
            {
                throw new InvalidDataException("Qty is a required property for CatalogInventoryDataStockStatusInterface and cannot be null");
            }
            else
            {
                this.Qty = Qty;
            }
            // to ensure "StockStatus" is required (not null)
            if (StockStatus == null)
            {
                throw new InvalidDataException("StockStatus is a required property for CatalogInventoryDataStockStatusInterface and cannot be null");
            }
            else
            {
                this.StockStatus = StockStatus;
            }
            // to ensure "StockItem" is required (not null)
            if (StockItem == null)
            {
                throw new InvalidDataException("StockItem is a required property for CatalogInventoryDataStockStatusInterface and cannot be null");
            }
            else
            {
                this.StockItem = StockItem;
            }
            
        }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="product_id")]
        public int? ProductId { get; set; }

        /// <summary>
        /// Gets or Sets StockId
        /// </summary>
        [DataMember(Name="stock_id")]
        public int? StockId { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name="qty")]
        public int? Qty { get; set; }

        /// <summary>
        /// Gets or Sets StockStatus
        /// </summary>
        [DataMember(Name="stock_status")]
        public int? StockStatus { get; set; }

        /// <summary>
        /// Gets or Sets StockItem
        /// </summary>
        [DataMember(Name="stock_item")]
        public CatalogInventoryDataStockItemInterface StockItem { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogInventoryDataStockStatusInterface {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  StockId: ").Append(StockId).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  StockStatus: ").Append(StockStatus).Append("\n");
            sb.Append("  StockItem: ").Append(StockItem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CatalogInventoryDataStockStatusInterface)obj);
        }

        /// <summary>
        /// Returns true if CatalogInventoryDataStockStatusInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogInventoryDataStockStatusInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogInventoryDataStockStatusInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                ) && 
                (
                    this.StockId == other.StockId ||
                    this.StockId != null &&
                    this.StockId.Equals(other.StockId)
                ) && 
                (
                    this.Qty == other.Qty ||
                    this.Qty != null &&
                    this.Qty.Equals(other.Qty)
                ) && 
                (
                    this.StockStatus == other.StockStatus ||
                    this.StockStatus != null &&
                    this.StockStatus.Equals(other.StockStatus)
                ) && 
                (
                    this.StockItem == other.StockItem ||
                    this.StockItem != null &&
                    this.StockItem.Equals(other.StockItem)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                    if (this.StockId != null)
                    hash = hash * 59 + this.StockId.GetHashCode();
                    if (this.Qty != null)
                    hash = hash * 59 + this.Qty.GetHashCode();
                    if (this.StockStatus != null)
                    hash = hash * 59 + this.StockStatus.GetHashCode();
                    if (this.StockItem != null)
                    hash = hash * 59 + this.StockItem.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CatalogInventoryDataStockStatusInterface left, CatalogInventoryDataStockStatusInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogInventoryDataStockStatusInterface left, CatalogInventoryDataStockStatusInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
