/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Interface StockStatusCriteriaInterface
    /// </summary>
    [DataContract]
    public partial class CatalogInventoryStockStatusCriteriaInterface :  IEquatable<CatalogInventoryStockStatusCriteriaInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogInventoryStockStatusCriteriaInterface" /> class.
        /// </summary>
        /// <param name="MapperInterfaceName">Associated Mapper Interface name (required).</param>
        /// <param name="CriteriaList">Criteria objects added to current Composite Criteria (required).</param>
        /// <param name="Filters">List of filters (required).</param>
        /// <param name="Orders">Ordering criteria (required).</param>
        /// <param name="Limit">Limit (required).</param>
        public CatalogInventoryStockStatusCriteriaInterface(string MapperInterfaceName = null, List<FrameworkCriteriaInterface> CriteriaList = null, List<string> Filters = null, List<string> Orders = null, List<string> Limit = null)
        {
            // to ensure "MapperInterfaceName" is required (not null)
            if (MapperInterfaceName == null)
            {
                throw new InvalidDataException("MapperInterfaceName is a required property for CatalogInventoryStockStatusCriteriaInterface and cannot be null");
            }
            else
            {
                this.MapperInterfaceName = MapperInterfaceName;
            }
            // to ensure "CriteriaList" is required (not null)
            if (CriteriaList == null)
            {
                throw new InvalidDataException("CriteriaList is a required property for CatalogInventoryStockStatusCriteriaInterface and cannot be null");
            }
            else
            {
                this.CriteriaList = CriteriaList;
            }
            // to ensure "Filters" is required (not null)
            if (Filters == null)
            {
                throw new InvalidDataException("Filters is a required property for CatalogInventoryStockStatusCriteriaInterface and cannot be null");
            }
            else
            {
                this.Filters = Filters;
            }
            // to ensure "Orders" is required (not null)
            if (Orders == null)
            {
                throw new InvalidDataException("Orders is a required property for CatalogInventoryStockStatusCriteriaInterface and cannot be null");
            }
            else
            {
                this.Orders = Orders;
            }
            // to ensure "Limit" is required (not null)
            if (Limit == null)
            {
                throw new InvalidDataException("Limit is a required property for CatalogInventoryStockStatusCriteriaInterface and cannot be null");
            }
            else
            {
                this.Limit = Limit;
            }
            
        }

        /// <summary>
        /// Associated Mapper Interface name
        /// </summary>
        /// <value>Associated Mapper Interface name</value>
        [DataMember(Name="mapper_interface_name")]
        public string MapperInterfaceName { get; set; }

        /// <summary>
        /// Criteria objects added to current Composite Criteria
        /// </summary>
        /// <value>Criteria objects added to current Composite Criteria</value>
        [DataMember(Name="criteria_list")]
        public List<FrameworkCriteriaInterface> CriteriaList { get; set; }

        /// <summary>
        /// List of filters
        /// </summary>
        /// <value>List of filters</value>
        [DataMember(Name="filters")]
        public List<string> Filters { get; set; }

        /// <summary>
        /// Ordering criteria
        /// </summary>
        /// <value>Ordering criteria</value>
        [DataMember(Name="orders")]
        public List<string> Orders { get; set; }

        /// <summary>
        /// Limit
        /// </summary>
        /// <value>Limit</value>
        [DataMember(Name="limit")]
        public List<string> Limit { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogInventoryStockStatusCriteriaInterface {\n");
            sb.Append("  MapperInterfaceName: ").Append(MapperInterfaceName).Append("\n");
            sb.Append("  CriteriaList: ").Append(CriteriaList).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CatalogInventoryStockStatusCriteriaInterface)obj);
        }

        /// <summary>
        /// Returns true if CatalogInventoryStockStatusCriteriaInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogInventoryStockStatusCriteriaInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogInventoryStockStatusCriteriaInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.MapperInterfaceName == other.MapperInterfaceName ||
                    this.MapperInterfaceName != null &&
                    this.MapperInterfaceName.Equals(other.MapperInterfaceName)
                ) && 
                (
                    this.CriteriaList == other.CriteriaList ||
                    this.CriteriaList != null &&
                    this.CriteriaList.SequenceEqual(other.CriteriaList)
                ) && 
                (
                    this.Filters == other.Filters ||
                    this.Filters != null &&
                    this.Filters.SequenceEqual(other.Filters)
                ) && 
                (
                    this.Orders == other.Orders ||
                    this.Orders != null &&
                    this.Orders.SequenceEqual(other.Orders)
                ) && 
                (
                    this.Limit == other.Limit ||
                    this.Limit != null &&
                    this.Limit.SequenceEqual(other.Limit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.MapperInterfaceName != null)
                    hash = hash * 59 + this.MapperInterfaceName.GetHashCode();
                    if (this.CriteriaList != null)
                    hash = hash * 59 + this.CriteriaList.GetHashCode();
                    if (this.Filters != null)
                    hash = hash * 59 + this.Filters.GetHashCode();
                    if (this.Orders != null)
                    hash = hash * 59 + this.Orders.GetHashCode();
                    if (this.Limit != null)
                    hash = hash * 59 + this.Limit.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CatalogInventoryStockStatusCriteriaInterface left, CatalogInventoryStockStatusCriteriaInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogInventoryStockStatusCriteriaInterface left, CatalogInventoryStockStatusCriteriaInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
