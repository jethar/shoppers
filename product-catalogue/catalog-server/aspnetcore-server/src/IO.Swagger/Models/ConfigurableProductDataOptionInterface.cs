/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Interface OptionInterface
    /// </summary>
    [DataContract]
    public partial class ConfigurableProductDataOptionInterface :  IEquatable<ConfigurableProductDataOptionInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurableProductDataOptionInterface" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="AttributeId">AttributeId.</param>
        /// <param name="Label">Label.</param>
        /// <param name="Position">Position.</param>
        /// <param name="IsUseDefault">IsUseDefault.</param>
        /// <param name="Values">Values.</param>
        /// <param name="ProductId">ProductId.</param>
        public ConfigurableProductDataOptionInterface(int? Id = null, string AttributeId = null, string Label = null, int? Position = null, bool? IsUseDefault = null, List<ConfigurableProductDataOptionValueInterface> Values = null, int? ProductId = null)
        {
            this.Id = Id;
            this.AttributeId = AttributeId;
            this.Label = Label;
            this.Position = Position;
            this.IsUseDefault = IsUseDefault;
            this.Values = Values;
            this.ProductId = ProductId;
            
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets AttributeId
        /// </summary>
        [DataMember(Name="attribute_id")]
        public string AttributeId { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position")]
        public int? Position { get; set; }

        /// <summary>
        /// Gets or Sets IsUseDefault
        /// </summary>
        [DataMember(Name="is_use_default")]
        public bool? IsUseDefault { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values")]
        public List<ConfigurableProductDataOptionValueInterface> Values { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="product_id")]
        public int? ProductId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurableProductDataOptionInterface {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttributeId: ").Append(AttributeId).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  IsUseDefault: ").Append(IsUseDefault).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ConfigurableProductDataOptionInterface)obj);
        }

        /// <summary>
        /// Returns true if ConfigurableProductDataOptionInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of ConfigurableProductDataOptionInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurableProductDataOptionInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AttributeId == other.AttributeId ||
                    this.AttributeId != null &&
                    this.AttributeId.Equals(other.AttributeId)
                ) && 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.IsUseDefault == other.IsUseDefault ||
                    this.IsUseDefault != null &&
                    this.IsUseDefault.Equals(other.IsUseDefault)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                ) && 
                (
                    this.ProductId == other.ProductId ||
                    this.ProductId != null &&
                    this.ProductId.Equals(other.ProductId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.AttributeId != null)
                    hash = hash * 59 + this.AttributeId.GetHashCode();
                    if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                    if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                    if (this.IsUseDefault != null)
                    hash = hash * 59 + this.IsUseDefault.GetHashCode();
                    if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                    if (this.ProductId != null)
                    hash = hash * 59 + this.ProductId.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(ConfigurableProductDataOptionInterface left, ConfigurableProductDataOptionInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConfigurableProductDataOptionInterface left, ConfigurableProductDataOptionInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
