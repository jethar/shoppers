/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Image Content data interface
    /// </summary>
    [DataContract]
    public partial class FrameworkDataImageContentInterface :  IEquatable<FrameworkDataImageContentInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FrameworkDataImageContentInterface" /> class.
        /// </summary>
        /// <param name="Base64EncodedData">Media data (base64 encoded content) (required).</param>
        /// <param name="Type">MIME type (required).</param>
        /// <param name="Name">Image name (required).</param>
        public FrameworkDataImageContentInterface(string Base64EncodedData = null, string Type = null, string Name = null)
        {
            // to ensure "Base64EncodedData" is required (not null)
            if (Base64EncodedData == null)
            {
                throw new InvalidDataException("Base64EncodedData is a required property for FrameworkDataImageContentInterface and cannot be null");
            }
            else
            {
                this.Base64EncodedData = Base64EncodedData;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for FrameworkDataImageContentInterface and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for FrameworkDataImageContentInterface and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            
        }

        /// <summary>
        /// Media data (base64 encoded content)
        /// </summary>
        /// <value>Media data (base64 encoded content)</value>
        [DataMember(Name="base64_encoded_data")]
        public string Base64EncodedData { get; set; }

        /// <summary>
        /// MIME type
        /// </summary>
        /// <value>MIME type</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Image name
        /// </summary>
        /// <value>Image name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FrameworkDataImageContentInterface {\n");
            sb.Append("  Base64EncodedData: ").Append(Base64EncodedData).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((FrameworkDataImageContentInterface)obj);
        }

        /// <summary>
        /// Returns true if FrameworkDataImageContentInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of FrameworkDataImageContentInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FrameworkDataImageContentInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Base64EncodedData == other.Base64EncodedData ||
                    this.Base64EncodedData != null &&
                    this.Base64EncodedData.Equals(other.Base64EncodedData)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Base64EncodedData != null)
                    hash = hash * 59 + this.Base64EncodedData.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(FrameworkDataImageContentInterface left, FrameworkDataImageContentInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FrameworkDataImageContentInterface left, FrameworkDataImageContentInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
