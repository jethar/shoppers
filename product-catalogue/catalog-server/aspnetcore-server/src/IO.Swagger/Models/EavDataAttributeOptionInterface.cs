/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Created from:
    /// </summary>
    [DataContract]
    public partial class EavDataAttributeOptionInterface :  IEquatable<EavDataAttributeOptionInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EavDataAttributeOptionInterface" /> class.
        /// </summary>
        /// <param name="Label">Option label (required).</param>
        /// <param name="Value">Option value (required).</param>
        /// <param name="SortOrder">Option order.</param>
        /// <param name="IsDefault">Default.</param>
        /// <param name="StoreLabels">Option label for store scopes.</param>
        public EavDataAttributeOptionInterface(string Label = null, string Value = null, int? SortOrder = null, bool? IsDefault = null, List<EavDataAttributeOptionLabelInterface> StoreLabels = null)
        {
            // to ensure "Label" is required (not null)
            if (Label == null)
            {
                throw new InvalidDataException("Label is a required property for EavDataAttributeOptionInterface and cannot be null");
            }
            else
            {
                this.Label = Label;
            }
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for EavDataAttributeOptionInterface and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            this.SortOrder = SortOrder;
            this.IsDefault = IsDefault;
            this.StoreLabels = StoreLabels;
            
        }

        /// <summary>
        /// Option label
        /// </summary>
        /// <value>Option label</value>
        [DataMember(Name="label")]
        public string Label { get; set; }

        /// <summary>
        /// Option value
        /// </summary>
        /// <value>Option value</value>
        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// Option order
        /// </summary>
        /// <value>Option order</value>
        [DataMember(Name="sort_order")]
        public int? SortOrder { get; set; }

        /// <summary>
        /// Default
        /// </summary>
        /// <value>Default</value>
        [DataMember(Name="is_default")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Option label for store scopes
        /// </summary>
        /// <value>Option label for store scopes</value>
        [DataMember(Name="store_labels")]
        public List<EavDataAttributeOptionLabelInterface> StoreLabels { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EavDataAttributeOptionInterface {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  StoreLabels: ").Append(StoreLabels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((EavDataAttributeOptionInterface)obj);
        }

        /// <summary>
        /// Returns true if EavDataAttributeOptionInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of EavDataAttributeOptionInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EavDataAttributeOptionInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Label == other.Label ||
                    this.Label != null &&
                    this.Label.Equals(other.Label)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.SortOrder == other.SortOrder ||
                    this.SortOrder != null &&
                    this.SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    this.StoreLabels == other.StoreLabels ||
                    this.StoreLabels != null &&
                    this.StoreLabels.SequenceEqual(other.StoreLabels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Label != null)
                    hash = hash * 59 + this.Label.GetHashCode();
                    if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                    if (this.SortOrder != null)
                    hash = hash * 59 + this.SortOrder.GetHashCode();
                    if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                    if (this.StoreLabels != null)
                    hash = hash * 59 + this.StoreLabels.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(EavDataAttributeOptionInterface left, EavDataAttributeOptionInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EavDataAttributeOptionInterface left, EavDataAttributeOptionInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
