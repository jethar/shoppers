/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogDataProductLinkInterface :  IEquatable<CatalogDataProductLinkInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogDataProductLinkInterface" /> class.
        /// </summary>
        /// <param name="Sku">SKU (required).</param>
        /// <param name="LinkType">Link type (required).</param>
        /// <param name="LinkedProductSku">Linked product sku (required).</param>
        /// <param name="LinkedProductType">Linked product type (simple, virtual, etc) (required).</param>
        /// <param name="Position">Linked item position (required).</param>
        public CatalogDataProductLinkInterface(string Sku = null, string LinkType = null, string LinkedProductSku = null, string LinkedProductType = null, int? Position = null)
        {
            // to ensure "Sku" is required (not null)
            if (Sku == null)
            {
                throw new InvalidDataException("Sku is a required property for CatalogDataProductLinkInterface and cannot be null");
            }
            else
            {
                this.Sku = Sku;
            }
            // to ensure "LinkType" is required (not null)
            if (LinkType == null)
            {
                throw new InvalidDataException("LinkType is a required property for CatalogDataProductLinkInterface and cannot be null");
            }
            else
            {
                this.LinkType = LinkType;
            }
            // to ensure "LinkedProductSku" is required (not null)
            if (LinkedProductSku == null)
            {
                throw new InvalidDataException("LinkedProductSku is a required property for CatalogDataProductLinkInterface and cannot be null");
            }
            else
            {
                this.LinkedProductSku = LinkedProductSku;
            }
            // to ensure "LinkedProductType" is required (not null)
            if (LinkedProductType == null)
            {
                throw new InvalidDataException("LinkedProductType is a required property for CatalogDataProductLinkInterface and cannot be null");
            }
            else
            {
                this.LinkedProductType = LinkedProductType;
            }
            // to ensure "Position" is required (not null)
            if (Position == null)
            {
                throw new InvalidDataException("Position is a required property for CatalogDataProductLinkInterface and cannot be null");
            }
            else
            {
                this.Position = Position;
            }
            
        }

        /// <summary>
        /// SKU
        /// </summary>
        /// <value>SKU</value>
        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Link type
        /// </summary>
        /// <value>Link type</value>
        [DataMember(Name="link_type")]
        public string LinkType { get; set; }

        /// <summary>
        /// Linked product sku
        /// </summary>
        /// <value>Linked product sku</value>
        [DataMember(Name="linked_product_sku")]
        public string LinkedProductSku { get; set; }

        /// <summary>
        /// Linked product type (simple, virtual, etc)
        /// </summary>
        /// <value>Linked product type (simple, virtual, etc)</value>
        [DataMember(Name="linked_product_type")]
        public string LinkedProductType { get; set; }

        /// <summary>
        /// Linked item position
        /// </summary>
        /// <value>Linked item position</value>
        [DataMember(Name="position")]
        public int? Position { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogDataProductLinkInterface {\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  LinkType: ").Append(LinkType).Append("\n");
            sb.Append("  LinkedProductSku: ").Append(LinkedProductSku).Append("\n");
            sb.Append("  LinkedProductType: ").Append(LinkedProductType).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CatalogDataProductLinkInterface)obj);
        }

        /// <summary>
        /// Returns true if CatalogDataProductLinkInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogDataProductLinkInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogDataProductLinkInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Sku == other.Sku ||
                    this.Sku != null &&
                    this.Sku.Equals(other.Sku)
                ) && 
                (
                    this.LinkType == other.LinkType ||
                    this.LinkType != null &&
                    this.LinkType.Equals(other.LinkType)
                ) && 
                (
                    this.LinkedProductSku == other.LinkedProductSku ||
                    this.LinkedProductSku != null &&
                    this.LinkedProductSku.Equals(other.LinkedProductSku)
                ) && 
                (
                    this.LinkedProductType == other.LinkedProductType ||
                    this.LinkedProductType != null &&
                    this.LinkedProductType.Equals(other.LinkedProductType)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Sku != null)
                    hash = hash * 59 + this.Sku.GetHashCode();
                    if (this.LinkType != null)
                    hash = hash * 59 + this.LinkType.GetHashCode();
                    if (this.LinkedProductSku != null)
                    hash = hash * 59 + this.LinkedProductSku.GetHashCode();
                    if (this.LinkedProductType != null)
                    hash = hash * 59 + this.LinkedProductType.GetHashCode();
                    if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CatalogDataProductLinkInterface left, CatalogDataProductLinkInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogDataProductLinkInterface left, CatalogDataProductLinkInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
