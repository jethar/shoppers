/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogDataCategoryAttributeInterface :  IEquatable<CatalogDataCategoryAttributeInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogDataCategoryAttributeInterface" /> class.
        /// </summary>
        /// <param name="IsWysiwygEnabled">WYSIWYG flag.</param>
        /// <param name="IsHtmlAllowedOnFront">The HTML tags are allowed on the frontend.</param>
        /// <param name="UsedForSortBy">It is used for sorting in product listing.</param>
        /// <param name="IsFilterable">It used in layered navigation.</param>
        /// <param name="IsFilterableInSearch">It is used in search results layered navigation.</param>
        /// <param name="IsUsedInGrid">It is used in catalog product grid.</param>
        /// <param name="IsVisibleInGrid">It is visible in catalog product grid.</param>
        /// <param name="IsFilterableInGrid">It is filterable in catalog product grid.</param>
        /// <param name="Position">Position.</param>
        /// <param name="ApplyTo">Apply to value for the element.</param>
        /// <param name="IsSearchable">The attribute can be used in Quick Search.</param>
        /// <param name="IsVisibleInAdvancedSearch">The attribute can be used in Advanced Search.</param>
        /// <param name="IsComparable">The attribute can be compared on the frontend.</param>
        /// <param name="IsUsedForPromoRules">The attribute can be used for promo rules.</param>
        /// <param name="IsVisibleOnFront">The attribute is visible on the frontend.</param>
        /// <param name="UsedInProductListing">The attribute can be used in product listing.</param>
        /// <param name="IsVisible">Attribute is visible on frontend..</param>
        /// <param name="Scope">Attribute scope.</param>
        /// <param name="AttributeId">Id of the attribute..</param>
        /// <param name="AttributeCode">Code of the attribute. (required).</param>
        /// <param name="FrontendInput">HTML for input element. (required).</param>
        /// <param name="EntityTypeId">Entity type id.</param>
        /// <param name="IsRequired">Attribute is required. (required).</param>
        /// <param name="Options">Options of the attribute (key &#x3D;&gt; value pairs for select).</param>
        /// <param name="IsUserDefined">Current attribute has been defined by a user..</param>
        /// <param name="DefaultFrontendLabel">Frontend label for default store.</param>
        /// <param name="FrontendLabels">Frontend label for each store (required).</param>
        /// <param name="Note">The note attribute for the element..</param>
        /// <param name="BackendType">Backend type..</param>
        /// <param name="BackendModel">Backend model.</param>
        /// <param name="SourceModel">Source model.</param>
        /// <param name="DefaultValue">Default value for the element..</param>
        /// <param name="IsUnique">This is a unique attribute.</param>
        /// <param name="FrontendClass">Frontend class of attribute.</param>
        /// <param name="ValidationRules">Validation rules..</param>
        /// <param name="CustomAttributes">Custom attributes values..</param>
        public CatalogDataCategoryAttributeInterface(bool? IsWysiwygEnabled = null, bool? IsHtmlAllowedOnFront = null, bool? UsedForSortBy = null, bool? IsFilterable = null, bool? IsFilterableInSearch = null, bool? IsUsedInGrid = null, bool? IsVisibleInGrid = null, bool? IsFilterableInGrid = null, int? Position = null, List<string> ApplyTo = null, string IsSearchable = null, string IsVisibleInAdvancedSearch = null, string IsComparable = null, string IsUsedForPromoRules = null, string IsVisibleOnFront = null, string UsedInProductListing = null, bool? IsVisible = null, string Scope = null, int? AttributeId = null, string AttributeCode = null, string FrontendInput = null, string EntityTypeId = null, bool? IsRequired = null, List<EavDataAttributeOptionInterface> Options = null, bool? IsUserDefined = null, string DefaultFrontendLabel = null, List<EavDataAttributeFrontendLabelInterface> FrontendLabels = null, string Note = null, string BackendType = null, string BackendModel = null, string SourceModel = null, string DefaultValue = null, string IsUnique = null, string FrontendClass = null, List<EavDataAttributeValidationRuleInterface> ValidationRules = null, List<FrameworkAttributeInterface> CustomAttributes = null)
        {
            // to ensure "AttributeCode" is required (not null)
            if (AttributeCode == null)
            {
                throw new InvalidDataException("AttributeCode is a required property for CatalogDataCategoryAttributeInterface and cannot be null");
            }
            else
            {
                this.AttributeCode = AttributeCode;
            }
            // to ensure "FrontendInput" is required (not null)
            if (FrontendInput == null)
            {
                throw new InvalidDataException("FrontendInput is a required property for CatalogDataCategoryAttributeInterface and cannot be null");
            }
            else
            {
                this.FrontendInput = FrontendInput;
            }
            // to ensure "IsRequired" is required (not null)
            if (IsRequired == null)
            {
                throw new InvalidDataException("IsRequired is a required property for CatalogDataCategoryAttributeInterface and cannot be null");
            }
            else
            {
                this.IsRequired = IsRequired;
            }
            // to ensure "FrontendLabels" is required (not null)
            if (FrontendLabels == null)
            {
                throw new InvalidDataException("FrontendLabels is a required property for CatalogDataCategoryAttributeInterface and cannot be null");
            }
            else
            {
                this.FrontendLabels = FrontendLabels;
            }
            this.IsWysiwygEnabled = IsWysiwygEnabled;
            this.IsHtmlAllowedOnFront = IsHtmlAllowedOnFront;
            this.UsedForSortBy = UsedForSortBy;
            this.IsFilterable = IsFilterable;
            this.IsFilterableInSearch = IsFilterableInSearch;
            this.IsUsedInGrid = IsUsedInGrid;
            this.IsVisibleInGrid = IsVisibleInGrid;
            this.IsFilterableInGrid = IsFilterableInGrid;
            this.Position = Position;
            this.ApplyTo = ApplyTo;
            this.IsSearchable = IsSearchable;
            this.IsVisibleInAdvancedSearch = IsVisibleInAdvancedSearch;
            this.IsComparable = IsComparable;
            this.IsUsedForPromoRules = IsUsedForPromoRules;
            this.IsVisibleOnFront = IsVisibleOnFront;
            this.UsedInProductListing = UsedInProductListing;
            this.IsVisible = IsVisible;
            this.Scope = Scope;
            this.AttributeId = AttributeId;
            this.EntityTypeId = EntityTypeId;
            this.Options = Options;
            this.IsUserDefined = IsUserDefined;
            this.DefaultFrontendLabel = DefaultFrontendLabel;
            this.Note = Note;
            this.BackendType = BackendType;
            this.BackendModel = BackendModel;
            this.SourceModel = SourceModel;
            this.DefaultValue = DefaultValue;
            this.IsUnique = IsUnique;
            this.FrontendClass = FrontendClass;
            this.ValidationRules = ValidationRules;
            this.CustomAttributes = CustomAttributes;
            
        }

        /// <summary>
        /// WYSIWYG flag
        /// </summary>
        /// <value>WYSIWYG flag</value>
        [DataMember(Name="is_wysiwyg_enabled")]
        public bool? IsWysiwygEnabled { get; set; }

        /// <summary>
        /// The HTML tags are allowed on the frontend
        /// </summary>
        /// <value>The HTML tags are allowed on the frontend</value>
        [DataMember(Name="is_html_allowed_on_front")]
        public bool? IsHtmlAllowedOnFront { get; set; }

        /// <summary>
        /// It is used for sorting in product listing
        /// </summary>
        /// <value>It is used for sorting in product listing</value>
        [DataMember(Name="used_for_sort_by")]
        public bool? UsedForSortBy { get; set; }

        /// <summary>
        /// It used in layered navigation
        /// </summary>
        /// <value>It used in layered navigation</value>
        [DataMember(Name="is_filterable")]
        public bool? IsFilterable { get; set; }

        /// <summary>
        /// It is used in search results layered navigation
        /// </summary>
        /// <value>It is used in search results layered navigation</value>
        [DataMember(Name="is_filterable_in_search")]
        public bool? IsFilterableInSearch { get; set; }

        /// <summary>
        /// It is used in catalog product grid
        /// </summary>
        /// <value>It is used in catalog product grid</value>
        [DataMember(Name="is_used_in_grid")]
        public bool? IsUsedInGrid { get; set; }

        /// <summary>
        /// It is visible in catalog product grid
        /// </summary>
        /// <value>It is visible in catalog product grid</value>
        [DataMember(Name="is_visible_in_grid")]
        public bool? IsVisibleInGrid { get; set; }

        /// <summary>
        /// It is filterable in catalog product grid
        /// </summary>
        /// <value>It is filterable in catalog product grid</value>
        [DataMember(Name="is_filterable_in_grid")]
        public bool? IsFilterableInGrid { get; set; }

        /// <summary>
        /// Position
        /// </summary>
        /// <value>Position</value>
        [DataMember(Name="position")]
        public int? Position { get; set; }

        /// <summary>
        /// Apply to value for the element
        /// </summary>
        /// <value>Apply to value for the element</value>
        [DataMember(Name="apply_to")]
        public List<string> ApplyTo { get; set; }

        /// <summary>
        /// The attribute can be used in Quick Search
        /// </summary>
        /// <value>The attribute can be used in Quick Search</value>
        [DataMember(Name="is_searchable")]
        public string IsSearchable { get; set; }

        /// <summary>
        /// The attribute can be used in Advanced Search
        /// </summary>
        /// <value>The attribute can be used in Advanced Search</value>
        [DataMember(Name="is_visible_in_advanced_search")]
        public string IsVisibleInAdvancedSearch { get; set; }

        /// <summary>
        /// The attribute can be compared on the frontend
        /// </summary>
        /// <value>The attribute can be compared on the frontend</value>
        [DataMember(Name="is_comparable")]
        public string IsComparable { get; set; }

        /// <summary>
        /// The attribute can be used for promo rules
        /// </summary>
        /// <value>The attribute can be used for promo rules</value>
        [DataMember(Name="is_used_for_promo_rules")]
        public string IsUsedForPromoRules { get; set; }

        /// <summary>
        /// The attribute is visible on the frontend
        /// </summary>
        /// <value>The attribute is visible on the frontend</value>
        [DataMember(Name="is_visible_on_front")]
        public string IsVisibleOnFront { get; set; }

        /// <summary>
        /// The attribute can be used in product listing
        /// </summary>
        /// <value>The attribute can be used in product listing</value>
        [DataMember(Name="used_in_product_listing")]
        public string UsedInProductListing { get; set; }

        /// <summary>
        /// Attribute is visible on frontend.
        /// </summary>
        /// <value>Attribute is visible on frontend.</value>
        [DataMember(Name="is_visible")]
        public bool? IsVisible { get; set; }

        /// <summary>
        /// Attribute scope
        /// </summary>
        /// <value>Attribute scope</value>
        [DataMember(Name="scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Id of the attribute.
        /// </summary>
        /// <value>Id of the attribute.</value>
        [DataMember(Name="attribute_id")]
        public int? AttributeId { get; set; }

        /// <summary>
        /// Code of the attribute.
        /// </summary>
        /// <value>Code of the attribute.</value>
        [DataMember(Name="attribute_code")]
        public string AttributeCode { get; set; }

        /// <summary>
        /// HTML for input element.
        /// </summary>
        /// <value>HTML for input element.</value>
        [DataMember(Name="frontend_input")]
        public string FrontendInput { get; set; }

        /// <summary>
        /// Entity type id
        /// </summary>
        /// <value>Entity type id</value>
        [DataMember(Name="entity_type_id")]
        public string EntityTypeId { get; set; }

        /// <summary>
        /// Attribute is required.
        /// </summary>
        /// <value>Attribute is required.</value>
        [DataMember(Name="is_required")]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Options of the attribute (key => value pairs for select)
        /// </summary>
        /// <value>Options of the attribute (key => value pairs for select)</value>
        [DataMember(Name="options")]
        public List<EavDataAttributeOptionInterface> Options { get; set; }

        /// <summary>
        /// Current attribute has been defined by a user.
        /// </summary>
        /// <value>Current attribute has been defined by a user.</value>
        [DataMember(Name="is_user_defined")]
        public bool? IsUserDefined { get; set; }

        /// <summary>
        /// Frontend label for default store
        /// </summary>
        /// <value>Frontend label for default store</value>
        [DataMember(Name="default_frontend_label")]
        public string DefaultFrontendLabel { get; set; }

        /// <summary>
        /// Frontend label for each store
        /// </summary>
        /// <value>Frontend label for each store</value>
        [DataMember(Name="frontend_labels")]
        public List<EavDataAttributeFrontendLabelInterface> FrontendLabels { get; set; }

        /// <summary>
        /// The note attribute for the element.
        /// </summary>
        /// <value>The note attribute for the element.</value>
        [DataMember(Name="note")]
        public string Note { get; set; }

        /// <summary>
        /// Backend type.
        /// </summary>
        /// <value>Backend type.</value>
        [DataMember(Name="backend_type")]
        public string BackendType { get; set; }

        /// <summary>
        /// Backend model
        /// </summary>
        /// <value>Backend model</value>
        [DataMember(Name="backend_model")]
        public string BackendModel { get; set; }

        /// <summary>
        /// Source model
        /// </summary>
        /// <value>Source model</value>
        [DataMember(Name="source_model")]
        public string SourceModel { get; set; }

        /// <summary>
        /// Default value for the element.
        /// </summary>
        /// <value>Default value for the element.</value>
        [DataMember(Name="default_value")]
        public string DefaultValue { get; set; }

        /// <summary>
        /// This is a unique attribute
        /// </summary>
        /// <value>This is a unique attribute</value>
        [DataMember(Name="is_unique")]
        public string IsUnique { get; set; }

        /// <summary>
        /// Frontend class of attribute
        /// </summary>
        /// <value>Frontend class of attribute</value>
        [DataMember(Name="frontend_class")]
        public string FrontendClass { get; set; }

        /// <summary>
        /// Validation rules.
        /// </summary>
        /// <value>Validation rules.</value>
        [DataMember(Name="validation_rules")]
        public List<EavDataAttributeValidationRuleInterface> ValidationRules { get; set; }

        /// <summary>
        /// Custom attributes values.
        /// </summary>
        /// <value>Custom attributes values.</value>
        [DataMember(Name="custom_attributes")]
        public List<FrameworkAttributeInterface> CustomAttributes { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogDataCategoryAttributeInterface {\n");
            sb.Append("  IsWysiwygEnabled: ").Append(IsWysiwygEnabled).Append("\n");
            sb.Append("  IsHtmlAllowedOnFront: ").Append(IsHtmlAllowedOnFront).Append("\n");
            sb.Append("  UsedForSortBy: ").Append(UsedForSortBy).Append("\n");
            sb.Append("  IsFilterable: ").Append(IsFilterable).Append("\n");
            sb.Append("  IsFilterableInSearch: ").Append(IsFilterableInSearch).Append("\n");
            sb.Append("  IsUsedInGrid: ").Append(IsUsedInGrid).Append("\n");
            sb.Append("  IsVisibleInGrid: ").Append(IsVisibleInGrid).Append("\n");
            sb.Append("  IsFilterableInGrid: ").Append(IsFilterableInGrid).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ApplyTo: ").Append(ApplyTo).Append("\n");
            sb.Append("  IsSearchable: ").Append(IsSearchable).Append("\n");
            sb.Append("  IsVisibleInAdvancedSearch: ").Append(IsVisibleInAdvancedSearch).Append("\n");
            sb.Append("  IsComparable: ").Append(IsComparable).Append("\n");
            sb.Append("  IsUsedForPromoRules: ").Append(IsUsedForPromoRules).Append("\n");
            sb.Append("  IsVisibleOnFront: ").Append(IsVisibleOnFront).Append("\n");
            sb.Append("  UsedInProductListing: ").Append(UsedInProductListing).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  AttributeId: ").Append(AttributeId).Append("\n");
            sb.Append("  AttributeCode: ").Append(AttributeCode).Append("\n");
            sb.Append("  FrontendInput: ").Append(FrontendInput).Append("\n");
            sb.Append("  EntityTypeId: ").Append(EntityTypeId).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  IsUserDefined: ").Append(IsUserDefined).Append("\n");
            sb.Append("  DefaultFrontendLabel: ").Append(DefaultFrontendLabel).Append("\n");
            sb.Append("  FrontendLabels: ").Append(FrontendLabels).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  BackendType: ").Append(BackendType).Append("\n");
            sb.Append("  BackendModel: ").Append(BackendModel).Append("\n");
            sb.Append("  SourceModel: ").Append(SourceModel).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  IsUnique: ").Append(IsUnique).Append("\n");
            sb.Append("  FrontendClass: ").Append(FrontendClass).Append("\n");
            sb.Append("  ValidationRules: ").Append(ValidationRules).Append("\n");
            sb.Append("  CustomAttributes: ").Append(CustomAttributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CatalogDataCategoryAttributeInterface)obj);
        }

        /// <summary>
        /// Returns true if CatalogDataCategoryAttributeInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogDataCategoryAttributeInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogDataCategoryAttributeInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.IsWysiwygEnabled == other.IsWysiwygEnabled ||
                    this.IsWysiwygEnabled != null &&
                    this.IsWysiwygEnabled.Equals(other.IsWysiwygEnabled)
                ) && 
                (
                    this.IsHtmlAllowedOnFront == other.IsHtmlAllowedOnFront ||
                    this.IsHtmlAllowedOnFront != null &&
                    this.IsHtmlAllowedOnFront.Equals(other.IsHtmlAllowedOnFront)
                ) && 
                (
                    this.UsedForSortBy == other.UsedForSortBy ||
                    this.UsedForSortBy != null &&
                    this.UsedForSortBy.Equals(other.UsedForSortBy)
                ) && 
                (
                    this.IsFilterable == other.IsFilterable ||
                    this.IsFilterable != null &&
                    this.IsFilterable.Equals(other.IsFilterable)
                ) && 
                (
                    this.IsFilterableInSearch == other.IsFilterableInSearch ||
                    this.IsFilterableInSearch != null &&
                    this.IsFilterableInSearch.Equals(other.IsFilterableInSearch)
                ) && 
                (
                    this.IsUsedInGrid == other.IsUsedInGrid ||
                    this.IsUsedInGrid != null &&
                    this.IsUsedInGrid.Equals(other.IsUsedInGrid)
                ) && 
                (
                    this.IsVisibleInGrid == other.IsVisibleInGrid ||
                    this.IsVisibleInGrid != null &&
                    this.IsVisibleInGrid.Equals(other.IsVisibleInGrid)
                ) && 
                (
                    this.IsFilterableInGrid == other.IsFilterableInGrid ||
                    this.IsFilterableInGrid != null &&
                    this.IsFilterableInGrid.Equals(other.IsFilterableInGrid)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.ApplyTo == other.ApplyTo ||
                    this.ApplyTo != null &&
                    this.ApplyTo.SequenceEqual(other.ApplyTo)
                ) && 
                (
                    this.IsSearchable == other.IsSearchable ||
                    this.IsSearchable != null &&
                    this.IsSearchable.Equals(other.IsSearchable)
                ) && 
                (
                    this.IsVisibleInAdvancedSearch == other.IsVisibleInAdvancedSearch ||
                    this.IsVisibleInAdvancedSearch != null &&
                    this.IsVisibleInAdvancedSearch.Equals(other.IsVisibleInAdvancedSearch)
                ) && 
                (
                    this.IsComparable == other.IsComparable ||
                    this.IsComparable != null &&
                    this.IsComparable.Equals(other.IsComparable)
                ) && 
                (
                    this.IsUsedForPromoRules == other.IsUsedForPromoRules ||
                    this.IsUsedForPromoRules != null &&
                    this.IsUsedForPromoRules.Equals(other.IsUsedForPromoRules)
                ) && 
                (
                    this.IsVisibleOnFront == other.IsVisibleOnFront ||
                    this.IsVisibleOnFront != null &&
                    this.IsVisibleOnFront.Equals(other.IsVisibleOnFront)
                ) && 
                (
                    this.UsedInProductListing == other.UsedInProductListing ||
                    this.UsedInProductListing != null &&
                    this.UsedInProductListing.Equals(other.UsedInProductListing)
                ) && 
                (
                    this.IsVisible == other.IsVisible ||
                    this.IsVisible != null &&
                    this.IsVisible.Equals(other.IsVisible)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                ) && 
                (
                    this.AttributeId == other.AttributeId ||
                    this.AttributeId != null &&
                    this.AttributeId.Equals(other.AttributeId)
                ) && 
                (
                    this.AttributeCode == other.AttributeCode ||
                    this.AttributeCode != null &&
                    this.AttributeCode.Equals(other.AttributeCode)
                ) && 
                (
                    this.FrontendInput == other.FrontendInput ||
                    this.FrontendInput != null &&
                    this.FrontendInput.Equals(other.FrontendInput)
                ) && 
                (
                    this.EntityTypeId == other.EntityTypeId ||
                    this.EntityTypeId != null &&
                    this.EntityTypeId.Equals(other.EntityTypeId)
                ) && 
                (
                    this.IsRequired == other.IsRequired ||
                    this.IsRequired != null &&
                    this.IsRequired.Equals(other.IsRequired)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                ) && 
                (
                    this.IsUserDefined == other.IsUserDefined ||
                    this.IsUserDefined != null &&
                    this.IsUserDefined.Equals(other.IsUserDefined)
                ) && 
                (
                    this.DefaultFrontendLabel == other.DefaultFrontendLabel ||
                    this.DefaultFrontendLabel != null &&
                    this.DefaultFrontendLabel.Equals(other.DefaultFrontendLabel)
                ) && 
                (
                    this.FrontendLabels == other.FrontendLabels ||
                    this.FrontendLabels != null &&
                    this.FrontendLabels.SequenceEqual(other.FrontendLabels)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.BackendType == other.BackendType ||
                    this.BackendType != null &&
                    this.BackendType.Equals(other.BackendType)
                ) && 
                (
                    this.BackendModel == other.BackendModel ||
                    this.BackendModel != null &&
                    this.BackendModel.Equals(other.BackendModel)
                ) && 
                (
                    this.SourceModel == other.SourceModel ||
                    this.SourceModel != null &&
                    this.SourceModel.Equals(other.SourceModel)
                ) && 
                (
                    this.DefaultValue == other.DefaultValue ||
                    this.DefaultValue != null &&
                    this.DefaultValue.Equals(other.DefaultValue)
                ) && 
                (
                    this.IsUnique == other.IsUnique ||
                    this.IsUnique != null &&
                    this.IsUnique.Equals(other.IsUnique)
                ) && 
                (
                    this.FrontendClass == other.FrontendClass ||
                    this.FrontendClass != null &&
                    this.FrontendClass.Equals(other.FrontendClass)
                ) && 
                (
                    this.ValidationRules == other.ValidationRules ||
                    this.ValidationRules != null &&
                    this.ValidationRules.SequenceEqual(other.ValidationRules)
                ) && 
                (
                    this.CustomAttributes == other.CustomAttributes ||
                    this.CustomAttributes != null &&
                    this.CustomAttributes.SequenceEqual(other.CustomAttributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.IsWysiwygEnabled != null)
                    hash = hash * 59 + this.IsWysiwygEnabled.GetHashCode();
                    if (this.IsHtmlAllowedOnFront != null)
                    hash = hash * 59 + this.IsHtmlAllowedOnFront.GetHashCode();
                    if (this.UsedForSortBy != null)
                    hash = hash * 59 + this.UsedForSortBy.GetHashCode();
                    if (this.IsFilterable != null)
                    hash = hash * 59 + this.IsFilterable.GetHashCode();
                    if (this.IsFilterableInSearch != null)
                    hash = hash * 59 + this.IsFilterableInSearch.GetHashCode();
                    if (this.IsUsedInGrid != null)
                    hash = hash * 59 + this.IsUsedInGrid.GetHashCode();
                    if (this.IsVisibleInGrid != null)
                    hash = hash * 59 + this.IsVisibleInGrid.GetHashCode();
                    if (this.IsFilterableInGrid != null)
                    hash = hash * 59 + this.IsFilterableInGrid.GetHashCode();
                    if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                    if (this.ApplyTo != null)
                    hash = hash * 59 + this.ApplyTo.GetHashCode();
                    if (this.IsSearchable != null)
                    hash = hash * 59 + this.IsSearchable.GetHashCode();
                    if (this.IsVisibleInAdvancedSearch != null)
                    hash = hash * 59 + this.IsVisibleInAdvancedSearch.GetHashCode();
                    if (this.IsComparable != null)
                    hash = hash * 59 + this.IsComparable.GetHashCode();
                    if (this.IsUsedForPromoRules != null)
                    hash = hash * 59 + this.IsUsedForPromoRules.GetHashCode();
                    if (this.IsVisibleOnFront != null)
                    hash = hash * 59 + this.IsVisibleOnFront.GetHashCode();
                    if (this.UsedInProductListing != null)
                    hash = hash * 59 + this.UsedInProductListing.GetHashCode();
                    if (this.IsVisible != null)
                    hash = hash * 59 + this.IsVisible.GetHashCode();
                    if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                    if (this.AttributeId != null)
                    hash = hash * 59 + this.AttributeId.GetHashCode();
                    if (this.AttributeCode != null)
                    hash = hash * 59 + this.AttributeCode.GetHashCode();
                    if (this.FrontendInput != null)
                    hash = hash * 59 + this.FrontendInput.GetHashCode();
                    if (this.EntityTypeId != null)
                    hash = hash * 59 + this.EntityTypeId.GetHashCode();
                    if (this.IsRequired != null)
                    hash = hash * 59 + this.IsRequired.GetHashCode();
                    if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                    if (this.IsUserDefined != null)
                    hash = hash * 59 + this.IsUserDefined.GetHashCode();
                    if (this.DefaultFrontendLabel != null)
                    hash = hash * 59 + this.DefaultFrontendLabel.GetHashCode();
                    if (this.FrontendLabels != null)
                    hash = hash * 59 + this.FrontendLabels.GetHashCode();
                    if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                    if (this.BackendType != null)
                    hash = hash * 59 + this.BackendType.GetHashCode();
                    if (this.BackendModel != null)
                    hash = hash * 59 + this.BackendModel.GetHashCode();
                    if (this.SourceModel != null)
                    hash = hash * 59 + this.SourceModel.GetHashCode();
                    if (this.DefaultValue != null)
                    hash = hash * 59 + this.DefaultValue.GetHashCode();
                    if (this.IsUnique != null)
                    hash = hash * 59 + this.IsUnique.GetHashCode();
                    if (this.FrontendClass != null)
                    hash = hash * 59 + this.FrontendClass.GetHashCode();
                    if (this.ValidationRules != null)
                    hash = hash * 59 + this.ValidationRules.GetHashCode();
                    if (this.CustomAttributes != null)
                    hash = hash * 59 + this.CustomAttributes.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CatalogDataCategoryAttributeInterface left, CatalogDataCategoryAttributeInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogDataCategoryAttributeInterface left, CatalogDataCategoryAttributeInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
