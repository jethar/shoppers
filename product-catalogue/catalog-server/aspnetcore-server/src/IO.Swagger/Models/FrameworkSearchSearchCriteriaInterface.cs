/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FrameworkSearchSearchCriteriaInterface :  IEquatable<FrameworkSearchSearchCriteriaInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FrameworkSearchSearchCriteriaInterface" /> class.
        /// </summary>
        /// <param name="RequestName">RequestName (required).</param>
        /// <param name="FilterGroups">A list of filter groups. (required).</param>
        /// <param name="SortOrders">Sort order..</param>
        /// <param name="PageSize">Page size..</param>
        /// <param name="CurrentPage">Current page..</param>
        public FrameworkSearchSearchCriteriaInterface(string RequestName = null, List<FrameworkSearchFilterGroup> FilterGroups = null, List<FrameworkSortOrder> SortOrders = null, int? PageSize = null, int? CurrentPage = null)
        {
            // to ensure "RequestName" is required (not null)
            if (RequestName == null)
            {
                throw new InvalidDataException("RequestName is a required property for FrameworkSearchSearchCriteriaInterface and cannot be null");
            }
            else
            {
                this.RequestName = RequestName;
            }
            // to ensure "FilterGroups" is required (not null)
            if (FilterGroups == null)
            {
                throw new InvalidDataException("FilterGroups is a required property for FrameworkSearchSearchCriteriaInterface and cannot be null");
            }
            else
            {
                this.FilterGroups = FilterGroups;
            }
            this.SortOrders = SortOrders;
            this.PageSize = PageSize;
            this.CurrentPage = CurrentPage;
            
        }

        /// <summary>
        /// Gets or Sets RequestName
        /// </summary>
        [DataMember(Name="request_name")]
        public string RequestName { get; set; }

        /// <summary>
        /// A list of filter groups.
        /// </summary>
        /// <value>A list of filter groups.</value>
        [DataMember(Name="filter_groups")]
        public List<FrameworkSearchFilterGroup> FilterGroups { get; set; }

        /// <summary>
        /// Sort order.
        /// </summary>
        /// <value>Sort order.</value>
        [DataMember(Name="sort_orders")]
        public List<FrameworkSortOrder> SortOrders { get; set; }

        /// <summary>
        /// Page size.
        /// </summary>
        /// <value>Page size.</value>
        [DataMember(Name="page_size")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Current page.
        /// </summary>
        /// <value>Current page.</value>
        [DataMember(Name="current_page")]
        public int? CurrentPage { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FrameworkSearchSearchCriteriaInterface {\n");
            sb.Append("  RequestName: ").Append(RequestName).Append("\n");
            sb.Append("  FilterGroups: ").Append(FilterGroups).Append("\n");
            sb.Append("  SortOrders: ").Append(SortOrders).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  CurrentPage: ").Append(CurrentPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((FrameworkSearchSearchCriteriaInterface)obj);
        }

        /// <summary>
        /// Returns true if FrameworkSearchSearchCriteriaInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of FrameworkSearchSearchCriteriaInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FrameworkSearchSearchCriteriaInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.RequestName == other.RequestName ||
                    this.RequestName != null &&
                    this.RequestName.Equals(other.RequestName)
                ) && 
                (
                    this.FilterGroups == other.FilterGroups ||
                    this.FilterGroups != null &&
                    this.FilterGroups.SequenceEqual(other.FilterGroups)
                ) && 
                (
                    this.SortOrders == other.SortOrders ||
                    this.SortOrders != null &&
                    this.SortOrders.SequenceEqual(other.SortOrders)
                ) && 
                (
                    this.PageSize == other.PageSize ||
                    this.PageSize != null &&
                    this.PageSize.Equals(other.PageSize)
                ) && 
                (
                    this.CurrentPage == other.CurrentPage ||
                    this.CurrentPage != null &&
                    this.CurrentPage.Equals(other.CurrentPage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.RequestName != null)
                    hash = hash * 59 + this.RequestName.GetHashCode();
                    if (this.FilterGroups != null)
                    hash = hash * 59 + this.FilterGroups.GetHashCode();
                    if (this.SortOrders != null)
                    hash = hash * 59 + this.SortOrders.GetHashCode();
                    if (this.PageSize != null)
                    hash = hash * 59 + this.PageSize.GetHashCode();
                    if (this.CurrentPage != null)
                    hash = hash * 59 + this.CurrentPage.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(FrameworkSearchSearchCriteriaInterface left, FrameworkSearchSearchCriteriaInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FrameworkSearchSearchCriteriaInterface left, FrameworkSearchSearchCriteriaInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
