/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DownloadableDataLinkInterface :  IEquatable<DownloadableDataLinkInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DownloadableDataLinkInterface" /> class.
        /// </summary>
        /// <param name="Id">Sample(or link) id.</param>
        /// <param name="Title">Title.</param>
        /// <param name="SortOrder">SortOrder (required).</param>
        /// <param name="IsShareable">Shareable status (required).</param>
        /// <param name="Price">Price (required).</param>
        /// <param name="NumberOfDownloads">Of downloads per user.</param>
        /// <param name="LinkType">LinkType (required).</param>
        /// <param name="LinkFile">relative file path.</param>
        /// <param name="LinkFileContent">LinkFileContent.</param>
        /// <param name="LinkUrl">Link url or null when type is &#39;file&#39;.</param>
        /// <param name="SampleType">SampleType (required).</param>
        /// <param name="SampleFile">relative file path.</param>
        /// <param name="SampleFileContent">SampleFileContent.</param>
        /// <param name="SampleUrl">file URL.</param>
        public DownloadableDataLinkInterface(int? Id = null, string Title = null, int? SortOrder = null, int? IsShareable = null, decimal? Price = null, int? NumberOfDownloads = null, string LinkType = null, string LinkFile = null, DownloadableDataFileContentInterface LinkFileContent = null, string LinkUrl = null, string SampleType = null, string SampleFile = null, DownloadableDataFileContentInterface SampleFileContent = null, string SampleUrl = null)
        {
            // to ensure "SortOrder" is required (not null)
            if (SortOrder == null)
            {
                throw new InvalidDataException("SortOrder is a required property for DownloadableDataLinkInterface and cannot be null");
            }
            else
            {
                this.SortOrder = SortOrder;
            }
            // to ensure "IsShareable" is required (not null)
            if (IsShareable == null)
            {
                throw new InvalidDataException("IsShareable is a required property for DownloadableDataLinkInterface and cannot be null");
            }
            else
            {
                this.IsShareable = IsShareable;
            }
            // to ensure "Price" is required (not null)
            if (Price == null)
            {
                throw new InvalidDataException("Price is a required property for DownloadableDataLinkInterface and cannot be null");
            }
            else
            {
                this.Price = Price;
            }
            // to ensure "LinkType" is required (not null)
            if (LinkType == null)
            {
                throw new InvalidDataException("LinkType is a required property for DownloadableDataLinkInterface and cannot be null");
            }
            else
            {
                this.LinkType = LinkType;
            }
            // to ensure "SampleType" is required (not null)
            if (SampleType == null)
            {
                throw new InvalidDataException("SampleType is a required property for DownloadableDataLinkInterface and cannot be null");
            }
            else
            {
                this.SampleType = SampleType;
            }
            this.Id = Id;
            this.Title = Title;
            this.NumberOfDownloads = NumberOfDownloads;
            this.LinkFile = LinkFile;
            this.LinkFileContent = LinkFileContent;
            this.LinkUrl = LinkUrl;
            this.SampleFile = SampleFile;
            this.SampleFileContent = SampleFileContent;
            this.SampleUrl = SampleUrl;
            
        }

        /// <summary>
        /// Sample(or link) id
        /// </summary>
        /// <value>Sample(or link) id</value>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name="sort_order")]
        public int? SortOrder { get; set; }

        /// <summary>
        /// Shareable status
        /// </summary>
        /// <value>Shareable status</value>
        [DataMember(Name="is_shareable")]
        public int? IsShareable { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name="price")]
        public decimal? Price { get; set; }

        /// <summary>
        /// Of downloads per user
        /// </summary>
        /// <value>Of downloads per user</value>
        [DataMember(Name="number_of_downloads")]
        public int? NumberOfDownloads { get; set; }

        /// <summary>
        /// Gets or Sets LinkType
        /// </summary>
        [DataMember(Name="link_type")]
        public string LinkType { get; set; }

        /// <summary>
        /// relative file path
        /// </summary>
        /// <value>relative file path</value>
        [DataMember(Name="link_file")]
        public string LinkFile { get; set; }

        /// <summary>
        /// Gets or Sets LinkFileContent
        /// </summary>
        [DataMember(Name="link_file_content")]
        public DownloadableDataFileContentInterface LinkFileContent { get; set; }

        /// <summary>
        /// Link url or null when type is 'file'
        /// </summary>
        /// <value>Link url or null when type is 'file'</value>
        [DataMember(Name="link_url")]
        public string LinkUrl { get; set; }

        /// <summary>
        /// Gets or Sets SampleType
        /// </summary>
        [DataMember(Name="sample_type")]
        public string SampleType { get; set; }

        /// <summary>
        /// relative file path
        /// </summary>
        /// <value>relative file path</value>
        [DataMember(Name="sample_file")]
        public string SampleFile { get; set; }

        /// <summary>
        /// Gets or Sets SampleFileContent
        /// </summary>
        [DataMember(Name="sample_file_content")]
        public DownloadableDataFileContentInterface SampleFileContent { get; set; }

        /// <summary>
        /// file URL
        /// </summary>
        /// <value>file URL</value>
        [DataMember(Name="sample_url")]
        public string SampleUrl { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DownloadableDataLinkInterface {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  IsShareable: ").Append(IsShareable).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  NumberOfDownloads: ").Append(NumberOfDownloads).Append("\n");
            sb.Append("  LinkType: ").Append(LinkType).Append("\n");
            sb.Append("  LinkFile: ").Append(LinkFile).Append("\n");
            sb.Append("  LinkFileContent: ").Append(LinkFileContent).Append("\n");
            sb.Append("  LinkUrl: ").Append(LinkUrl).Append("\n");
            sb.Append("  SampleType: ").Append(SampleType).Append("\n");
            sb.Append("  SampleFile: ").Append(SampleFile).Append("\n");
            sb.Append("  SampleFileContent: ").Append(SampleFileContent).Append("\n");
            sb.Append("  SampleUrl: ").Append(SampleUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((DownloadableDataLinkInterface)obj);
        }

        /// <summary>
        /// Returns true if DownloadableDataLinkInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of DownloadableDataLinkInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DownloadableDataLinkInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.SortOrder == other.SortOrder ||
                    this.SortOrder != null &&
                    this.SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    this.IsShareable == other.IsShareable ||
                    this.IsShareable != null &&
                    this.IsShareable.Equals(other.IsShareable)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.NumberOfDownloads == other.NumberOfDownloads ||
                    this.NumberOfDownloads != null &&
                    this.NumberOfDownloads.Equals(other.NumberOfDownloads)
                ) && 
                (
                    this.LinkType == other.LinkType ||
                    this.LinkType != null &&
                    this.LinkType.Equals(other.LinkType)
                ) && 
                (
                    this.LinkFile == other.LinkFile ||
                    this.LinkFile != null &&
                    this.LinkFile.Equals(other.LinkFile)
                ) && 
                (
                    this.LinkFileContent == other.LinkFileContent ||
                    this.LinkFileContent != null &&
                    this.LinkFileContent.Equals(other.LinkFileContent)
                ) && 
                (
                    this.LinkUrl == other.LinkUrl ||
                    this.LinkUrl != null &&
                    this.LinkUrl.Equals(other.LinkUrl)
                ) && 
                (
                    this.SampleType == other.SampleType ||
                    this.SampleType != null &&
                    this.SampleType.Equals(other.SampleType)
                ) && 
                (
                    this.SampleFile == other.SampleFile ||
                    this.SampleFile != null &&
                    this.SampleFile.Equals(other.SampleFile)
                ) && 
                (
                    this.SampleFileContent == other.SampleFileContent ||
                    this.SampleFileContent != null &&
                    this.SampleFileContent.Equals(other.SampleFileContent)
                ) && 
                (
                    this.SampleUrl == other.SampleUrl ||
                    this.SampleUrl != null &&
                    this.SampleUrl.Equals(other.SampleUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                    if (this.SortOrder != null)
                    hash = hash * 59 + this.SortOrder.GetHashCode();
                    if (this.IsShareable != null)
                    hash = hash * 59 + this.IsShareable.GetHashCode();
                    if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                    if (this.NumberOfDownloads != null)
                    hash = hash * 59 + this.NumberOfDownloads.GetHashCode();
                    if (this.LinkType != null)
                    hash = hash * 59 + this.LinkType.GetHashCode();
                    if (this.LinkFile != null)
                    hash = hash * 59 + this.LinkFile.GetHashCode();
                    if (this.LinkFileContent != null)
                    hash = hash * 59 + this.LinkFileContent.GetHashCode();
                    if (this.LinkUrl != null)
                    hash = hash * 59 + this.LinkUrl.GetHashCode();
                    if (this.SampleType != null)
                    hash = hash * 59 + this.SampleType.GetHashCode();
                    if (this.SampleFile != null)
                    hash = hash * 59 + this.SampleFile.GetHashCode();
                    if (this.SampleFileContent != null)
                    hash = hash * 59 + this.SampleFileContent.GetHashCode();
                    if (this.SampleUrl != null)
                    hash = hash * 59 + this.SampleUrl.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(DownloadableDataLinkInterface left, DownloadableDataLinkInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DownloadableDataLinkInterface left, DownloadableDataLinkInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
