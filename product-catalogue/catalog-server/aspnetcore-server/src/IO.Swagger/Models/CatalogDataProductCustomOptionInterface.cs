/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CatalogDataProductCustomOptionInterface :  IEquatable<CatalogDataProductCustomOptionInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogDataProductCustomOptionInterface" /> class.
        /// </summary>
        /// <param name="ProductSku">Product SKU (required).</param>
        /// <param name="OptionId">Option id.</param>
        /// <param name="Title">Option title (required).</param>
        /// <param name="Type">Option type (required).</param>
        /// <param name="SortOrder">Sort order (required).</param>
        /// <param name="IsRequire">Is require (required).</param>
        /// <param name="Price">Price.</param>
        /// <param name="PriceType">Price type.</param>
        /// <param name="Sku">Sku.</param>
        /// <param name="FileExtension">FileExtension.</param>
        /// <param name="MaxCharacters">MaxCharacters.</param>
        /// <param name="ImageSizeX">ImageSizeX.</param>
        /// <param name="ImageSizeY">ImageSizeY.</param>
        /// <param name="Values">Values.</param>
        public CatalogDataProductCustomOptionInterface(string ProductSku = null, int? OptionId = null, string Title = null, string Type = null, int? SortOrder = null, bool? IsRequire = null, decimal? Price = null, string PriceType = null, string Sku = null, string FileExtension = null, int? MaxCharacters = null, int? ImageSizeX = null, int? ImageSizeY = null, List<CatalogDataProductCustomOptionValuesInterface> Values = null)
        {
            // to ensure "ProductSku" is required (not null)
            if (ProductSku == null)
            {
                throw new InvalidDataException("ProductSku is a required property for CatalogDataProductCustomOptionInterface and cannot be null");
            }
            else
            {
                this.ProductSku = ProductSku;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for CatalogDataProductCustomOptionInterface and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for CatalogDataProductCustomOptionInterface and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            // to ensure "SortOrder" is required (not null)
            if (SortOrder == null)
            {
                throw new InvalidDataException("SortOrder is a required property for CatalogDataProductCustomOptionInterface and cannot be null");
            }
            else
            {
                this.SortOrder = SortOrder;
            }
            // to ensure "IsRequire" is required (not null)
            if (IsRequire == null)
            {
                throw new InvalidDataException("IsRequire is a required property for CatalogDataProductCustomOptionInterface and cannot be null");
            }
            else
            {
                this.IsRequire = IsRequire;
            }
            this.OptionId = OptionId;
            this.Price = Price;
            this.PriceType = PriceType;
            this.Sku = Sku;
            this.FileExtension = FileExtension;
            this.MaxCharacters = MaxCharacters;
            this.ImageSizeX = ImageSizeX;
            this.ImageSizeY = ImageSizeY;
            this.Values = Values;
            
        }

        /// <summary>
        /// Product SKU
        /// </summary>
        /// <value>Product SKU</value>
        [DataMember(Name="product_sku")]
        public string ProductSku { get; set; }

        /// <summary>
        /// Option id
        /// </summary>
        /// <value>Option id</value>
        [DataMember(Name="option_id")]
        public int? OptionId { get; set; }

        /// <summary>
        /// Option title
        /// </summary>
        /// <value>Option title</value>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Option type
        /// </summary>
        /// <value>Option type</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Sort order
        /// </summary>
        /// <value>Sort order</value>
        [DataMember(Name="sort_order")]
        public int? SortOrder { get; set; }

        /// <summary>
        /// Is require
        /// </summary>
        /// <value>Is require</value>
        [DataMember(Name="is_require")]
        public bool? IsRequire { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name="price")]
        public decimal? Price { get; set; }

        /// <summary>
        /// Price type
        /// </summary>
        /// <value>Price type</value>
        [DataMember(Name="price_type")]
        public string PriceType { get; set; }

        /// <summary>
        /// Sku
        /// </summary>
        /// <value>Sku</value>
        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or Sets FileExtension
        /// </summary>
        [DataMember(Name="file_extension")]
        public string FileExtension { get; set; }

        /// <summary>
        /// Gets or Sets MaxCharacters
        /// </summary>
        [DataMember(Name="max_characters")]
        public int? MaxCharacters { get; set; }

        /// <summary>
        /// Gets or Sets ImageSizeX
        /// </summary>
        [DataMember(Name="image_size_x")]
        public int? ImageSizeX { get; set; }

        /// <summary>
        /// Gets or Sets ImageSizeY
        /// </summary>
        [DataMember(Name="image_size_y")]
        public int? ImageSizeY { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values")]
        public List<CatalogDataProductCustomOptionValuesInterface> Values { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogDataProductCustomOptionInterface {\n");
            sb.Append("  ProductSku: ").Append(ProductSku).Append("\n");
            sb.Append("  OptionId: ").Append(OptionId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  IsRequire: ").Append(IsRequire).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceType: ").Append(PriceType).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  FileExtension: ").Append(FileExtension).Append("\n");
            sb.Append("  MaxCharacters: ").Append(MaxCharacters).Append("\n");
            sb.Append("  ImageSizeX: ").Append(ImageSizeX).Append("\n");
            sb.Append("  ImageSizeY: ").Append(ImageSizeY).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CatalogDataProductCustomOptionInterface)obj);
        }

        /// <summary>
        /// Returns true if CatalogDataProductCustomOptionInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of CatalogDataProductCustomOptionInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogDataProductCustomOptionInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ProductSku == other.ProductSku ||
                    this.ProductSku != null &&
                    this.ProductSku.Equals(other.ProductSku)
                ) && 
                (
                    this.OptionId == other.OptionId ||
                    this.OptionId != null &&
                    this.OptionId.Equals(other.OptionId)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.SortOrder == other.SortOrder ||
                    this.SortOrder != null &&
                    this.SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    this.IsRequire == other.IsRequire ||
                    this.IsRequire != null &&
                    this.IsRequire.Equals(other.IsRequire)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.PriceType == other.PriceType ||
                    this.PriceType != null &&
                    this.PriceType.Equals(other.PriceType)
                ) && 
                (
                    this.Sku == other.Sku ||
                    this.Sku != null &&
                    this.Sku.Equals(other.Sku)
                ) && 
                (
                    this.FileExtension == other.FileExtension ||
                    this.FileExtension != null &&
                    this.FileExtension.Equals(other.FileExtension)
                ) && 
                (
                    this.MaxCharacters == other.MaxCharacters ||
                    this.MaxCharacters != null &&
                    this.MaxCharacters.Equals(other.MaxCharacters)
                ) && 
                (
                    this.ImageSizeX == other.ImageSizeX ||
                    this.ImageSizeX != null &&
                    this.ImageSizeX.Equals(other.ImageSizeX)
                ) && 
                (
                    this.ImageSizeY == other.ImageSizeY ||
                    this.ImageSizeY != null &&
                    this.ImageSizeY.Equals(other.ImageSizeY)
                ) && 
                (
                    this.Values == other.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ProductSku != null)
                    hash = hash * 59 + this.ProductSku.GetHashCode();
                    if (this.OptionId != null)
                    hash = hash * 59 + this.OptionId.GetHashCode();
                    if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                    if (this.SortOrder != null)
                    hash = hash * 59 + this.SortOrder.GetHashCode();
                    if (this.IsRequire != null)
                    hash = hash * 59 + this.IsRequire.GetHashCode();
                    if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                    if (this.PriceType != null)
                    hash = hash * 59 + this.PriceType.GetHashCode();
                    if (this.Sku != null)
                    hash = hash * 59 + this.Sku.GetHashCode();
                    if (this.FileExtension != null)
                    hash = hash * 59 + this.FileExtension.GetHashCode();
                    if (this.MaxCharacters != null)
                    hash = hash * 59 + this.MaxCharacters.GetHashCode();
                    if (this.ImageSizeX != null)
                    hash = hash * 59 + this.ImageSizeX.GetHashCode();
                    if (this.ImageSizeY != null)
                    hash = hash * 59 + this.ImageSizeY.GetHashCode();
                    if (this.Values != null)
                    hash = hash * 59 + this.Values.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CatalogDataProductCustomOptionInterface left, CatalogDataProductCustomOptionInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CatalogDataProductCustomOptionInterface left, CatalogDataProductCustomOptionInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
