/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// extending
    /// </summary>
    [DataContract]
    public partial class ProductExtensionInterface :  IEquatable<ProductExtensionInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductExtensionInterface" /> class.
        /// </summary>
        /// <param name="StockItem">StockItem.</param>
        /// <param name="BundleProductOptions">BundleProductOptions.</param>
        /// <param name="DownloadableProductLinks">DownloadableProductLinks.</param>
        /// <param name="DownloadableProductSamples">DownloadableProductSamples.</param>
        /// <param name="ConfigurableProductOptions">ConfigurableProductOptions.</param>
        /// <param name="ConfigurableProductLinks">ConfigurableProductLinks.</param>
        public ProductExtensionInterface(CatalogInventoryDataStockItemInterface StockItem = null, List<BundleDataOptionInterface> BundleProductOptions = null, List<DownloadableDataLinkInterface> DownloadableProductLinks = null, List<DownloadableDataSampleInterface> DownloadableProductSamples = null, List<ConfigurableProductDataOptionInterface> ConfigurableProductOptions = null, List<int?> ConfigurableProductLinks = null)
        {
            this.StockItem = StockItem;
            this.BundleProductOptions = BundleProductOptions;
            this.DownloadableProductLinks = DownloadableProductLinks;
            this.DownloadableProductSamples = DownloadableProductSamples;
            this.ConfigurableProductOptions = ConfigurableProductOptions;
            this.ConfigurableProductLinks = ConfigurableProductLinks;
            
        }

        /// <summary>
        /// Gets or Sets StockItem
        /// </summary>
        [DataMember(Name="stock_item")]
        public CatalogInventoryDataStockItemInterface StockItem { get; set; }

        /// <summary>
        /// Gets or Sets BundleProductOptions
        /// </summary>
        [DataMember(Name="bundle_product_options")]
        public List<BundleDataOptionInterface> BundleProductOptions { get; set; }

        /// <summary>
        /// Gets or Sets DownloadableProductLinks
        /// </summary>
        [DataMember(Name="downloadable_product_links")]
        public List<DownloadableDataLinkInterface> DownloadableProductLinks { get; set; }

        /// <summary>
        /// Gets or Sets DownloadableProductSamples
        /// </summary>
        [DataMember(Name="downloadable_product_samples")]
        public List<DownloadableDataSampleInterface> DownloadableProductSamples { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurableProductOptions
        /// </summary>
        [DataMember(Name="configurable_product_options")]
        public List<ConfigurableProductDataOptionInterface> ConfigurableProductOptions { get; set; }

        /// <summary>
        /// Gets or Sets ConfigurableProductLinks
        /// </summary>
        [DataMember(Name="configurable_product_links")]
        public List<int?> ConfigurableProductLinks { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductExtensionInterface {\n");
            sb.Append("  StockItem: ").Append(StockItem).Append("\n");
            sb.Append("  BundleProductOptions: ").Append(BundleProductOptions).Append("\n");
            sb.Append("  DownloadableProductLinks: ").Append(DownloadableProductLinks).Append("\n");
            sb.Append("  DownloadableProductSamples: ").Append(DownloadableProductSamples).Append("\n");
            sb.Append("  ConfigurableProductOptions: ").Append(ConfigurableProductOptions).Append("\n");
            sb.Append("  ConfigurableProductLinks: ").Append(ConfigurableProductLinks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ProductExtensionInterface)obj);
        }

        /// <summary>
        /// Returns true if ProductExtensionInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductExtensionInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductExtensionInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.StockItem == other.StockItem ||
                    this.StockItem != null &&
                    this.StockItem.Equals(other.StockItem)
                ) && 
                (
                    this.BundleProductOptions == other.BundleProductOptions ||
                    this.BundleProductOptions != null &&
                    this.BundleProductOptions.SequenceEqual(other.BundleProductOptions)
                ) && 
                (
                    this.DownloadableProductLinks == other.DownloadableProductLinks ||
                    this.DownloadableProductLinks != null &&
                    this.DownloadableProductLinks.SequenceEqual(other.DownloadableProductLinks)
                ) && 
                (
                    this.DownloadableProductSamples == other.DownloadableProductSamples ||
                    this.DownloadableProductSamples != null &&
                    this.DownloadableProductSamples.SequenceEqual(other.DownloadableProductSamples)
                ) && 
                (
                    this.ConfigurableProductOptions == other.ConfigurableProductOptions ||
                    this.ConfigurableProductOptions != null &&
                    this.ConfigurableProductOptions.SequenceEqual(other.ConfigurableProductOptions)
                ) && 
                (
                    this.ConfigurableProductLinks == other.ConfigurableProductLinks ||
                    this.ConfigurableProductLinks != null &&
                    this.ConfigurableProductLinks.SequenceEqual(other.ConfigurableProductLinks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.StockItem != null)
                    hash = hash * 59 + this.StockItem.GetHashCode();
                    if (this.BundleProductOptions != null)
                    hash = hash * 59 + this.BundleProductOptions.GetHashCode();
                    if (this.DownloadableProductLinks != null)
                    hash = hash * 59 + this.DownloadableProductLinks.GetHashCode();
                    if (this.DownloadableProductSamples != null)
                    hash = hash * 59 + this.DownloadableProductSamples.GetHashCode();
                    if (this.ConfigurableProductOptions != null)
                    hash = hash * 59 + this.ConfigurableProductOptions.GetHashCode();
                    if (this.ConfigurableProductLinks != null)
                    hash = hash * 59 + this.ConfigurableProductLinks.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(ProductExtensionInterface left, ProductExtensionInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductExtensionInterface left, ProductExtensionInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
