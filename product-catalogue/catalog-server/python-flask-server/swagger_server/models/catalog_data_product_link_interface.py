# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class CatalogDataProductLinkInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sku: str=None, link_type: str=None, linked_product_sku: str=None, linked_product_type: str=None, position: int=None):
        """
        CatalogDataProductLinkInterface - a model defined in Swagger

        :param sku: The sku of this CatalogDataProductLinkInterface.
        :type sku: str
        :param link_type: The link_type of this CatalogDataProductLinkInterface.
        :type link_type: str
        :param linked_product_sku: The linked_product_sku of this CatalogDataProductLinkInterface.
        :type linked_product_sku: str
        :param linked_product_type: The linked_product_type of this CatalogDataProductLinkInterface.
        :type linked_product_type: str
        :param position: The position of this CatalogDataProductLinkInterface.
        :type position: int
        """
        self.swagger_types = {
            'sku': str,
            'link_type': str,
            'linked_product_sku': str,
            'linked_product_type': str,
            'position': int
        }

        self.attribute_map = {
            'sku': 'sku',
            'link_type': 'link_type',
            'linked_product_sku': 'linked_product_sku',
            'linked_product_type': 'linked_product_type',
            'position': 'position'
        }

        self._sku = sku
        self._link_type = link_type
        self._linked_product_sku = linked_product_sku
        self._linked_product_type = linked_product_type
        self._position = position

    @classmethod
    def from_dict(cls, dikt) -> 'CatalogDataProductLinkInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The catalog-data-product-link-interface of this CatalogDataProductLinkInterface.
        :rtype: CatalogDataProductLinkInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def sku(self) -> str:
        """
        Gets the sku of this CatalogDataProductLinkInterface.
        SKU

        :return: The sku of this CatalogDataProductLinkInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku: str):
        """
        Sets the sku of this CatalogDataProductLinkInterface.
        SKU

        :param sku: The sku of this CatalogDataProductLinkInterface.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def link_type(self) -> str:
        """
        Gets the link_type of this CatalogDataProductLinkInterface.
        Link type

        :return: The link_type of this CatalogDataProductLinkInterface.
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type: str):
        """
        Sets the link_type of this CatalogDataProductLinkInterface.
        Link type

        :param link_type: The link_type of this CatalogDataProductLinkInterface.
        :type link_type: str
        """
        if link_type is None:
            raise ValueError("Invalid value for `link_type`, must not be `None`")

        self._link_type = link_type

    @property
    def linked_product_sku(self) -> str:
        """
        Gets the linked_product_sku of this CatalogDataProductLinkInterface.
        Linked product sku

        :return: The linked_product_sku of this CatalogDataProductLinkInterface.
        :rtype: str
        """
        return self._linked_product_sku

    @linked_product_sku.setter
    def linked_product_sku(self, linked_product_sku: str):
        """
        Sets the linked_product_sku of this CatalogDataProductLinkInterface.
        Linked product sku

        :param linked_product_sku: The linked_product_sku of this CatalogDataProductLinkInterface.
        :type linked_product_sku: str
        """
        if linked_product_sku is None:
            raise ValueError("Invalid value for `linked_product_sku`, must not be `None`")

        self._linked_product_sku = linked_product_sku

    @property
    def linked_product_type(self) -> str:
        """
        Gets the linked_product_type of this CatalogDataProductLinkInterface.
        Linked product type (simple, virtual, etc)

        :return: The linked_product_type of this CatalogDataProductLinkInterface.
        :rtype: str
        """
        return self._linked_product_type

    @linked_product_type.setter
    def linked_product_type(self, linked_product_type: str):
        """
        Sets the linked_product_type of this CatalogDataProductLinkInterface.
        Linked product type (simple, virtual, etc)

        :param linked_product_type: The linked_product_type of this CatalogDataProductLinkInterface.
        :type linked_product_type: str
        """
        if linked_product_type is None:
            raise ValueError("Invalid value for `linked_product_type`, must not be `None`")

        self._linked_product_type = linked_product_type

    @property
    def position(self) -> int:
        """
        Gets the position of this CatalogDataProductLinkInterface.
        Linked item position

        :return: The position of this CatalogDataProductLinkInterface.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position: int):
        """
        Sets the position of this CatalogDataProductLinkInterface.
        Linked item position

        :param position: The position of this CatalogDataProductLinkInterface.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")

        self._position = position

