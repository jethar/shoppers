# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.framework_search_aggregation_value_interface import FrameworkSearchAggregationValueInterface
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class FrameworkSearchBucketInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, values: List[FrameworkSearchAggregationValueInterface]=None):
        """
        FrameworkSearchBucketInterface - a model defined in Swagger

        :param name: The name of this FrameworkSearchBucketInterface.
        :type name: str
        :param values: The values of this FrameworkSearchBucketInterface.
        :type values: List[FrameworkSearchAggregationValueInterface]
        """
        self.swagger_types = {
            'name': str,
            'values': List[FrameworkSearchAggregationValueInterface]
        }

        self.attribute_map = {
            'name': 'name',
            'values': 'values'
        }

        self._name = name
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'FrameworkSearchBucketInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The framework-search-bucket-interface of this FrameworkSearchBucketInterface.
        :rtype: FrameworkSearchBucketInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this FrameworkSearchBucketInterface.
        Field name

        :return: The name of this FrameworkSearchBucketInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this FrameworkSearchBucketInterface.
        Field name

        :param name: The name of this FrameworkSearchBucketInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def values(self) -> List[FrameworkSearchAggregationValueInterface]:
        """
        Gets the values of this FrameworkSearchBucketInterface.
        Field values

        :return: The values of this FrameworkSearchBucketInterface.
        :rtype: List[FrameworkSearchAggregationValueInterface]
        """
        return self._values

    @values.setter
    def values(self, values: List[FrameworkSearchAggregationValueInterface]):
        """
        Sets the values of this FrameworkSearchBucketInterface.
        Field values

        :param values: The values of this FrameworkSearchBucketInterface.
        :type values: List[FrameworkSearchAggregationValueInterface]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values

