# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class CatalogDataProductTierPriceInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, customer_group_id: int=None, qty: float=None, value: float=None):
        """
        CatalogDataProductTierPriceInterface - a model defined in Swagger

        :param customer_group_id: The customer_group_id of this CatalogDataProductTierPriceInterface.
        :type customer_group_id: int
        :param qty: The qty of this CatalogDataProductTierPriceInterface.
        :type qty: float
        :param value: The value of this CatalogDataProductTierPriceInterface.
        :type value: float
        """
        self.swagger_types = {
            'customer_group_id': int,
            'qty': float,
            'value': float
        }

        self.attribute_map = {
            'customer_group_id': 'customer_group_id',
            'qty': 'qty',
            'value': 'value'
        }

        self._customer_group_id = customer_group_id
        self._qty = qty
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'CatalogDataProductTierPriceInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The catalog-data-product-tier-price-interface of this CatalogDataProductTierPriceInterface.
        :rtype: CatalogDataProductTierPriceInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def customer_group_id(self) -> int:
        """
        Gets the customer_group_id of this CatalogDataProductTierPriceInterface.
        Customer group id

        :return: The customer_group_id of this CatalogDataProductTierPriceInterface.
        :rtype: int
        """
        return self._customer_group_id

    @customer_group_id.setter
    def customer_group_id(self, customer_group_id: int):
        """
        Sets the customer_group_id of this CatalogDataProductTierPriceInterface.
        Customer group id

        :param customer_group_id: The customer_group_id of this CatalogDataProductTierPriceInterface.
        :type customer_group_id: int
        """
        if customer_group_id is None:
            raise ValueError("Invalid value for `customer_group_id`, must not be `None`")

        self._customer_group_id = customer_group_id

    @property
    def qty(self) -> float:
        """
        Gets the qty of this CatalogDataProductTierPriceInterface.
        Tier qty

        :return: The qty of this CatalogDataProductTierPriceInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty: float):
        """
        Sets the qty of this CatalogDataProductTierPriceInterface.
        Tier qty

        :param qty: The qty of this CatalogDataProductTierPriceInterface.
        :type qty: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    @property
    def value(self) -> float:
        """
        Gets the value of this CatalogDataProductTierPriceInterface.
        Price value

        :return: The value of this CatalogDataProductTierPriceInterface.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """
        Sets the value of this CatalogDataProductTierPriceInterface.
        Price value

        :param value: The value of this CatalogDataProductTierPriceInterface.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

