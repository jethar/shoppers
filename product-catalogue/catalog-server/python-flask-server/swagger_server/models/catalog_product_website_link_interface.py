# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class CatalogProductWebsiteLinkInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sku: str=None, website_id: int=None):
        """
        CatalogProductWebsiteLinkInterface - a model defined in Swagger

        :param sku: The sku of this CatalogProductWebsiteLinkInterface.
        :type sku: str
        :param website_id: The website_id of this CatalogProductWebsiteLinkInterface.
        :type website_id: int
        """
        self.swagger_types = {
            'sku': str,
            'website_id': int
        }

        self.attribute_map = {
            'sku': 'sku',
            'website_id': 'website_id'
        }

        self._sku = sku
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt) -> 'CatalogProductWebsiteLinkInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The catalog-product-website-link-interface of this CatalogProductWebsiteLinkInterface.
        :rtype: CatalogProductWebsiteLinkInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def sku(self) -> str:
        """
        Gets the sku of this CatalogProductWebsiteLinkInterface.

        :return: The sku of this CatalogProductWebsiteLinkInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku: str):
        """
        Sets the sku of this CatalogProductWebsiteLinkInterface.

        :param sku: The sku of this CatalogProductWebsiteLinkInterface.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def website_id(self) -> int:
        """
        Gets the website_id of this CatalogProductWebsiteLinkInterface.
        Website ids

        :return: The website_id of this CatalogProductWebsiteLinkInterface.
        :rtype: int
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id: int):
        """
        Sets the website_id of this CatalogProductWebsiteLinkInterface.
        Website ids

        :param website_id: The website_id of this CatalogProductWebsiteLinkInterface.
        :type website_id: int
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")

        self._website_id = website_id

