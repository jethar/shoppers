# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class FrameworkSearchAggregationValueInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, value: str=None, metrics: List[str]=None):
        """
        FrameworkSearchAggregationValueInterface - a model defined in Swagger

        :param value: The value of this FrameworkSearchAggregationValueInterface.
        :type value: str
        :param metrics: The metrics of this FrameworkSearchAggregationValueInterface.
        :type metrics: List[str]
        """
        self.swagger_types = {
            'value': str,
            'metrics': List[str]
        }

        self.attribute_map = {
            'value': 'value',
            'metrics': 'metrics'
        }

        self._value = value
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt) -> 'FrameworkSearchAggregationValueInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The framework-search-aggregation-value-interface of this FrameworkSearchAggregationValueInterface.
        :rtype: FrameworkSearchAggregationValueInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def value(self) -> str:
        """
        Gets the value of this FrameworkSearchAggregationValueInterface.
        Aggregation

        :return: The value of this FrameworkSearchAggregationValueInterface.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """
        Sets the value of this FrameworkSearchAggregationValueInterface.
        Aggregation

        :param value: The value of this FrameworkSearchAggregationValueInterface.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def metrics(self) -> List[str]:
        """
        Gets the metrics of this FrameworkSearchAggregationValueInterface.
        Metrics

        :return: The metrics of this FrameworkSearchAggregationValueInterface.
        :rtype: List[str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: List[str]):
        """
        Sets the metrics of this FrameworkSearchAggregationValueInterface.
        Metrics

        :param metrics: The metrics of this FrameworkSearchAggregationValueInterface.
        :type metrics: List[str]
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")

        self._metrics = metrics

