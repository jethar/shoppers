# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.catalog_inventory_data_stock_status_interface import CatalogInventoryDataStockStatusInterface
from swagger_server.models.catalog_inventory_stock_status_criteria_interface import CatalogInventoryStockStatusCriteriaInterface
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class CatalogInventoryDataStockStatusCollectionInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, items: List[CatalogInventoryDataStockStatusInterface]=None, search_criteria: CatalogInventoryStockStatusCriteriaInterface=None, total_count: int=None):
        """
        CatalogInventoryDataStockStatusCollectionInterface - a model defined in Swagger

        :param items: The items of this CatalogInventoryDataStockStatusCollectionInterface.
        :type items: List[CatalogInventoryDataStockStatusInterface]
        :param search_criteria: The search_criteria of this CatalogInventoryDataStockStatusCollectionInterface.
        :type search_criteria: CatalogInventoryStockStatusCriteriaInterface
        :param total_count: The total_count of this CatalogInventoryDataStockStatusCollectionInterface.
        :type total_count: int
        """
        self.swagger_types = {
            'items': List[CatalogInventoryDataStockStatusInterface],
            'search_criteria': CatalogInventoryStockStatusCriteriaInterface,
            'total_count': int
        }

        self.attribute_map = {
            'items': 'items',
            'search_criteria': 'search_criteria',
            'total_count': 'total_count'
        }

        self._items = items
        self._search_criteria = search_criteria
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt) -> 'CatalogInventoryDataStockStatusCollectionInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The catalog-inventory-data-stock-status-collection-interface of this CatalogInventoryDataStockStatusCollectionInterface.
        :rtype: CatalogInventoryDataStockStatusCollectionInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def items(self) -> List[CatalogInventoryDataStockStatusInterface]:
        """
        Gets the items of this CatalogInventoryDataStockStatusCollectionInterface.
        Items

        :return: The items of this CatalogInventoryDataStockStatusCollectionInterface.
        :rtype: List[CatalogInventoryDataStockStatusInterface]
        """
        return self._items

    @items.setter
    def items(self, items: List[CatalogInventoryDataStockStatusInterface]):
        """
        Sets the items of this CatalogInventoryDataStockStatusCollectionInterface.
        Items

        :param items: The items of this CatalogInventoryDataStockStatusCollectionInterface.
        :type items: List[CatalogInventoryDataStockStatusInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def search_criteria(self) -> CatalogInventoryStockStatusCriteriaInterface:
        """
        Gets the search_criteria of this CatalogInventoryDataStockStatusCollectionInterface.

        :return: The search_criteria of this CatalogInventoryDataStockStatusCollectionInterface.
        :rtype: CatalogInventoryStockStatusCriteriaInterface
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria: CatalogInventoryStockStatusCriteriaInterface):
        """
        Sets the search_criteria of this CatalogInventoryDataStockStatusCollectionInterface.

        :param search_criteria: The search_criteria of this CatalogInventoryDataStockStatusCollectionInterface.
        :type search_criteria: CatalogInventoryStockStatusCriteriaInterface
        """
        if search_criteria is None:
            raise ValueError("Invalid value for `search_criteria`, must not be `None`")

        self._search_criteria = search_criteria

    @property
    def total_count(self) -> int:
        """
        Gets the total_count of this CatalogInventoryDataStockStatusCollectionInterface.
        Total count.

        :return: The total_count of this CatalogInventoryDataStockStatusCollectionInterface.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count: int):
        """
        Sets the total_count of this CatalogInventoryDataStockStatusCollectionInterface.
        Total count.

        :param total_count: The total_count of this CatalogInventoryDataStockStatusCollectionInterface.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count

