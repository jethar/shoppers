# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class FrameworkDataImageContentInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, base64_encoded_data: str=None, type: str=None, name: str=None):
        """
        FrameworkDataImageContentInterface - a model defined in Swagger

        :param base64_encoded_data: The base64_encoded_data of this FrameworkDataImageContentInterface.
        :type base64_encoded_data: str
        :param type: The type of this FrameworkDataImageContentInterface.
        :type type: str
        :param name: The name of this FrameworkDataImageContentInterface.
        :type name: str
        """
        self.swagger_types = {
            'base64_encoded_data': str,
            'type': str,
            'name': str
        }

        self.attribute_map = {
            'base64_encoded_data': 'base64_encoded_data',
            'type': 'type',
            'name': 'name'
        }

        self._base64_encoded_data = base64_encoded_data
        self._type = type
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'FrameworkDataImageContentInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The framework-data-image-content-interface of this FrameworkDataImageContentInterface.
        :rtype: FrameworkDataImageContentInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def base64_encoded_data(self) -> str:
        """
        Gets the base64_encoded_data of this FrameworkDataImageContentInterface.
        Media data (base64 encoded content)

        :return: The base64_encoded_data of this FrameworkDataImageContentInterface.
        :rtype: str
        """
        return self._base64_encoded_data

    @base64_encoded_data.setter
    def base64_encoded_data(self, base64_encoded_data: str):
        """
        Sets the base64_encoded_data of this FrameworkDataImageContentInterface.
        Media data (base64 encoded content)

        :param base64_encoded_data: The base64_encoded_data of this FrameworkDataImageContentInterface.
        :type base64_encoded_data: str
        """
        if base64_encoded_data is None:
            raise ValueError("Invalid value for `base64_encoded_data`, must not be `None`")

        self._base64_encoded_data = base64_encoded_data

    @property
    def type(self) -> str:
        """
        Gets the type of this FrameworkDataImageContentInterface.
        MIME type

        :return: The type of this FrameworkDataImageContentInterface.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this FrameworkDataImageContentInterface.
        MIME type

        :param type: The type of this FrameworkDataImageContentInterface.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def name(self) -> str:
        """
        Gets the name of this FrameworkDataImageContentInterface.
        Image name

        :return: The name of this FrameworkDataImageContentInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this FrameworkDataImageContentInterface.
        Image name

        :param name: The name of this FrameworkDataImageContentInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

