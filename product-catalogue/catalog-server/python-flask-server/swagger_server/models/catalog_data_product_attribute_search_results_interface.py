# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.catalog_data_product_attribute_interface import CatalogDataProductAttributeInterface
from swagger_server.models.framework_search_criteria_interface import FrameworkSearchCriteriaInterface
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class CatalogDataProductAttributeSearchResultsInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, items: List[CatalogDataProductAttributeInterface]=None, search_criteria: FrameworkSearchCriteriaInterface=None, total_count: int=None):
        """
        CatalogDataProductAttributeSearchResultsInterface - a model defined in Swagger

        :param items: The items of this CatalogDataProductAttributeSearchResultsInterface.
        :type items: List[CatalogDataProductAttributeInterface]
        :param search_criteria: The search_criteria of this CatalogDataProductAttributeSearchResultsInterface.
        :type search_criteria: FrameworkSearchCriteriaInterface
        :param total_count: The total_count of this CatalogDataProductAttributeSearchResultsInterface.
        :type total_count: int
        """
        self.swagger_types = {
            'items': List[CatalogDataProductAttributeInterface],
            'search_criteria': FrameworkSearchCriteriaInterface,
            'total_count': int
        }

        self.attribute_map = {
            'items': 'items',
            'search_criteria': 'search_criteria',
            'total_count': 'total_count'
        }

        self._items = items
        self._search_criteria = search_criteria
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt) -> 'CatalogDataProductAttributeSearchResultsInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The catalog-data-product-attribute-search-results-interface of this CatalogDataProductAttributeSearchResultsInterface.
        :rtype: CatalogDataProductAttributeSearchResultsInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def items(self) -> List[CatalogDataProductAttributeInterface]:
        """
        Gets the items of this CatalogDataProductAttributeSearchResultsInterface.
        Attributes list.

        :return: The items of this CatalogDataProductAttributeSearchResultsInterface.
        :rtype: List[CatalogDataProductAttributeInterface]
        """
        return self._items

    @items.setter
    def items(self, items: List[CatalogDataProductAttributeInterface]):
        """
        Sets the items of this CatalogDataProductAttributeSearchResultsInterface.
        Attributes list.

        :param items: The items of this CatalogDataProductAttributeSearchResultsInterface.
        :type items: List[CatalogDataProductAttributeInterface]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def search_criteria(self) -> FrameworkSearchCriteriaInterface:
        """
        Gets the search_criteria of this CatalogDataProductAttributeSearchResultsInterface.

        :return: The search_criteria of this CatalogDataProductAttributeSearchResultsInterface.
        :rtype: FrameworkSearchCriteriaInterface
        """
        return self._search_criteria

    @search_criteria.setter
    def search_criteria(self, search_criteria: FrameworkSearchCriteriaInterface):
        """
        Sets the search_criteria of this CatalogDataProductAttributeSearchResultsInterface.

        :param search_criteria: The search_criteria of this CatalogDataProductAttributeSearchResultsInterface.
        :type search_criteria: FrameworkSearchCriteriaInterface
        """
        if search_criteria is None:
            raise ValueError("Invalid value for `search_criteria`, must not be `None`")

        self._search_criteria = search_criteria

    @property
    def total_count(self) -> int:
        """
        Gets the total_count of this CatalogDataProductAttributeSearchResultsInterface.
        Total count.

        :return: The total_count of this CatalogDataProductAttributeSearchResultsInterface.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count: int):
        """
        Sets the total_count of this CatalogDataProductAttributeSearchResultsInterface.
        Total count.

        :param total_count: The total_count of this CatalogDataProductAttributeSearchResultsInterface.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count

