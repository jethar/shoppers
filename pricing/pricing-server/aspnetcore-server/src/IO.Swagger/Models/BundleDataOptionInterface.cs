/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Interface OptionInterface
    /// </summary>
    [DataContract]
    public partial class BundleDataOptionInterface :  IEquatable<BundleDataOptionInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleDataOptionInterface" /> class.
        /// </summary>
        /// <param name="OptionId">Option id.</param>
        /// <param name="Title">Option title.</param>
        /// <param name="Required">Is required option.</param>
        /// <param name="Type">Input type.</param>
        /// <param name="Position">Option position.</param>
        /// <param name="Sku">Product sku.</param>
        /// <param name="ProductLinks">Product links.</param>
        public BundleDataOptionInterface(int? OptionId = null, string Title = null, bool? Required = null, string Type = null, int? Position = null, string Sku = null, List<BundleDataLinkInterface> ProductLinks = null)
        {
            this.OptionId = OptionId;
            this.Title = Title;
            this.Required = Required;
            this.Type = Type;
            this.Position = Position;
            this.Sku = Sku;
            this.ProductLinks = ProductLinks;
            
        }

        /// <summary>
        /// Option id
        /// </summary>
        /// <value>Option id</value>
        [DataMember(Name="option_id")]
        public int? OptionId { get; set; }

        /// <summary>
        /// Option title
        /// </summary>
        /// <value>Option title</value>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Is required option
        /// </summary>
        /// <value>Is required option</value>
        [DataMember(Name="required")]
        public bool? Required { get; set; }

        /// <summary>
        /// Input type
        /// </summary>
        /// <value>Input type</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Option position
        /// </summary>
        /// <value>Option position</value>
        [DataMember(Name="position")]
        public int? Position { get; set; }

        /// <summary>
        /// Product sku
        /// </summary>
        /// <value>Product sku</value>
        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Product links
        /// </summary>
        /// <value>Product links</value>
        [DataMember(Name="product_links")]
        public List<BundleDataLinkInterface> ProductLinks { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BundleDataOptionInterface {\n");
            sb.Append("  OptionId: ").Append(OptionId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  ProductLinks: ").Append(ProductLinks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((BundleDataOptionInterface)obj);
        }

        /// <summary>
        /// Returns true if BundleDataOptionInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of BundleDataOptionInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BundleDataOptionInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.OptionId == other.OptionId ||
                    this.OptionId != null &&
                    this.OptionId.Equals(other.OptionId)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.Sku == other.Sku ||
                    this.Sku != null &&
                    this.Sku.Equals(other.Sku)
                ) && 
                (
                    this.ProductLinks == other.ProductLinks ||
                    this.ProductLinks != null &&
                    this.ProductLinks.SequenceEqual(other.ProductLinks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.OptionId != null)
                    hash = hash * 59 + this.OptionId.GetHashCode();
                    if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                    if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                    if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                    if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                    if (this.Sku != null)
                    hash = hash * 59 + this.Sku.GetHashCode();
                    if (this.ProductLinks != null)
                    hash = hash * 59 + this.ProductLinks.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(BundleDataOptionInterface left, BundleDataOptionInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BundleDataOptionInterface left, BundleDataOptionInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
