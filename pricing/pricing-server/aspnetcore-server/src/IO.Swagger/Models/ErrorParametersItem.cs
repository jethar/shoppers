/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Error parameters item
    /// </summary>
    [DataContract]
    public partial class ErrorParametersItem :  IEquatable<ErrorParametersItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorParametersItem" /> class.
        /// </summary>
        /// <param name="Resources">ACL resource.</param>
        /// <param name="FieldName">Missing or invalid field name.</param>
        /// <param name="FieldValue">Incorrect field value.</param>
        public ErrorParametersItem(string Resources = null, string FieldName = null, string FieldValue = null)
        {
            this.Resources = Resources;
            this.FieldName = FieldName;
            this.FieldValue = FieldValue;
            
        }

        /// <summary>
        /// ACL resource
        /// </summary>
        /// <value>ACL resource</value>
        [DataMember(Name="resources")]
        public string Resources { get; set; }

        /// <summary>
        /// Missing or invalid field name
        /// </summary>
        /// <value>Missing or invalid field name</value>
        [DataMember(Name="fieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// Incorrect field value
        /// </summary>
        /// <value>Incorrect field value</value>
        [DataMember(Name="fieldValue")]
        public string FieldValue { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorParametersItem {\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldValue: ").Append(FieldValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ErrorParametersItem)obj);
        }

        /// <summary>
        /// Returns true if ErrorParametersItem instances are equal
        /// </summary>
        /// <param name="other">Instance of ErrorParametersItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorParametersItem other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Resources == other.Resources ||
                    this.Resources != null &&
                    this.Resources.Equals(other.Resources)
                ) && 
                (
                    this.FieldName == other.FieldName ||
                    this.FieldName != null &&
                    this.FieldName.Equals(other.FieldName)
                ) && 
                (
                    this.FieldValue == other.FieldValue ||
                    this.FieldValue != null &&
                    this.FieldValue.Equals(other.FieldValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Resources != null)
                    hash = hash * 59 + this.Resources.GetHashCode();
                    if (this.FieldName != null)
                    hash = hash * 59 + this.FieldName.GetHashCode();
                    if (this.FieldValue != null)
                    hash = hash * 59 + this.FieldValue.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(ErrorParametersItem left, ErrorParametersItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ErrorParametersItem left, ErrorParametersItem right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
