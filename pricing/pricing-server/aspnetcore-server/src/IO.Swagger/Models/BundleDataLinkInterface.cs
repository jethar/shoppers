/*
 * Shoppers OpenAPI
 *
 * This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Interface LinkInterface
    /// </summary>
    [DataContract]
    public partial class BundleDataLinkInterface :  IEquatable<BundleDataLinkInterface>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleDataLinkInterface" /> class.
        /// </summary>
        /// <param name="Id">The identifier.</param>
        /// <param name="Sku">Linked product sku.</param>
        /// <param name="OptionId">Option id.</param>
        /// <param name="Qty">Qty.</param>
        /// <param name="Position">Position.</param>
        /// <param name="IsDefault">Is default (required).</param>
        /// <param name="Price">Price (required).</param>
        /// <param name="PriceType">Price type (required).</param>
        /// <param name="CanChangeQuantity">Whether quantity could be changed.</param>
        public BundleDataLinkInterface(string Id = null, string Sku = null, int? OptionId = null, decimal? Qty = null, int? Position = null, bool? IsDefault = null, decimal? Price = null, int? PriceType = null, int? CanChangeQuantity = null)
        {
            // to ensure "IsDefault" is required (not null)
            if (IsDefault == null)
            {
                throw new InvalidDataException("IsDefault is a required property for BundleDataLinkInterface and cannot be null");
            }
            else
            {
                this.IsDefault = IsDefault;
            }
            // to ensure "Price" is required (not null)
            if (Price == null)
            {
                throw new InvalidDataException("Price is a required property for BundleDataLinkInterface and cannot be null");
            }
            else
            {
                this.Price = Price;
            }
            // to ensure "PriceType" is required (not null)
            if (PriceType == null)
            {
                throw new InvalidDataException("PriceType is a required property for BundleDataLinkInterface and cannot be null");
            }
            else
            {
                this.PriceType = PriceType;
            }
            this.Id = Id;
            this.Sku = Sku;
            this.OptionId = OptionId;
            this.Qty = Qty;
            this.Position = Position;
            this.CanChangeQuantity = CanChangeQuantity;
            
        }

        /// <summary>
        /// The identifier
        /// </summary>
        /// <value>The identifier</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Linked product sku
        /// </summary>
        /// <value>Linked product sku</value>
        [DataMember(Name="sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Option id
        /// </summary>
        /// <value>Option id</value>
        [DataMember(Name="option_id")]
        public int? OptionId { get; set; }

        /// <summary>
        /// Qty
        /// </summary>
        /// <value>Qty</value>
        [DataMember(Name="qty")]
        public decimal? Qty { get; set; }

        /// <summary>
        /// Position
        /// </summary>
        /// <value>Position</value>
        [DataMember(Name="position")]
        public int? Position { get; set; }

        /// <summary>
        /// Is default
        /// </summary>
        /// <value>Is default</value>
        [DataMember(Name="is_default")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name="price")]
        public decimal? Price { get; set; }

        /// <summary>
        /// Price type
        /// </summary>
        /// <value>Price type</value>
        [DataMember(Name="price_type")]
        public int? PriceType { get; set; }

        /// <summary>
        /// Whether quantity could be changed
        /// </summary>
        /// <value>Whether quantity could be changed</value>
        [DataMember(Name="can_change_quantity")]
        public int? CanChangeQuantity { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BundleDataLinkInterface {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  OptionId: ").Append(OptionId).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PriceType: ").Append(PriceType).Append("\n");
            sb.Append("  CanChangeQuantity: ").Append(CanChangeQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((BundleDataLinkInterface)obj);
        }

        /// <summary>
        /// Returns true if BundleDataLinkInterface instances are equal
        /// </summary>
        /// <param name="other">Instance of BundleDataLinkInterface to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BundleDataLinkInterface other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Sku == other.Sku ||
                    this.Sku != null &&
                    this.Sku.Equals(other.Sku)
                ) && 
                (
                    this.OptionId == other.OptionId ||
                    this.OptionId != null &&
                    this.OptionId.Equals(other.OptionId)
                ) && 
                (
                    this.Qty == other.Qty ||
                    this.Qty != null &&
                    this.Qty.Equals(other.Qty)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                ) && 
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.PriceType == other.PriceType ||
                    this.PriceType != null &&
                    this.PriceType.Equals(other.PriceType)
                ) && 
                (
                    this.CanChangeQuantity == other.CanChangeQuantity ||
                    this.CanChangeQuantity != null &&
                    this.CanChangeQuantity.Equals(other.CanChangeQuantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.Sku != null)
                    hash = hash * 59 + this.Sku.GetHashCode();
                    if (this.OptionId != null)
                    hash = hash * 59 + this.OptionId.GetHashCode();
                    if (this.Qty != null)
                    hash = hash * 59 + this.Qty.GetHashCode();
                    if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                    if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                    if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                    if (this.PriceType != null)
                    hash = hash * 59 + this.PriceType.GetHashCode();
                    if (this.CanChangeQuantity != null)
                    hash = hash * 59 + this.CanChangeQuantity.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(BundleDataLinkInterface left, BundleDataLinkInterface right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BundleDataLinkInterface left, BundleDataLinkInterface right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
