# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.error_errors import ErrorErrors
from swagger_server.models.error_parameters import ErrorParameters
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ErrorResponse(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message: str=None, errors: ErrorErrors=None, code: int=None, parameters: ErrorParameters=None, trace: str=None):
        """
        ErrorResponse - a model defined in Swagger

        :param message: The message of this ErrorResponse.
        :type message: str
        :param errors: The errors of this ErrorResponse.
        :type errors: ErrorErrors
        :param code: The code of this ErrorResponse.
        :type code: int
        :param parameters: The parameters of this ErrorResponse.
        :type parameters: ErrorParameters
        :param trace: The trace of this ErrorResponse.
        :type trace: str
        """
        self.swagger_types = {
            'message': str,
            'errors': ErrorErrors,
            'code': int,
            'parameters': ErrorParameters,
            'trace': str
        }

        self.attribute_map = {
            'message': 'message',
            'errors': 'errors',
            'code': 'code',
            'parameters': 'parameters',
            'trace': 'trace'
        }

        self._message = message
        self._errors = errors
        self._code = code
        self._parameters = parameters
        self._trace = trace

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorResponse':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The error-response of this ErrorResponse.
        :rtype: ErrorResponse
        """
        return deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """
        Gets the message of this ErrorResponse.
        Error message

        :return: The message of this ErrorResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """
        Sets the message of this ErrorResponse.
        Error message

        :param message: The message of this ErrorResponse.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def errors(self) -> ErrorErrors:
        """
        Gets the errors of this ErrorResponse.

        :return: The errors of this ErrorResponse.
        :rtype: ErrorErrors
        """
        return self._errors

    @errors.setter
    def errors(self, errors: ErrorErrors):
        """
        Sets the errors of this ErrorResponse.

        :param errors: The errors of this ErrorResponse.
        :type errors: ErrorErrors
        """

        self._errors = errors

    @property
    def code(self) -> int:
        """
        Gets the code of this ErrorResponse.
        Error code

        :return: The code of this ErrorResponse.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: int):
        """
        Sets the code of this ErrorResponse.
        Error code

        :param code: The code of this ErrorResponse.
        :type code: int
        """

        self._code = code

    @property
    def parameters(self) -> ErrorParameters:
        """
        Gets the parameters of this ErrorResponse.

        :return: The parameters of this ErrorResponse.
        :rtype: ErrorParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: ErrorParameters):
        """
        Sets the parameters of this ErrorResponse.

        :param parameters: The parameters of this ErrorResponse.
        :type parameters: ErrorParameters
        """

        self._parameters = parameters

    @property
    def trace(self) -> str:
        """
        Gets the trace of this ErrorResponse.
        Stack trace

        :return: The trace of this ErrorResponse.
        :rtype: str
        """
        return self._trace

    @trace.setter
    def trace(self, trace: str):
        """
        Sets the trace of this ErrorResponse.
        Stack trace

        :param trace: The trace of this ErrorResponse.
        :type trace: str
        """

        self._trace = trace

