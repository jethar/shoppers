# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ProductCustomOptionValuesInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title: str=None, sort_order: int=None, price: float=None, price_type: str=None, sku: str=None, option_type_id: int=None):
        """
        ProductCustomOptionValuesInterface - a model defined in Swagger

        :param title: The title of this ProductCustomOptionValuesInterface.
        :type title: str
        :param sort_order: The sort_order of this ProductCustomOptionValuesInterface.
        :type sort_order: int
        :param price: The price of this ProductCustomOptionValuesInterface.
        :type price: float
        :param price_type: The price_type of this ProductCustomOptionValuesInterface.
        :type price_type: str
        :param sku: The sku of this ProductCustomOptionValuesInterface.
        :type sku: str
        :param option_type_id: The option_type_id of this ProductCustomOptionValuesInterface.
        :type option_type_id: int
        """
        self.swagger_types = {
            'title': str,
            'sort_order': int,
            'price': float,
            'price_type': str,
            'sku': str,
            'option_type_id': int
        }

        self.attribute_map = {
            'title': 'title',
            'sort_order': 'sort_order',
            'price': 'price',
            'price_type': 'price_type',
            'sku': 'sku',
            'option_type_id': 'option_type_id'
        }

        self._title = title
        self._sort_order = sort_order
        self._price = price
        self._price_type = price_type
        self._sku = sku
        self._option_type_id = option_type_id

    @classmethod
    def from_dict(cls, dikt) -> 'ProductCustomOptionValuesInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The product-custom-option-values-interface of this ProductCustomOptionValuesInterface.
        :rtype: ProductCustomOptionValuesInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """
        Gets the title of this ProductCustomOptionValuesInterface.
        Option title

        :return: The title of this ProductCustomOptionValuesInterface.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """
        Sets the title of this ProductCustomOptionValuesInterface.
        Option title

        :param title: The title of this ProductCustomOptionValuesInterface.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def sort_order(self) -> int:
        """
        Gets the sort_order of this ProductCustomOptionValuesInterface.
        Sort order

        :return: The sort_order of this ProductCustomOptionValuesInterface.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order: int):
        """
        Sets the sort_order of this ProductCustomOptionValuesInterface.
        Sort order

        :param sort_order: The sort_order of this ProductCustomOptionValuesInterface.
        :type sort_order: int
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order

    @property
    def price(self) -> float:
        """
        Gets the price of this ProductCustomOptionValuesInterface.
        Price

        :return: The price of this ProductCustomOptionValuesInterface.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """
        Sets the price of this ProductCustomOptionValuesInterface.
        Price

        :param price: The price of this ProductCustomOptionValuesInterface.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_type(self) -> str:
        """
        Gets the price_type of this ProductCustomOptionValuesInterface.
        Price type

        :return: The price_type of this ProductCustomOptionValuesInterface.
        :rtype: str
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type: str):
        """
        Sets the price_type of this ProductCustomOptionValuesInterface.
        Price type

        :param price_type: The price_type of this ProductCustomOptionValuesInterface.
        :type price_type: str
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")

        self._price_type = price_type

    @property
    def sku(self) -> str:
        """
        Gets the sku of this ProductCustomOptionValuesInterface.
        Sku

        :return: The sku of this ProductCustomOptionValuesInterface.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku: str):
        """
        Sets the sku of this ProductCustomOptionValuesInterface.
        Sku

        :param sku: The sku of this ProductCustomOptionValuesInterface.
        :type sku: str
        """

        self._sku = sku

    @property
    def option_type_id(self) -> int:
        """
        Gets the option_type_id of this ProductCustomOptionValuesInterface.
        Option type id

        :return: The option_type_id of this ProductCustomOptionValuesInterface.
        :rtype: int
        """
        return self._option_type_id

    @option_type_id.setter
    def option_type_id(self, option_type_id: int):
        """
        Sets the option_type_id of this ProductCustomOptionValuesInterface.
        Option type id

        :param option_type_id: The option_type_id of this ProductCustomOptionValuesInterface.
        :type option_type_id: int
        """

        self._option_type_id = option_type_id

