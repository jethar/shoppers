# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class InventoryDataStockItemInterface(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, item_id: int=None, product_id: int=None, stock_id: int=None, qty: float=None, is_in_stock: bool=None, is_qty_decimal: bool=None, show_default_notification_message: bool=None, use_config_min_qty: bool=None, min_qty: float=None, use_config_min_sale_qty: int=None, min_sale_qty: float=None, use_config_max_sale_qty: bool=None, max_sale_qty: float=None, use_config_backorders: bool=None, backorders: int=None, use_config_notify_stock_qty: bool=None, notify_stock_qty: float=None, use_config_qty_increments: bool=None, qty_increments: float=None, use_config_enable_qty_inc: bool=None, enable_qty_increments: bool=None, use_config_manage_stock: bool=None, manage_stock: bool=None, low_stock_date: str=None, is_decimal_divided: bool=None, stock_status_changed_auto: int=None):
        """
        InventoryDataStockItemInterface - a model defined in Swagger

        :param item_id: The item_id of this InventoryDataStockItemInterface.
        :type item_id: int
        :param product_id: The product_id of this InventoryDataStockItemInterface.
        :type product_id: int
        :param stock_id: The stock_id of this InventoryDataStockItemInterface.
        :type stock_id: int
        :param qty: The qty of this InventoryDataStockItemInterface.
        :type qty: float
        :param is_in_stock: The is_in_stock of this InventoryDataStockItemInterface.
        :type is_in_stock: bool
        :param is_qty_decimal: The is_qty_decimal of this InventoryDataStockItemInterface.
        :type is_qty_decimal: bool
        :param show_default_notification_message: The show_default_notification_message of this InventoryDataStockItemInterface.
        :type show_default_notification_message: bool
        :param use_config_min_qty: The use_config_min_qty of this InventoryDataStockItemInterface.
        :type use_config_min_qty: bool
        :param min_qty: The min_qty of this InventoryDataStockItemInterface.
        :type min_qty: float
        :param use_config_min_sale_qty: The use_config_min_sale_qty of this InventoryDataStockItemInterface.
        :type use_config_min_sale_qty: int
        :param min_sale_qty: The min_sale_qty of this InventoryDataStockItemInterface.
        :type min_sale_qty: float
        :param use_config_max_sale_qty: The use_config_max_sale_qty of this InventoryDataStockItemInterface.
        :type use_config_max_sale_qty: bool
        :param max_sale_qty: The max_sale_qty of this InventoryDataStockItemInterface.
        :type max_sale_qty: float
        :param use_config_backorders: The use_config_backorders of this InventoryDataStockItemInterface.
        :type use_config_backorders: bool
        :param backorders: The backorders of this InventoryDataStockItemInterface.
        :type backorders: int
        :param use_config_notify_stock_qty: The use_config_notify_stock_qty of this InventoryDataStockItemInterface.
        :type use_config_notify_stock_qty: bool
        :param notify_stock_qty: The notify_stock_qty of this InventoryDataStockItemInterface.
        :type notify_stock_qty: float
        :param use_config_qty_increments: The use_config_qty_increments of this InventoryDataStockItemInterface.
        :type use_config_qty_increments: bool
        :param qty_increments: The qty_increments of this InventoryDataStockItemInterface.
        :type qty_increments: float
        :param use_config_enable_qty_inc: The use_config_enable_qty_inc of this InventoryDataStockItemInterface.
        :type use_config_enable_qty_inc: bool
        :param enable_qty_increments: The enable_qty_increments of this InventoryDataStockItemInterface.
        :type enable_qty_increments: bool
        :param use_config_manage_stock: The use_config_manage_stock of this InventoryDataStockItemInterface.
        :type use_config_manage_stock: bool
        :param manage_stock: The manage_stock of this InventoryDataStockItemInterface.
        :type manage_stock: bool
        :param low_stock_date: The low_stock_date of this InventoryDataStockItemInterface.
        :type low_stock_date: str
        :param is_decimal_divided: The is_decimal_divided of this InventoryDataStockItemInterface.
        :type is_decimal_divided: bool
        :param stock_status_changed_auto: The stock_status_changed_auto of this InventoryDataStockItemInterface.
        :type stock_status_changed_auto: int
        """
        self.swagger_types = {
            'item_id': int,
            'product_id': int,
            'stock_id': int,
            'qty': float,
            'is_in_stock': bool,
            'is_qty_decimal': bool,
            'show_default_notification_message': bool,
            'use_config_min_qty': bool,
            'min_qty': float,
            'use_config_min_sale_qty': int,
            'min_sale_qty': float,
            'use_config_max_sale_qty': bool,
            'max_sale_qty': float,
            'use_config_backorders': bool,
            'backorders': int,
            'use_config_notify_stock_qty': bool,
            'notify_stock_qty': float,
            'use_config_qty_increments': bool,
            'qty_increments': float,
            'use_config_enable_qty_inc': bool,
            'enable_qty_increments': bool,
            'use_config_manage_stock': bool,
            'manage_stock': bool,
            'low_stock_date': str,
            'is_decimal_divided': bool,
            'stock_status_changed_auto': int
        }

        self.attribute_map = {
            'item_id': 'item_id',
            'product_id': 'product_id',
            'stock_id': 'stock_id',
            'qty': 'qty',
            'is_in_stock': 'is_in_stock',
            'is_qty_decimal': 'is_qty_decimal',
            'show_default_notification_message': 'show_default_notification_message',
            'use_config_min_qty': 'use_config_min_qty',
            'min_qty': 'min_qty',
            'use_config_min_sale_qty': 'use_config_min_sale_qty',
            'min_sale_qty': 'min_sale_qty',
            'use_config_max_sale_qty': 'use_config_max_sale_qty',
            'max_sale_qty': 'max_sale_qty',
            'use_config_backorders': 'use_config_backorders',
            'backorders': 'backorders',
            'use_config_notify_stock_qty': 'use_config_notify_stock_qty',
            'notify_stock_qty': 'notify_stock_qty',
            'use_config_qty_increments': 'use_config_qty_increments',
            'qty_increments': 'qty_increments',
            'use_config_enable_qty_inc': 'use_config_enable_qty_inc',
            'enable_qty_increments': 'enable_qty_increments',
            'use_config_manage_stock': 'use_config_manage_stock',
            'manage_stock': 'manage_stock',
            'low_stock_date': 'low_stock_date',
            'is_decimal_divided': 'is_decimal_divided',
            'stock_status_changed_auto': 'stock_status_changed_auto'
        }

        self._item_id = item_id
        self._product_id = product_id
        self._stock_id = stock_id
        self._qty = qty
        self._is_in_stock = is_in_stock
        self._is_qty_decimal = is_qty_decimal
        self._show_default_notification_message = show_default_notification_message
        self._use_config_min_qty = use_config_min_qty
        self._min_qty = min_qty
        self._use_config_min_sale_qty = use_config_min_sale_qty
        self._min_sale_qty = min_sale_qty
        self._use_config_max_sale_qty = use_config_max_sale_qty
        self._max_sale_qty = max_sale_qty
        self._use_config_backorders = use_config_backorders
        self._backorders = backorders
        self._use_config_notify_stock_qty = use_config_notify_stock_qty
        self._notify_stock_qty = notify_stock_qty
        self._use_config_qty_increments = use_config_qty_increments
        self._qty_increments = qty_increments
        self._use_config_enable_qty_inc = use_config_enable_qty_inc
        self._enable_qty_increments = enable_qty_increments
        self._use_config_manage_stock = use_config_manage_stock
        self._manage_stock = manage_stock
        self._low_stock_date = low_stock_date
        self._is_decimal_divided = is_decimal_divided
        self._stock_status_changed_auto = stock_status_changed_auto

    @classmethod
    def from_dict(cls, dikt) -> 'InventoryDataStockItemInterface':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inventory-data-stock-item-interface of this InventoryDataStockItemInterface.
        :rtype: InventoryDataStockItemInterface
        """
        return deserialize_model(dikt, cls)

    @property
    def item_id(self) -> int:
        """
        Gets the item_id of this InventoryDataStockItemInterface.

        :return: The item_id of this InventoryDataStockItemInterface.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: int):
        """
        Sets the item_id of this InventoryDataStockItemInterface.

        :param item_id: The item_id of this InventoryDataStockItemInterface.
        :type item_id: int
        """

        self._item_id = item_id

    @property
    def product_id(self) -> int:
        """
        Gets the product_id of this InventoryDataStockItemInterface.

        :return: The product_id of this InventoryDataStockItemInterface.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: int):
        """
        Sets the product_id of this InventoryDataStockItemInterface.

        :param product_id: The product_id of this InventoryDataStockItemInterface.
        :type product_id: int
        """

        self._product_id = product_id

    @property
    def stock_id(self) -> int:
        """
        Gets the stock_id of this InventoryDataStockItemInterface.
        Stock identifier

        :return: The stock_id of this InventoryDataStockItemInterface.
        :rtype: int
        """
        return self._stock_id

    @stock_id.setter
    def stock_id(self, stock_id: int):
        """
        Sets the stock_id of this InventoryDataStockItemInterface.
        Stock identifier

        :param stock_id: The stock_id of this InventoryDataStockItemInterface.
        :type stock_id: int
        """

        self._stock_id = stock_id

    @property
    def qty(self) -> float:
        """
        Gets the qty of this InventoryDataStockItemInterface.

        :return: The qty of this InventoryDataStockItemInterface.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty: float):
        """
        Sets the qty of this InventoryDataStockItemInterface.

        :param qty: The qty of this InventoryDataStockItemInterface.
        :type qty: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")

        self._qty = qty

    @property
    def is_in_stock(self) -> bool:
        """
        Gets the is_in_stock of this InventoryDataStockItemInterface.
        Stock Availability

        :return: The is_in_stock of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._is_in_stock

    @is_in_stock.setter
    def is_in_stock(self, is_in_stock: bool):
        """
        Sets the is_in_stock of this InventoryDataStockItemInterface.
        Stock Availability

        :param is_in_stock: The is_in_stock of this InventoryDataStockItemInterface.
        :type is_in_stock: bool
        """
        if is_in_stock is None:
            raise ValueError("Invalid value for `is_in_stock`, must not be `None`")

        self._is_in_stock = is_in_stock

    @property
    def is_qty_decimal(self) -> bool:
        """
        Gets the is_qty_decimal of this InventoryDataStockItemInterface.

        :return: The is_qty_decimal of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._is_qty_decimal

    @is_qty_decimal.setter
    def is_qty_decimal(self, is_qty_decimal: bool):
        """
        Sets the is_qty_decimal of this InventoryDataStockItemInterface.

        :param is_qty_decimal: The is_qty_decimal of this InventoryDataStockItemInterface.
        :type is_qty_decimal: bool
        """
        if is_qty_decimal is None:
            raise ValueError("Invalid value for `is_qty_decimal`, must not be `None`")

        self._is_qty_decimal = is_qty_decimal

    @property
    def show_default_notification_message(self) -> bool:
        """
        Gets the show_default_notification_message of this InventoryDataStockItemInterface.

        :return: The show_default_notification_message of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._show_default_notification_message

    @show_default_notification_message.setter
    def show_default_notification_message(self, show_default_notification_message: bool):
        """
        Sets the show_default_notification_message of this InventoryDataStockItemInterface.

        :param show_default_notification_message: The show_default_notification_message of this InventoryDataStockItemInterface.
        :type show_default_notification_message: bool
        """
        if show_default_notification_message is None:
            raise ValueError("Invalid value for `show_default_notification_message`, must not be `None`")

        self._show_default_notification_message = show_default_notification_message

    @property
    def use_config_min_qty(self) -> bool:
        """
        Gets the use_config_min_qty of this InventoryDataStockItemInterface.

        :return: The use_config_min_qty of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_min_qty

    @use_config_min_qty.setter
    def use_config_min_qty(self, use_config_min_qty: bool):
        """
        Sets the use_config_min_qty of this InventoryDataStockItemInterface.

        :param use_config_min_qty: The use_config_min_qty of this InventoryDataStockItemInterface.
        :type use_config_min_qty: bool
        """
        if use_config_min_qty is None:
            raise ValueError("Invalid value for `use_config_min_qty`, must not be `None`")

        self._use_config_min_qty = use_config_min_qty

    @property
    def min_qty(self) -> float:
        """
        Gets the min_qty of this InventoryDataStockItemInterface.
        Minimal quantity available for item status in stock

        :return: The min_qty of this InventoryDataStockItemInterface.
        :rtype: float
        """
        return self._min_qty

    @min_qty.setter
    def min_qty(self, min_qty: float):
        """
        Sets the min_qty of this InventoryDataStockItemInterface.
        Minimal quantity available for item status in stock

        :param min_qty: The min_qty of this InventoryDataStockItemInterface.
        :type min_qty: float
        """
        if min_qty is None:
            raise ValueError("Invalid value for `min_qty`, must not be `None`")

        self._min_qty = min_qty

    @property
    def use_config_min_sale_qty(self) -> int:
        """
        Gets the use_config_min_sale_qty of this InventoryDataStockItemInterface.

        :return: The use_config_min_sale_qty of this InventoryDataStockItemInterface.
        :rtype: int
        """
        return self._use_config_min_sale_qty

    @use_config_min_sale_qty.setter
    def use_config_min_sale_qty(self, use_config_min_sale_qty: int):
        """
        Sets the use_config_min_sale_qty of this InventoryDataStockItemInterface.

        :param use_config_min_sale_qty: The use_config_min_sale_qty of this InventoryDataStockItemInterface.
        :type use_config_min_sale_qty: int
        """
        if use_config_min_sale_qty is None:
            raise ValueError("Invalid value for `use_config_min_sale_qty`, must not be `None`")

        self._use_config_min_sale_qty = use_config_min_sale_qty

    @property
    def min_sale_qty(self) -> float:
        """
        Gets the min_sale_qty of this InventoryDataStockItemInterface.
        Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation

        :return: The min_sale_qty of this InventoryDataStockItemInterface.
        :rtype: float
        """
        return self._min_sale_qty

    @min_sale_qty.setter
    def min_sale_qty(self, min_sale_qty: float):
        """
        Sets the min_sale_qty of this InventoryDataStockItemInterface.
        Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation

        :param min_sale_qty: The min_sale_qty of this InventoryDataStockItemInterface.
        :type min_sale_qty: float
        """
        if min_sale_qty is None:
            raise ValueError("Invalid value for `min_sale_qty`, must not be `None`")

        self._min_sale_qty = min_sale_qty

    @property
    def use_config_max_sale_qty(self) -> bool:
        """
        Gets the use_config_max_sale_qty of this InventoryDataStockItemInterface.

        :return: The use_config_max_sale_qty of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_max_sale_qty

    @use_config_max_sale_qty.setter
    def use_config_max_sale_qty(self, use_config_max_sale_qty: bool):
        """
        Sets the use_config_max_sale_qty of this InventoryDataStockItemInterface.

        :param use_config_max_sale_qty: The use_config_max_sale_qty of this InventoryDataStockItemInterface.
        :type use_config_max_sale_qty: bool
        """
        if use_config_max_sale_qty is None:
            raise ValueError("Invalid value for `use_config_max_sale_qty`, must not be `None`")

        self._use_config_max_sale_qty = use_config_max_sale_qty

    @property
    def max_sale_qty(self) -> float:
        """
        Gets the max_sale_qty of this InventoryDataStockItemInterface.
        Maximum Qty Allowed in Shopping Cart data wrapper

        :return: The max_sale_qty of this InventoryDataStockItemInterface.
        :rtype: float
        """
        return self._max_sale_qty

    @max_sale_qty.setter
    def max_sale_qty(self, max_sale_qty: float):
        """
        Sets the max_sale_qty of this InventoryDataStockItemInterface.
        Maximum Qty Allowed in Shopping Cart data wrapper

        :param max_sale_qty: The max_sale_qty of this InventoryDataStockItemInterface.
        :type max_sale_qty: float
        """
        if max_sale_qty is None:
            raise ValueError("Invalid value for `max_sale_qty`, must not be `None`")

        self._max_sale_qty = max_sale_qty

    @property
    def use_config_backorders(self) -> bool:
        """
        Gets the use_config_backorders of this InventoryDataStockItemInterface.

        :return: The use_config_backorders of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_backorders

    @use_config_backorders.setter
    def use_config_backorders(self, use_config_backorders: bool):
        """
        Sets the use_config_backorders of this InventoryDataStockItemInterface.

        :param use_config_backorders: The use_config_backorders of this InventoryDataStockItemInterface.
        :type use_config_backorders: bool
        """
        if use_config_backorders is None:
            raise ValueError("Invalid value for `use_config_backorders`, must not be `None`")

        self._use_config_backorders = use_config_backorders

    @property
    def backorders(self) -> int:
        """
        Gets the backorders of this InventoryDataStockItemInterface.
        Backorders status

        :return: The backorders of this InventoryDataStockItemInterface.
        :rtype: int
        """
        return self._backorders

    @backorders.setter
    def backorders(self, backorders: int):
        """
        Sets the backorders of this InventoryDataStockItemInterface.
        Backorders status

        :param backorders: The backorders of this InventoryDataStockItemInterface.
        :type backorders: int
        """
        if backorders is None:
            raise ValueError("Invalid value for `backorders`, must not be `None`")

        self._backorders = backorders

    @property
    def use_config_notify_stock_qty(self) -> bool:
        """
        Gets the use_config_notify_stock_qty of this InventoryDataStockItemInterface.

        :return: The use_config_notify_stock_qty of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_notify_stock_qty

    @use_config_notify_stock_qty.setter
    def use_config_notify_stock_qty(self, use_config_notify_stock_qty: bool):
        """
        Sets the use_config_notify_stock_qty of this InventoryDataStockItemInterface.

        :param use_config_notify_stock_qty: The use_config_notify_stock_qty of this InventoryDataStockItemInterface.
        :type use_config_notify_stock_qty: bool
        """
        if use_config_notify_stock_qty is None:
            raise ValueError("Invalid value for `use_config_notify_stock_qty`, must not be `None`")

        self._use_config_notify_stock_qty = use_config_notify_stock_qty

    @property
    def notify_stock_qty(self) -> float:
        """
        Gets the notify_stock_qty of this InventoryDataStockItemInterface.
        Notify for Quantity Below data wrapper

        :return: The notify_stock_qty of this InventoryDataStockItemInterface.
        :rtype: float
        """
        return self._notify_stock_qty

    @notify_stock_qty.setter
    def notify_stock_qty(self, notify_stock_qty: float):
        """
        Sets the notify_stock_qty of this InventoryDataStockItemInterface.
        Notify for Quantity Below data wrapper

        :param notify_stock_qty: The notify_stock_qty of this InventoryDataStockItemInterface.
        :type notify_stock_qty: float
        """
        if notify_stock_qty is None:
            raise ValueError("Invalid value for `notify_stock_qty`, must not be `None`")

        self._notify_stock_qty = notify_stock_qty

    @property
    def use_config_qty_increments(self) -> bool:
        """
        Gets the use_config_qty_increments of this InventoryDataStockItemInterface.

        :return: The use_config_qty_increments of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_qty_increments

    @use_config_qty_increments.setter
    def use_config_qty_increments(self, use_config_qty_increments: bool):
        """
        Sets the use_config_qty_increments of this InventoryDataStockItemInterface.

        :param use_config_qty_increments: The use_config_qty_increments of this InventoryDataStockItemInterface.
        :type use_config_qty_increments: bool
        """
        if use_config_qty_increments is None:
            raise ValueError("Invalid value for `use_config_qty_increments`, must not be `None`")

        self._use_config_qty_increments = use_config_qty_increments

    @property
    def qty_increments(self) -> float:
        """
        Gets the qty_increments of this InventoryDataStockItemInterface.
        Quantity Increments data wrapper

        :return: The qty_increments of this InventoryDataStockItemInterface.
        :rtype: float
        """
        return self._qty_increments

    @qty_increments.setter
    def qty_increments(self, qty_increments: float):
        """
        Sets the qty_increments of this InventoryDataStockItemInterface.
        Quantity Increments data wrapper

        :param qty_increments: The qty_increments of this InventoryDataStockItemInterface.
        :type qty_increments: float
        """
        if qty_increments is None:
            raise ValueError("Invalid value for `qty_increments`, must not be `None`")

        self._qty_increments = qty_increments

    @property
    def use_config_enable_qty_inc(self) -> bool:
        """
        Gets the use_config_enable_qty_inc of this InventoryDataStockItemInterface.

        :return: The use_config_enable_qty_inc of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_enable_qty_inc

    @use_config_enable_qty_inc.setter
    def use_config_enable_qty_inc(self, use_config_enable_qty_inc: bool):
        """
        Sets the use_config_enable_qty_inc of this InventoryDataStockItemInterface.

        :param use_config_enable_qty_inc: The use_config_enable_qty_inc of this InventoryDataStockItemInterface.
        :type use_config_enable_qty_inc: bool
        """
        if use_config_enable_qty_inc is None:
            raise ValueError("Invalid value for `use_config_enable_qty_inc`, must not be `None`")

        self._use_config_enable_qty_inc = use_config_enable_qty_inc

    @property
    def enable_qty_increments(self) -> bool:
        """
        Gets the enable_qty_increments of this InventoryDataStockItemInterface.
        Whether Quantity Increments is enabled

        :return: The enable_qty_increments of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._enable_qty_increments

    @enable_qty_increments.setter
    def enable_qty_increments(self, enable_qty_increments: bool):
        """
        Sets the enable_qty_increments of this InventoryDataStockItemInterface.
        Whether Quantity Increments is enabled

        :param enable_qty_increments: The enable_qty_increments of this InventoryDataStockItemInterface.
        :type enable_qty_increments: bool
        """
        if enable_qty_increments is None:
            raise ValueError("Invalid value for `enable_qty_increments`, must not be `None`")

        self._enable_qty_increments = enable_qty_increments

    @property
    def use_config_manage_stock(self) -> bool:
        """
        Gets the use_config_manage_stock of this InventoryDataStockItemInterface.

        :return: The use_config_manage_stock of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._use_config_manage_stock

    @use_config_manage_stock.setter
    def use_config_manage_stock(self, use_config_manage_stock: bool):
        """
        Sets the use_config_manage_stock of this InventoryDataStockItemInterface.

        :param use_config_manage_stock: The use_config_manage_stock of this InventoryDataStockItemInterface.
        :type use_config_manage_stock: bool
        """
        if use_config_manage_stock is None:
            raise ValueError("Invalid value for `use_config_manage_stock`, must not be `None`")

        self._use_config_manage_stock = use_config_manage_stock

    @property
    def manage_stock(self) -> bool:
        """
        Gets the manage_stock of this InventoryDataStockItemInterface.
        Can Manage Stock

        :return: The manage_stock of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._manage_stock

    @manage_stock.setter
    def manage_stock(self, manage_stock: bool):
        """
        Sets the manage_stock of this InventoryDataStockItemInterface.
        Can Manage Stock

        :param manage_stock: The manage_stock of this InventoryDataStockItemInterface.
        :type manage_stock: bool
        """
        if manage_stock is None:
            raise ValueError("Invalid value for `manage_stock`, must not be `None`")

        self._manage_stock = manage_stock

    @property
    def low_stock_date(self) -> str:
        """
        Gets the low_stock_date of this InventoryDataStockItemInterface.

        :return: The low_stock_date of this InventoryDataStockItemInterface.
        :rtype: str
        """
        return self._low_stock_date

    @low_stock_date.setter
    def low_stock_date(self, low_stock_date: str):
        """
        Sets the low_stock_date of this InventoryDataStockItemInterface.

        :param low_stock_date: The low_stock_date of this InventoryDataStockItemInterface.
        :type low_stock_date: str
        """
        if low_stock_date is None:
            raise ValueError("Invalid value for `low_stock_date`, must not be `None`")

        self._low_stock_date = low_stock_date

    @property
    def is_decimal_divided(self) -> bool:
        """
        Gets the is_decimal_divided of this InventoryDataStockItemInterface.

        :return: The is_decimal_divided of this InventoryDataStockItemInterface.
        :rtype: bool
        """
        return self._is_decimal_divided

    @is_decimal_divided.setter
    def is_decimal_divided(self, is_decimal_divided: bool):
        """
        Sets the is_decimal_divided of this InventoryDataStockItemInterface.

        :param is_decimal_divided: The is_decimal_divided of this InventoryDataStockItemInterface.
        :type is_decimal_divided: bool
        """
        if is_decimal_divided is None:
            raise ValueError("Invalid value for `is_decimal_divided`, must not be `None`")

        self._is_decimal_divided = is_decimal_divided

    @property
    def stock_status_changed_auto(self) -> int:
        """
        Gets the stock_status_changed_auto of this InventoryDataStockItemInterface.

        :return: The stock_status_changed_auto of this InventoryDataStockItemInterface.
        :rtype: int
        """
        return self._stock_status_changed_auto

    @stock_status_changed_auto.setter
    def stock_status_changed_auto(self, stock_status_changed_auto: int):
        """
        Sets the stock_status_changed_auto of this InventoryDataStockItemInterface.

        :param stock_status_changed_auto: The stock_status_changed_auto of this InventoryDataStockItemInterface.
        :type stock_status_changed_auto: int
        """
        if stock_status_changed_auto is None:
            raise ValueError("Invalid value for `stock_status_changed_auto`, must not be `None`")

        self._stock_status_changed_auto = stock_status_changed_auto

