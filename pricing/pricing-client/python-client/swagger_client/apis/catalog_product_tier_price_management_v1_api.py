# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CatalogProductTierPriceManagementV1Api(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def catalog_product_tier_price_management_v1_add_post(self, sku, customer_group_id, price, qty, **kwargs):
        """
        Create tier price for product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalog_product_tier_price_management_v1_add_post(sku, customer_group_id, price, qty, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sku: (required)
        :param str customer_group_id: 'all' can be used to specify 'ALL GROUPS' (required)
        :param float price: (required)
        :param float qty: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalog_product_tier_price_management_v1_add_post_with_http_info(sku, customer_group_id, price, qty, **kwargs)
        else:
            (data) = self.catalog_product_tier_price_management_v1_add_post_with_http_info(sku, customer_group_id, price, qty, **kwargs)
            return data

    def catalog_product_tier_price_management_v1_add_post_with_http_info(self, sku, customer_group_id, price, qty, **kwargs):
        """
        Create tier price for product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalog_product_tier_price_management_v1_add_post_with_http_info(sku, customer_group_id, price, qty, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sku: (required)
        :param str customer_group_id: 'all' can be used to specify 'ALL GROUPS' (required)
        :param float price: (required)
        :param float qty: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sku', 'customer_group_id', 'price', 'qty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalog_product_tier_price_management_v1_add_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sku' is set
        if ('sku' not in params) or (params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `catalog_product_tier_price_management_v1_add_post`")
        # verify the required parameter 'customer_group_id' is set
        if ('customer_group_id' not in params) or (params['customer_group_id'] is None):
            raise ValueError("Missing the required parameter `customer_group_id` when calling `catalog_product_tier_price_management_v1_add_post`")
        # verify the required parameter 'price' is set
        if ('price' not in params) or (params['price'] is None):
            raise ValueError("Missing the required parameter `price` when calling `catalog_product_tier_price_management_v1_add_post`")
        # verify the required parameter 'qty' is set
        if ('qty' not in params) or (params['qty'] is None):
            raise ValueError("Missing the required parameter `qty` when calling `catalog_product_tier_price_management_v1_add_post`")


        collection_formats = {}

        resource_path = '/v1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}'.replace('{format}', 'json')
        path_params = {}
        if 'sku' in params:
            path_params['sku'] = params['sku']
        if 'customer_group_id' in params:
            path_params['customerGroupId'] = params['customer_group_id']
        if 'price' in params:
            path_params['price'] = params['price']
        if 'qty' in params:
            path_params['qty'] = params['qty']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def catalog_product_tier_price_management_v1_get_list_get(self, sku, customer_group_id, **kwargs):
        """
        Get tier price of product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalog_product_tier_price_management_v1_get_list_get(sku, customer_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sku: (required)
        :param str customer_group_id: 'all' can be used to specify 'ALL GROUPS' (required)
        :return: list[ProductTierPriceInterface]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalog_product_tier_price_management_v1_get_list_get_with_http_info(sku, customer_group_id, **kwargs)
        else:
            (data) = self.catalog_product_tier_price_management_v1_get_list_get_with_http_info(sku, customer_group_id, **kwargs)
            return data

    def catalog_product_tier_price_management_v1_get_list_get_with_http_info(self, sku, customer_group_id, **kwargs):
        """
        Get tier price of product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalog_product_tier_price_management_v1_get_list_get_with_http_info(sku, customer_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sku: (required)
        :param str customer_group_id: 'all' can be used to specify 'ALL GROUPS' (required)
        :return: list[ProductTierPriceInterface]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sku', 'customer_group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalog_product_tier_price_management_v1_get_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sku' is set
        if ('sku' not in params) or (params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `catalog_product_tier_price_management_v1_get_list_get`")
        # verify the required parameter 'customer_group_id' is set
        if ('customer_group_id' not in params) or (params['customer_group_id'] is None):
            raise ValueError("Missing the required parameter `customer_group_id` when calling `catalog_product_tier_price_management_v1_get_list_get`")


        collection_formats = {}

        resource_path = '/v1/products/{sku}/group-prices/{customerGroupId}/tiers'.replace('{format}', 'json')
        path_params = {}
        if 'sku' in params:
            path_params['sku'] = params['sku']
        if 'customer_group_id' in params:
            path_params['customerGroupId'] = params['customer_group_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ProductTierPriceInterface]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def catalog_product_tier_price_management_v1_remove_delete(self, sku, customer_group_id, qty, **kwargs):
        """
        Remove tier price from product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalog_product_tier_price_management_v1_remove_delete(sku, customer_group_id, qty, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sku: (required)
        :param str customer_group_id: 'all' can be used to specify 'ALL GROUPS' (required)
        :param float qty: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.catalog_product_tier_price_management_v1_remove_delete_with_http_info(sku, customer_group_id, qty, **kwargs)
        else:
            (data) = self.catalog_product_tier_price_management_v1_remove_delete_with_http_info(sku, customer_group_id, qty, **kwargs)
            return data

    def catalog_product_tier_price_management_v1_remove_delete_with_http_info(self, sku, customer_group_id, qty, **kwargs):
        """
        Remove tier price from product
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.catalog_product_tier_price_management_v1_remove_delete_with_http_info(sku, customer_group_id, qty, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str sku: (required)
        :param str customer_group_id: 'all' can be used to specify 'ALL GROUPS' (required)
        :param float qty: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sku', 'customer_group_id', 'qty']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method catalog_product_tier_price_management_v1_remove_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sku' is set
        if ('sku' not in params) or (params['sku'] is None):
            raise ValueError("Missing the required parameter `sku` when calling `catalog_product_tier_price_management_v1_remove_delete`")
        # verify the required parameter 'customer_group_id' is set
        if ('customer_group_id' not in params) or (params['customer_group_id'] is None):
            raise ValueError("Missing the required parameter `customer_group_id` when calling `catalog_product_tier_price_management_v1_remove_delete`")
        # verify the required parameter 'qty' is set
        if ('qty' not in params) or (params['qty'] is None):
            raise ValueError("Missing the required parameter `qty` when calling `catalog_product_tier_price_management_v1_remove_delete`")


        collection_formats = {}

        resource_path = '/v1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}'.replace('{format}', 'json')
        path_params = {}
        if 'sku' in params:
            path_params['sku'] = params['sku']
        if 'customer_group_id' in params:
            path_params['customerGroupId'] = params['customer_group_id']
        if 'qty' in params:
            path_params['qty'] = params['qty']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
