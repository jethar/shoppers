# coding: utf-8

"""
    Shoppers OpenAPI

    This is a Shoppers Catalogue server.  [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.  For this sample, you can use the api key `special-key` to test the authorization filters 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ErrorParametersItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, resources=None, field_name=None, field_value=None):
        """
        ErrorParametersItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'resources': 'str',
            'field_name': 'str',
            'field_value': 'str'
        }

        self.attribute_map = {
            'resources': 'resources',
            'field_name': 'fieldName',
            'field_value': 'fieldValue'
        }

        self._resources = resources
        self._field_name = field_name
        self._field_value = field_value

    @property
    def resources(self):
        """
        Gets the resources of this ErrorParametersItem.
        ACL resource

        :return: The resources of this ErrorParametersItem.
        :rtype: str
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this ErrorParametersItem.
        ACL resource

        :param resources: The resources of this ErrorParametersItem.
        :type: str
        """

        self._resources = resources

    @property
    def field_name(self):
        """
        Gets the field_name of this ErrorParametersItem.
        Missing or invalid field name

        :return: The field_name of this ErrorParametersItem.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """
        Sets the field_name of this ErrorParametersItem.
        Missing or invalid field name

        :param field_name: The field_name of this ErrorParametersItem.
        :type: str
        """

        self._field_name = field_name

    @property
    def field_value(self):
        """
        Gets the field_value of this ErrorParametersItem.
        Incorrect field value

        :return: The field_value of this ErrorParametersItem.
        :rtype: str
        """
        return self._field_value

    @field_value.setter
    def field_value(self, field_value):
        """
        Sets the field_value of this ErrorParametersItem.
        Incorrect field value

        :param field_value: The field_value of this ErrorParametersItem.
        :type: str
        """

        self._field_value = field_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
